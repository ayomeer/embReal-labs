
EmbReal_Ex_Kuhn_Andreas_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006404  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800669c  0800669c  0001669c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d4  080066d4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066dc  080066dc  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066dc  080066dc  000166dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066e0  080066e0  000166e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080066e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080066f4  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08006754  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006b0  240000d0  080067b4  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000780  080067b4  00020780  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 15 .debug_info   00018371  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000029d1  00000000  00000000  000384b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001038  00000000  00000000  0003ae88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c84  00000000  00000000  0003bec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003a45d  00000000  00000000  0003cb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000150f4  00000000  00000000  00076fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0017f5cd  00000000  00000000  0008c095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000044e4  00000000  00000000  0020b664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  0020fb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006684 	.word	0x08006684

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006684 	.word	0x08006684

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <main+0x9c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 f9e7 	bl	8000afc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fc1d 	bl	8000f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f835 	bl	80007a0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <main+0x9c>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a17      	ldr	r2, [pc, #92]	; (800079c <main+0x9c>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <main+0x9c>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f001 fb97 	bl	8001e88 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fbad 	bl	8001ebc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <main+0x9c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 f9b9 	bl	8000afc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 f951 	bl	8000a30 <MX_GPIO_Init>
  MX_ETH_Init();
 800078e:	f000 f885 	bl	800089c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000792:	f000 f8cf 	bl	8000934 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000796:	f000 f919 	bl	80009cc <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079a:	e7fe      	b.n	800079a <main+0x9a>
 800079c:	58024400 	.word	0x58024400

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09c      	sub	sp, #112	; 0x70
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	224c      	movs	r2, #76	; 0x4c
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f005 ff3c 	bl	800662c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2220      	movs	r2, #32
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 ff36 	bl	800662c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007c0:	2004      	movs	r0, #4
 80007c2:	f001 fcd7 	bl	8002174 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b32      	ldr	r3, [pc, #200]	; (8000894 <SystemClock_Config+0xf4>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ce:	4a31      	ldr	r2, [pc, #196]	; (8000894 <SystemClock_Config+0xf4>)
 80007d0:	f023 0301 	bic.w	r3, r3, #1
 80007d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007d6:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <SystemClock_Config+0xf4>)
 80007d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <SystemClock_Config+0xf8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e8:	4a2b      	ldr	r2, [pc, #172]	; (8000898 <SystemClock_Config+0xf8>)
 80007ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b29      	ldr	r3, [pc, #164]	; (8000898 <SystemClock_Config+0xf8>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007fc:	bf00      	nop
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <SystemClock_Config+0xf8>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800080a:	d1f8      	bne.n	80007fe <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080c:	2301      	movs	r3, #1
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000810:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	2302      	movs	r3, #2
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000822:	2312      	movs	r3, #18
 8000824:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000832:	230c      	movs	r3, #12
 8000834:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000836:	2302      	movs	r3, #2
 8000838:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800083a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800083e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fcff 	bl	8002248 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000850:	f000 f954 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	233f      	movs	r3, #63	; 0x3f
 8000856:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2303      	movs	r3, #3
 800085a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000864:	2340      	movs	r3, #64	; 0x40
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000868:	2340      	movs	r3, #64	; 0x40
 800086a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800086c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000870:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000872:	2340      	movs	r3, #64	; 0x40
 8000874:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2101      	movs	r1, #1
 800087a:	4618      	mov	r0, r3
 800087c:	f002 f93e 	bl	8002afc <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000886:	f000 f939 	bl	8000afc <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3770      	adds	r7, #112	; 0x70
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	58000400 	.word	0x58000400
 8000898:	58024800 	.word	0x58024800

0800089c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_ETH_Init+0x80>)
 80008a2:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <MX_ETH_Init+0x84>)
 80008a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_ETH_Init+0x88>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_ETH_Init+0x88>)
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_ETH_Init+0x88>)
 80008b4:	22e1      	movs	r2, #225	; 0xe1
 80008b6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_ETH_Init+0x88>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_ETH_Init+0x88>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_ETH_Init+0x88>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_ETH_Init+0x80>)
 80008cc:	4a15      	ldr	r2, [pc, #84]	; (8000924 <MX_ETH_Init+0x88>)
 80008ce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_ETH_Init+0x80>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_ETH_Init+0x80>)
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <MX_ETH_Init+0x8c>)
 80008da:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_ETH_Init+0x80>)
 80008de:	4a13      	ldr	r2, [pc, #76]	; (800092c <MX_ETH_Init+0x90>)
 80008e0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_ETH_Init+0x80>)
 80008e4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008e8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_ETH_Init+0x80>)
 80008ec:	f000 fcf8 	bl	80012e0 <HAL_ETH_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008f6:	f000 f901 	bl	8000afc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008fa:	2238      	movs	r2, #56	; 0x38
 80008fc:	2100      	movs	r1, #0
 80008fe:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_ETH_Init+0x94>)
 8000900:	f005 fe94 	bl	800662c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_ETH_Init+0x94>)
 8000906:	2221      	movs	r2, #33	; 0x21
 8000908:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_ETH_Init+0x94>)
 800090c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000910:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_ETH_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	24000124 	.word	0x24000124
 8000920:	40028000 	.word	0x40028000
 8000924:	24000774 	.word	0x24000774
 8000928:	24000070 	.word	0x24000070
 800092c:	24000010 	.word	0x24000010
 8000930:	240000ec 	.word	0x240000ec

08000934 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 800093a:	4a23      	ldr	r2, [pc, #140]	; (80009c8 <MX_USART3_UART_Init+0x94>)
 800093c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800097c:	4811      	ldr	r0, [pc, #68]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 800097e:	f004 fa75 	bl	8004e6c <HAL_UART_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000988:	f000 f8b8 	bl	8000afc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098c:	2100      	movs	r1, #0
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000990:	f005 fa77 	bl	8005e82 <HAL_UARTEx_SetTxFifoThreshold>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800099a:	f000 f8af 	bl	8000afc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099e:	2100      	movs	r1, #0
 80009a0:	4808      	ldr	r0, [pc, #32]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 80009a2:	f005 faac 	bl	8005efe <HAL_UARTEx_SetRxFifoThreshold>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009ac:	f000 f8a6 	bl	8000afc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 80009b2:	f005 fa2d 	bl	8005e10 <HAL_UARTEx_DisableFifoMode>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009bc:	f000 f89e 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	240001d4 	.word	0x240001d4
 80009c8:	40004800 	.word	0x40004800

080009cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d2:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d8:	2209      	movs	r2, #9
 80009da:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009de:	2202      	movs	r2, #2
 80009e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a14:	f001 fa66 	bl	8001ee4 <HAL_PCD_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a1e:	f000 f86d 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	24000268 	.word	0x24000268
 8000a2c:	40080000 	.word	0x40080000

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	4b30      	ldr	r3, [pc, #192]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a2e      	ldr	r2, [pc, #184]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a54:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	4a27      	ldr	r2, [pc, #156]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a64:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a96:	4a18      	ldr	r2, [pc, #96]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab4:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000ab6:	f043 0308 	orr.w	r3, r3, #8
 8000aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad2:	4a09      	ldr	r2, [pc, #36]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_GPIO_Init+0xc8>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aea:	bf00      	nop
 8000aec:	371c      	adds	r7, #28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	58024400 	.word	0x58024400

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_MspInit+0x30>)
 8000b10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b14:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_MspInit+0x30>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_MspInit+0x30>)
 8000b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	58024400 	.word	0x58024400

08000b3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a59      	ldr	r2, [pc, #356]	; (8000cc0 <HAL_ETH_MspInit+0x184>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	f040 80ab 	bne.w	8000cb6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b60:	4b58      	ldr	r3, [pc, #352]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000b62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b66:	4a57      	ldr	r2, [pc, #348]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b70:	4b54      	ldr	r3, [pc, #336]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000b72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b7a:	623b      	str	r3, [r7, #32]
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b7e:	4b51      	ldr	r3, [pc, #324]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000b80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b84:	4a4f      	ldr	r2, [pc, #316]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b8e:	4b4d      	ldr	r3, [pc, #308]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000b90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b98:	61fb      	str	r3, [r7, #28]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b9c:	4b49      	ldr	r3, [pc, #292]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000b9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba2:	4a48      	ldr	r2, [pc, #288]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bac:	4b45      	ldr	r3, [pc, #276]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000bae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb6:	61bb      	str	r3, [r7, #24]
 8000bb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b42      	ldr	r3, [pc, #264]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a40      	ldr	r2, [pc, #256]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	4a39      	ldr	r2, [pc, #228]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be8:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	4a31      	ldr	r2, [pc, #196]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000bfe:	f043 0302 	orr.w	r3, r3, #2
 8000c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c06:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	f003 0302 	and.w	r3, r3, #2
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c14:	4b2b      	ldr	r3, [pc, #172]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	4a2a      	ldr	r2, [pc, #168]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c24:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <HAL_ETH_MspInit+0x188>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c32:	2332      	movs	r3, #50	; 0x32
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c42:	230b      	movs	r3, #11
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	481e      	ldr	r0, [pc, #120]	; (8000cc8 <HAL_ETH_MspInit+0x18c>)
 8000c4e:	f000 ff6b 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c52:	2386      	movs	r3, #134	; 0x86
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c62:	230b      	movs	r3, #11
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4817      	ldr	r0, [pc, #92]	; (8000ccc <HAL_ETH_MspInit+0x190>)
 8000c6e:	f000 ff5b 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c84:	230b      	movs	r3, #11
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4810      	ldr	r0, [pc, #64]	; (8000cd0 <HAL_ETH_MspInit+0x194>)
 8000c90:	f000 ff4a 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca6:	230b      	movs	r3, #11
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <HAL_ETH_MspInit+0x198>)
 8000cb2:	f000 ff39 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3738      	adds	r7, #56	; 0x38
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40028000 	.word	0x40028000
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58020800 	.word	0x58020800
 8000ccc:	58020000 	.word	0x58020000
 8000cd0:	58020400 	.word	0x58020400
 8000cd4:	58021800 	.word	0x58021800

08000cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0ba      	sub	sp, #232	; 0xe8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	22c0      	movs	r2, #192	; 0xc0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f005 fc97 	bl	800662c <memset>
  if(huart->Instance==USART3)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a27      	ldr	r2, [pc, #156]	; (8000da0 <HAL_UART_MspInit+0xc8>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d146      	bne.n	8000d96 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d08:	f04f 0202 	mov.w	r2, #2
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 fa78 	bl	8003214 <HAL_RCCEx_PeriphCLKConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d2a:	f7ff fee7 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <HAL_UART_MspInit+0xcc>)
 8000d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d34:	4a1b      	ldr	r2, [pc, #108]	; (8000da4 <HAL_UART_MspInit+0xcc>)
 8000d36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_UART_MspInit+0xcc>)
 8000d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_UART_MspInit+0xcc>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <HAL_UART_MspInit+0xcc>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_UART_MspInit+0xcc>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d84:	2307      	movs	r3, #7
 8000d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <HAL_UART_MspInit+0xd0>)
 8000d92:	f000 fec9 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	37e8      	adds	r7, #232	; 0xe8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40004800 	.word	0x40004800
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58020c00 	.word	0x58020c00

08000dac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0ba      	sub	sp, #232	; 0xe8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	22c0      	movs	r2, #192	; 0xc0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f005 fc2d 	bl	800662c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a38      	ldr	r2, [pc, #224]	; (8000eb8 <HAL_PCD_MspInit+0x10c>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d169      	bne.n	8000eb0 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ddc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000dec:	2312      	movs	r3, #18
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000df4:	2303      	movs	r3, #3
 8000df6:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000dfc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e00:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000e02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e06:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000e08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 f9fd 	bl	8003214 <HAL_RCCEx_PeriphCLKConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000e20:	f7ff fe6c 	bl	8000afc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e24:	f001 fa00 	bl	8002228 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <HAL_PCD_MspInit+0x110>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <HAL_PCD_MspInit+0x110>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e38:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <HAL_PCD_MspInit+0x110>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e46:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e60:	230a      	movs	r3, #10
 8000e62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4814      	ldr	r0, [pc, #80]	; (8000ec0 <HAL_PCD_MspInit+0x114>)
 8000e6e:	f000 fe5b 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <HAL_PCD_MspInit+0x114>)
 8000e8e:	f000 fe4b 	bl	8001b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_PCD_MspInit+0x110>)
 8000e94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e98:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_PCD_MspInit+0x110>)
 8000e9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_PCD_MspInit+0x110>)
 8000ea4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	37e8      	adds	r7, #232	; 0xe8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40080000 	.word	0x40080000
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58020000 	.word	0x58020000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f89e 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f1c:	f7ff fb5a 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f22:	490d      	ldr	r1, [pc, #52]	; (8000f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f38:	4c0a      	ldr	r4, [pc, #40]	; (8000f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f46:	f005 fb79 	bl	800663c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4a:	f7ff fbd9 	bl	8000700 <main>
  bx  lr
 8000f4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f50:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f58:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f5c:	080066e4 	.word	0x080066e4
  ldr r2, =_sbss
 8000f60:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000f64:	24000780 	.word	0x24000780

08000f68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC3_IRQHandler>
	...

08000f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f72:	2003      	movs	r0, #3
 8000f74:	f000 f982 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f78:	f001 ff76 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_Init+0x68>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	0a1b      	lsrs	r3, r3, #8
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	4913      	ldr	r1, [pc, #76]	; (8000fd8 <HAL_Init+0x6c>)
 8000f8a:	5ccb      	ldrb	r3, [r1, r3]
 8000f8c:	f003 031f 	and.w	r3, r3, #31
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
 8000f94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_Init+0x68>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <HAL_Init+0x6c>)
 8000fa0:	5cd3      	ldrb	r3, [r2, r3]
 8000fa2:	f003 031f 	and.w	r3, r3, #31
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fac:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <HAL_Init+0x70>)
 8000fae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <HAL_Init+0x74>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f814 	bl	8000fe4 <HAL_InitTick>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e002      	b.n	8000fcc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc6:	f7ff fd9f 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	0800669c 	.word	0x0800669c
 8000fdc:	24000004 	.word	0x24000004
 8000fe0:	24000000 	.word	0x24000000

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_InitTick+0x60>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e021      	b.n	800103c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_InitTick+0x64>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_InitTick+0x60>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f959 	bl	80012c6 <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f000 f931 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_InitTick+0x68>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2400000c 	.word	0x2400000c
 8001048:	24000000 	.word	0x24000000
 800104c:	24000008 	.word	0x24000008

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	2400000c 	.word	0x2400000c
 8001074:	2400077c 	.word	0x2400077c

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	2400077c 	.word	0x2400077c

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ffee 	bl	8001078 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_Delay+0x44>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffde 	bl	8001078 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2400000c 	.word	0x2400000c

080010d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetREVID+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	0c1b      	lsrs	r3, r3, #16
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	5c001000 	.word	0x5c001000

080010f0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001100:	4904      	ldr	r1, [pc, #16]	; (8001114 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4313      	orrs	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	58000400 	.word	0x58000400

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <__NVIC_SetPriorityGrouping+0x40>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	4313      	orrs	r3, r2
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <__NVIC_SetPriorityGrouping+0x40>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00
 800115c:	05fa0000 	.word	0x05fa0000

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f7ff ff8e 	bl	800117c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff47 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012a0:	f7ff ff5e 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	6978      	ldr	r0, [r7, #20]
 80012ac:	f7ff ff90 	bl	80011d0 <NVIC_EncodePriority>
 80012b0:	4602      	mov	r2, r0
 80012b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff5f 	bl	800117c <__NVIC_SetPriority>
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffb2 	bl	8001238 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e0cf      	b.n	8001492 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d106      	bne.n	800130a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2223      	movs	r2, #35	; 0x23
 8001300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fc19 	bl	8000b3c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b64      	ldr	r3, [pc, #400]	; (800149c <HAL_ETH_Init+0x1bc>)
 800130c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001310:	4a62      	ldr	r2, [pc, #392]	; (800149c <HAL_ETH_Init+0x1bc>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800131a:	4b60      	ldr	r3, [pc, #384]	; (800149c <HAL_ETH_Init+0x1bc>)
 800131c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7a1b      	ldrb	r3, [r3, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d103      	bne.n	8001338 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fedd 	bl	80010f0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001336:	e003      	b.n	8001340 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001338:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800133c:	f7ff fed8 	bl	80010f0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001340:	4b57      	ldr	r3, [pc, #348]	; (80014a0 <HAL_ETH_Init+0x1c0>)
 8001342:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800135a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800135c:	f7ff fe8c 	bl	8001078 <HAL_GetTick>
 8001360:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001362:	e011      	b.n	8001388 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001364:	f7ff fe88 	bl	8001078 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001372:	d909      	bls.n	8001388 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2204      	movs	r2, #4
 8001378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	22e0      	movs	r2, #224	; 0xe0
 8001380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e084      	b.n	8001492 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1e4      	bne.n	8001364 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f886 	bl	80014ac <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013a0:	f001 fedc 	bl	800315c <HAL_RCC_GetHCLKFreq>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a3f      	ldr	r2, [pc, #252]	; (80014a4 <HAL_ETH_Init+0x1c4>)
 80013a8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ac:	0c9a      	lsrs	r2, r3, #18
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3a01      	subs	r2, #1
 80013b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 fa71 	bl	80018a0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80013ca:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013da:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d009      	beq.n	80013fe <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	22e0      	movs	r2, #224	; 0xe0
 80013f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e049      	b.n	8001492 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001406:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <HAL_ETH_Init+0x1c8>)
 800140c:	4013      	ands	r3, r2
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6952      	ldr	r2, [r2, #20]
 8001412:	0051      	lsls	r1, r2, #1
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	430b      	orrs	r3, r1
 800141a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800141e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 fad9 	bl	80019da <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 fb1f 	bl	8001a6c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	3305      	adds	r3, #5
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	021a      	lsls	r2, r3, #8
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	3304      	adds	r3, #4
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	3303      	adds	r3, #3
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	061a      	lsls	r2, r3, #24
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	3302      	adds	r3, #2
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	3301      	adds	r3, #1
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800146c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800147a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800147c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2210      	movs	r2, #16
 800148c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	58024400 	.word	0x58024400
 80014a0:	58000400 	.word	0x58000400
 80014a4:	431bde83 	.word	0x431bde83
 80014a8:	ffff8001 	.word	0xffff8001

080014ac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014c6:	f001 fe49 	bl	800315c <HAL_RCC_GetHCLKFreq>
 80014ca:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4a1e      	ldr	r2, [pc, #120]	; (8001548 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d908      	bls.n	80014e6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4a1d      	ldr	r2, [pc, #116]	; (800154c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d804      	bhi.n	80014e6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	e027      	b.n	8001536 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	4a18      	ldr	r2, [pc, #96]	; (800154c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d908      	bls.n	8001500 <HAL_ETH_SetMDIOClockRange+0x54>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d204      	bcs.n	8001500 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	e01a      	b.n	8001536 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d303      	bcc.n	8001510 <HAL_ETH_SetMDIOClockRange+0x64>
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d911      	bls.n	8001534 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4a10      	ldr	r2, [pc, #64]	; (8001554 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d908      	bls.n	800152a <HAL_ETH_SetMDIOClockRange+0x7e>
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <HAL_ETH_SetMDIOClockRange+0xac>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d804      	bhi.n	800152a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	e005      	b.n	8001536 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	e000      	b.n	8001536 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001534:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	01312cff 	.word	0x01312cff
 800154c:	02160ebf 	.word	0x02160ebf
 8001550:	03938700 	.word	0x03938700
 8001554:	05f5e0ff 	.word	0x05f5e0ff
 8001558:	08f0d17f 	.word	0x08f0d17f

0800155c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800156e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	791b      	ldrb	r3, [r3, #4]
 8001574:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001576:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	7b1b      	ldrb	r3, [r3, #12]
 800157c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800157e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	7b5b      	ldrb	r3, [r3, #13]
 8001584:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001586:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	7b9b      	ldrb	r3, [r3, #14]
 800158c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800158e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	7bdb      	ldrb	r3, [r3, #15]
 8001594:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001596:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	7c12      	ldrb	r2, [r2, #16]
 800159c:	2a00      	cmp	r2, #0
 800159e:	d102      	bne.n	80015a6 <ETH_SetMACConfig+0x4a>
 80015a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015a4:	e000      	b.n	80015a8 <ETH_SetMACConfig+0x4c>
 80015a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80015a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	7c52      	ldrb	r2, [r2, #17]
 80015ae:	2a00      	cmp	r2, #0
 80015b0:	d102      	bne.n	80015b8 <ETH_SetMACConfig+0x5c>
 80015b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015b6:	e000      	b.n	80015ba <ETH_SetMACConfig+0x5e>
 80015b8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80015ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	7c9b      	ldrb	r3, [r3, #18]
 80015c0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80015c2:	431a      	orrs	r2, r3
               macconf->Speed |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80015c8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80015ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	7f1b      	ldrb	r3, [r3, #28]
 80015d4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80015d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	7f5b      	ldrb	r3, [r3, #29]
 80015dc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80015de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	7f92      	ldrb	r2, [r2, #30]
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	d102      	bne.n	80015ee <ETH_SetMACConfig+0x92>
 80015e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ec:	e000      	b.n	80015f0 <ETH_SetMACConfig+0x94>
 80015ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80015f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	7fdb      	ldrb	r3, [r3, #31]
 80015f6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80015f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001600:	2a00      	cmp	r2, #0
 8001602:	d102      	bne.n	800160a <ETH_SetMACConfig+0xae>
 8001604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001608:	e000      	b.n	800160c <ETH_SetMACConfig+0xb0>
 800160a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800160c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001612:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800161a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800161c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001622:	4313      	orrs	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b56      	ldr	r3, [pc, #344]	; (8001788 <ETH_SetMACConfig+0x22c>)
 800162e:	4013      	ands	r3, r2
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	68f9      	ldr	r1, [r7, #12]
 8001636:	430b      	orrs	r3, r1
 8001638:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001646:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001648:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001650:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001652:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800165a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800165c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001664:	2a00      	cmp	r2, #0
 8001666:	d102      	bne.n	800166e <ETH_SetMACConfig+0x112>
 8001668:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800166c:	e000      	b.n	8001670 <ETH_SetMACConfig+0x114>
 800166e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001670:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4b42      	ldr	r3, [pc, #264]	; (800178c <ETH_SetMACConfig+0x230>)
 8001682:	4013      	ands	r3, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	68f9      	ldr	r1, [r7, #12]
 800168a:	430b      	orrs	r3, r1
 800168c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001694:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800169a:	4313      	orrs	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <ETH_SetMACConfig+0x234>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	68f9      	ldr	r1, [r7, #12]
 80016ae:	430b      	orrs	r3, r1
 80016b0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016b8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	d101      	bne.n	80016ce <ETH_SetMACConfig+0x172>
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	e000      	b.n	80016d0 <ETH_SetMACConfig+0x174>
 80016ce:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80016d0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016d8:	4313      	orrs	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016e2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80016e6:	4013      	ands	r3, r2
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	430b      	orrs	r3, r1
 80016f0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80016f8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001700:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170e:	f023 0103 	bic.w	r1, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	430a      	orrs	r2, r1
 800171a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001726:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001742:	2a00      	cmp	r2, #0
 8001744:	d101      	bne.n	800174a <ETH_SetMACConfig+0x1ee>
 8001746:	2240      	movs	r2, #64	; 0x40
 8001748:	e000      	b.n	800174c <ETH_SetMACConfig+0x1f0>
 800174a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800174c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001754:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001756:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800175e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800176c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	430a      	orrs	r2, r1
 8001778:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	00048083 	.word	0x00048083
 800178c:	c0f88000 	.word	0xc0f88000
 8001790:	fffffef0 	.word	0xfffffef0

08001794 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b38      	ldr	r3, [pc, #224]	; (800188c <ETH_SetDMAConfig+0xf8>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	6811      	ldr	r1, [r2, #0]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	430b      	orrs	r3, r1
 80017b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ba:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	791b      	ldrb	r3, [r3, #4]
 80017c0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017c6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	7b1b      	ldrb	r3, [r3, #12]
 80017cc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <ETH_SetDMAConfig+0xfc>)
 80017de:	4013      	ands	r3, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	68f9      	ldr	r1, [r7, #12]
 80017e6:	430b      	orrs	r3, r1
 80017e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ec:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	7b5b      	ldrb	r3, [r3, #13]
 80017f2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001804:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001808:	4b22      	ldr	r3, [pc, #136]	; (8001894 <ETH_SetDMAConfig+0x100>)
 800180a:	4013      	ands	r3, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	430b      	orrs	r3, r1
 8001814:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001818:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	7d1b      	ldrb	r3, [r3, #20]
 8001824:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001826:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	7f5b      	ldrb	r3, [r3, #29]
 800182c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800182e:	4313      	orrs	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <ETH_SetDMAConfig+0x104>)
 8001840:	4013      	ands	r3, r2
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	68f9      	ldr	r1, [r7, #12]
 8001848:	430b      	orrs	r3, r1
 800184a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800184e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	7f1b      	ldrb	r3, [r3, #28]
 8001856:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800185c:	4313      	orrs	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001868:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <ETH_SetDMAConfig+0x108>)
 800186e:	4013      	ands	r3, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	68f9      	ldr	r1, [r7, #12]
 8001876:	430b      	orrs	r3, r1
 8001878:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800187c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	ffff87fd 	.word	0xffff87fd
 8001890:	ffff2ffe 	.word	0xffff2ffe
 8001894:	fffec000 	.word	0xfffec000
 8001898:	ffc0efef 	.word	0xffc0efef
 800189c:	7fc0ffff 	.word	0x7fc0ffff

080018a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b0a4      	sub	sp, #144	; 0x90
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018ae:	2300      	movs	r3, #0
 80018b0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80018be:	2301      	movs	r3, #1
 80018c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80018c4:	2301      	movs	r3, #1
 80018c6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80018d6:	2301      	movs	r3, #1
 80018d8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80018dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80018f8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80018fc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001908:	2301      	movs	r3, #1
 800190a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800191a:	2300      	movs	r3, #0
 800191c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800191e:	2300      	movs	r3, #0
 8001920:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001922:	2300      	movs	r3, #0
 8001924:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001932:	2301      	movs	r3, #1
 8001934:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001938:	2320      	movs	r3, #32
 800193a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800193e:	2301      	movs	r3, #1
 8001940:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800194a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001950:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001954:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800195c:	2302      	movs	r3, #2
 800195e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001974:	2301      	movs	r3, #1
 8001976:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800197a:	2300      	movs	r3, #0
 800197c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800197e:	2301      	movs	r3, #1
 8001980:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001988:	4619      	mov	r1, r3
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fde6 	bl	800155c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001990:	2301      	movs	r3, #1
 8001992:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001994:	2301      	movs	r3, #1
 8001996:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019ae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80019c0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	4619      	mov	r1, r3
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff fee1 	bl	8001794 <ETH_SetDMAConfig>
}
 80019d2:	bf00      	nop
 80019d4:	3790      	adds	r7, #144	; 0x90
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80019da:	b480      	push	{r7}
 80019dc:	b085      	sub	sp, #20
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	e01d      	b.n	8001a24 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68d9      	ldr	r1, [r3, #12]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	440b      	add	r3, r1
 80019f8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2200      	movs	r2, #0
 8001a04:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	3206      	adds	r2, #6
 8001a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3301      	adds	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d9de      	bls.n	80019e8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	e023      	b.n	8001ac2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6919      	ldr	r1, [r3, #16]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	440b      	add	r3, r1
 8001a8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2200      	movs	r2, #0
 8001aae:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	3212      	adds	r2, #18
 8001ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d9d8      	bls.n	8001a7a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aee:	461a      	mov	r2, r3
 8001af0:	2303      	movs	r3, #3
 8001af2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b02:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b16:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b36:	4b89      	ldr	r3, [pc, #548]	; (8001d5c <HAL_GPIO_Init+0x234>)
 8001b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b3a:	e194      	b.n	8001e66 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2101      	movs	r1, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8186 	beq.w	8001e60 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d005      	beq.n	8001b6c <HAL_GPIO_Init+0x44>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d130      	bne.n	8001bce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f003 0201 	and.w	r2, r3, #1
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d017      	beq.n	8001c0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	2203      	movs	r2, #3
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d123      	bne.n	8001c5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	08da      	lsrs	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3208      	adds	r2, #8
 8001c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	08da      	lsrs	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3208      	adds	r2, #8
 8001c58:	69b9      	ldr	r1, [r7, #24]
 8001c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0203 	and.w	r2, r3, #3
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 80e0 	beq.w	8001e60 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_GPIO_Init+0x238>)
 8001ca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ca6:	4a2e      	ldr	r2, [pc, #184]	; (8001d60 <HAL_GPIO_Init+0x238>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <HAL_GPIO_Init+0x238>)
 8001cb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cbe:	4a29      	ldr	r2, [pc, #164]	; (8001d64 <HAL_GPIO_Init+0x23c>)
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a20      	ldr	r2, [pc, #128]	; (8001d68 <HAL_GPIO_Init+0x240>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d052      	beq.n	8001d90 <HAL_GPIO_Init+0x268>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <HAL_GPIO_Init+0x244>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d031      	beq.n	8001d56 <HAL_GPIO_Init+0x22e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <HAL_GPIO_Init+0x248>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d02b      	beq.n	8001d52 <HAL_GPIO_Init+0x22a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a1d      	ldr	r2, [pc, #116]	; (8001d74 <HAL_GPIO_Init+0x24c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d025      	beq.n	8001d4e <HAL_GPIO_Init+0x226>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a1c      	ldr	r2, [pc, #112]	; (8001d78 <HAL_GPIO_Init+0x250>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d01f      	beq.n	8001d4a <HAL_GPIO_Init+0x222>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a1b      	ldr	r2, [pc, #108]	; (8001d7c <HAL_GPIO_Init+0x254>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d019      	beq.n	8001d46 <HAL_GPIO_Init+0x21e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a1a      	ldr	r2, [pc, #104]	; (8001d80 <HAL_GPIO_Init+0x258>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_GPIO_Init+0x21a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <HAL_GPIO_Init+0x25c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00d      	beq.n	8001d3e <HAL_GPIO_Init+0x216>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <HAL_GPIO_Init+0x260>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <HAL_GPIO_Init+0x212>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a17      	ldr	r2, [pc, #92]	; (8001d8c <HAL_GPIO_Init+0x264>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_GPIO_Init+0x20e>
 8001d32:	2309      	movs	r3, #9
 8001d34:	e02d      	b.n	8001d92 <HAL_GPIO_Init+0x26a>
 8001d36:	230a      	movs	r3, #10
 8001d38:	e02b      	b.n	8001d92 <HAL_GPIO_Init+0x26a>
 8001d3a:	2308      	movs	r3, #8
 8001d3c:	e029      	b.n	8001d92 <HAL_GPIO_Init+0x26a>
 8001d3e:	2307      	movs	r3, #7
 8001d40:	e027      	b.n	8001d92 <HAL_GPIO_Init+0x26a>
 8001d42:	2306      	movs	r3, #6
 8001d44:	e025      	b.n	8001d92 <HAL_GPIO_Init+0x26a>
 8001d46:	2305      	movs	r3, #5
 8001d48:	e023      	b.n	8001d92 <HAL_GPIO_Init+0x26a>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e021      	b.n	8001d92 <HAL_GPIO_Init+0x26a>
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e01f      	b.n	8001d92 <HAL_GPIO_Init+0x26a>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e01d      	b.n	8001d92 <HAL_GPIO_Init+0x26a>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e01b      	b.n	8001d92 <HAL_GPIO_Init+0x26a>
 8001d5a:	bf00      	nop
 8001d5c:	58000080 	.word	0x58000080
 8001d60:	58024400 	.word	0x58024400
 8001d64:	58000400 	.word	0x58000400
 8001d68:	58020000 	.word	0x58020000
 8001d6c:	58020400 	.word	0x58020400
 8001d70:	58020800 	.word	0x58020800
 8001d74:	58020c00 	.word	0x58020c00
 8001d78:	58021000 	.word	0x58021000
 8001d7c:	58021400 	.word	0x58021400
 8001d80:	58021800 	.word	0x58021800
 8001d84:	58021c00 	.word	0x58021c00
 8001d88:	58022000 	.word	0x58022000
 8001d8c:	58022400 	.word	0x58022400
 8001d90:	2300      	movs	r3, #0
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	f002 0203 	and.w	r2, r2, #3
 8001d98:	0092      	lsls	r2, r2, #2
 8001d9a:	4093      	lsls	r3, r2
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da2:	4938      	ldr	r1, [pc, #224]	; (8001e84 <HAL_GPIO_Init+0x35c>)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3302      	adds	r3, #2
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001dd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	3301      	adds	r3, #1
 8001e64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f47f ae63 	bne.w	8001b3c <HAL_GPIO_Init+0x14>
  }
}
 8001e76:	bf00      	nop
 8001e78:	bf00      	nop
 8001e7a:	3724      	adds	r7, #36	; 0x24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	58000400 	.word	0x58000400

08001e88 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001e90:	4a08      	ldr	r2, [pc, #32]	; (8001eb4 <HAL_HSEM_FastTake+0x2c>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3320      	adds	r3, #32
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_HSEM_FastTake+0x30>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d101      	bne.n	8001ea4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e000      	b.n	8001ea6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	58026400 	.word	0x58026400
 8001eb8:	80000300 	.word	0x80000300

08001ebc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001ec6:	4906      	ldr	r1, [pc, #24]	; (8001ee0 <HAL_HSEM_Release+0x24>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	58026400 	.word	0x58026400

08001ee4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee6:	b08f      	sub	sp, #60	; 0x3c
 8001ee8:	af0a      	add	r7, sp, #40	; 0x28
 8001eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e116      	b.n	8002124 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d106      	bne.n	8001f16 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7fe ff4b 	bl	8000dac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d102      	bne.n	8001f30 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f004 f8dd 	bl	80060f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	687e      	ldr	r6, [r7, #4]
 8001f42:	466d      	mov	r5, sp
 8001f44:	f106 0410 	add.w	r4, r6, #16
 8001f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f54:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f58:	1d33      	adds	r3, r6, #4
 8001f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5c:	6838      	ldr	r0, [r7, #0]
 8001f5e:	f004 f85b 	bl	8006018 <USB_CoreInit>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0d7      	b.n	8002124 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f004 f8cb 	bl	8006116 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	e04a      	b.n	800201c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	333d      	adds	r3, #61	; 0x3d
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	333c      	adds	r3, #60	; 0x3c
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	b298      	uxth	r0, r3
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	3356      	adds	r3, #86	; 0x56
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3340      	adds	r3, #64	; 0x40
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3344      	adds	r3, #68	; 0x44
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3348      	adds	r3, #72	; 0x48
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	334c      	adds	r3, #76	; 0x4c
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	3301      	adds	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	d3af      	bcc.n	8001f86 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
 800202a:	e044      	b.n	80020b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	3301      	adds	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d3b5      	bcc.n	800202c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	687e      	ldr	r6, [r7, #4]
 80020c8:	466d      	mov	r5, sp
 80020ca:	f106 0410 	add.w	r4, r6, #16
 80020ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020da:	e885 0003 	stmia.w	r5, {r0, r1}
 80020de:	1d33      	adds	r3, r6, #4
 80020e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f004 f864 	bl	80061b0 <USB_DevInit>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e014      	b.n	8002124 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	2b01      	cmp	r3, #1
 8002110:	d102      	bne.n	8002118 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f80a 	bl	800212c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f004 fa22 	bl	8006566 <USB_DevDisconnect>

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800212c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_PCDEx_ActivateLPM+0x44>)
 800215c:	4313      	orrs	r3, r2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	10000003 	.word	0x10000003

08002174 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800217c:	4b29      	ldr	r3, [pc, #164]	; (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	2b06      	cmp	r3, #6
 8002186:	d00a      	beq.n	800219e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002188:	4b26      	ldr	r3, [pc, #152]	; (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	429a      	cmp	r2, r3
 8002194:	d001      	beq.n	800219a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e040      	b.n	800221c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e03e      	b.n	800221c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80021a6:	491f      	ldr	r1, [pc, #124]	; (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021ae:	f7fe ff63 	bl	8001078 <HAL_GetTick>
 80021b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021b4:	e009      	b.n	80021ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021b6:	f7fe ff5f 	bl	8001078 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021c4:	d901      	bls.n	80021ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e028      	b.n	800221c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d6:	d1ee      	bne.n	80021b6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b1e      	cmp	r3, #30
 80021dc:	d008      	beq.n	80021f0 <HAL_PWREx_ConfigSupply+0x7c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b2e      	cmp	r3, #46	; 0x2e
 80021e2:	d005      	beq.n	80021f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b1d      	cmp	r3, #29
 80021e8:	d002      	beq.n	80021f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b2d      	cmp	r3, #45	; 0x2d
 80021ee:	d114      	bne.n	800221a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80021f0:	f7fe ff42 	bl	8001078 <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021f6:	e009      	b.n	800220c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021f8:	f7fe ff3e 	bl	8001078 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002206:	d901      	bls.n	800220c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e007      	b.n	800221c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002218:	d1ee      	bne.n	80021f8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	58024800 	.word	0x58024800

08002228 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	58024800 	.word	0x58024800

08002248 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d102      	bne.n	800225c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	f000 bc48 	b.w	8002aec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 8088 	beq.w	800237a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800226a:	4b99      	ldr	r3, [pc, #612]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002274:	4b96      	ldr	r3, [pc, #600]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	2b10      	cmp	r3, #16
 800227e:	d007      	beq.n	8002290 <HAL_RCC_OscConfig+0x48>
 8002280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002282:	2b18      	cmp	r3, #24
 8002284:	d111      	bne.n	80022aa <HAL_RCC_OscConfig+0x62>
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d10c      	bne.n	80022aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	4b8f      	ldr	r3, [pc, #572]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d06d      	beq.n	8002378 <HAL_RCC_OscConfig+0x130>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d169      	bne.n	8002378 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	f000 bc21 	b.w	8002aec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x7a>
 80022b4:	4b86      	ldr	r3, [pc, #536]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a85      	ldr	r2, [pc, #532]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80022ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	e02e      	b.n	8002320 <HAL_RCC_OscConfig+0xd8>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x9c>
 80022ca:	4b81      	ldr	r3, [pc, #516]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a80      	ldr	r2, [pc, #512]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80022d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b7e      	ldr	r3, [pc, #504]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a7d      	ldr	r2, [pc, #500]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80022dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e01d      	b.n	8002320 <HAL_RCC_OscConfig+0xd8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0xc0>
 80022ee:	4b78      	ldr	r3, [pc, #480]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a77      	ldr	r2, [pc, #476]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80022f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b75      	ldr	r3, [pc, #468]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a74      	ldr	r2, [pc, #464]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 8002300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e00b      	b.n	8002320 <HAL_RCC_OscConfig+0xd8>
 8002308:	4b71      	ldr	r3, [pc, #452]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a70      	ldr	r2, [pc, #448]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 800230e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b6e      	ldr	r3, [pc, #440]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a6d      	ldr	r2, [pc, #436]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 800231a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d013      	beq.n	8002350 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe fea6 	bl	8001078 <HAL_GetTick>
 800232c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002330:	f7fe fea2 	bl	8001078 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e3d4      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002342:	4b63      	ldr	r3, [pc, #396]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0xe8>
 800234e:	e014      	b.n	800237a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe fe92 	bl	8001078 <HAL_GetTick>
 8002354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7fe fe8e 	bl	8001078 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e3c0      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800236a:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x110>
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80ca 	beq.w	800251c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002388:	4b51      	ldr	r3, [pc, #324]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002390:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002392:	4b4f      	ldr	r3, [pc, #316]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <HAL_RCC_OscConfig+0x166>
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	2b18      	cmp	r3, #24
 80023a2:	d156      	bne.n	8002452 <HAL_RCC_OscConfig+0x20a>
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d151      	bne.n	8002452 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ae:	4b48      	ldr	r3, [pc, #288]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_RCC_OscConfig+0x17e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e392      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023c6:	4b42      	ldr	r3, [pc, #264]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 0219 	bic.w	r2, r3, #25
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	493f      	ldr	r1, [pc, #252]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7fe fe4e 	bl	8001078 <HAL_GetTick>
 80023dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e0:	f7fe fe4a 	bl	8001078 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e37c      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023f2:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	f7fe fe6b 	bl	80010d8 <HAL_GetREVID>
 8002402:	4603      	mov	r3, r0
 8002404:	f241 0203 	movw	r2, #4099	; 0x1003
 8002408:	4293      	cmp	r3, r2
 800240a:	d817      	bhi.n	800243c <HAL_RCC_OscConfig+0x1f4>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b40      	cmp	r3, #64	; 0x40
 8002412:	d108      	bne.n	8002426 <HAL_RCC_OscConfig+0x1de>
 8002414:	4b2e      	ldr	r3, [pc, #184]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800241c:	4a2c      	ldr	r2, [pc, #176]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 800241e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002422:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002424:	e07a      	b.n	800251c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002426:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	031b      	lsls	r3, r3, #12
 8002434:	4926      	ldr	r1, [pc, #152]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800243a:	e06f      	b.n	800251c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243c:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	061b      	lsls	r3, r3, #24
 800244a:	4921      	ldr	r1, [pc, #132]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002450:	e064      	b.n	800251c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d047      	beq.n	80024ea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800245a:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 0219 	bic.w	r2, r3, #25
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	491a      	ldr	r1, [pc, #104]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7fe fe04 	bl	8001078 <HAL_GetTick>
 8002470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002474:	f7fe fe00 	bl	8001078 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e332      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	f7fe fe21 	bl	80010d8 <HAL_GetREVID>
 8002496:	4603      	mov	r3, r0
 8002498:	f241 0203 	movw	r2, #4099	; 0x1003
 800249c:	4293      	cmp	r3, r2
 800249e:	d819      	bhi.n	80024d4 <HAL_RCC_OscConfig+0x28c>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	2b40      	cmp	r3, #64	; 0x40
 80024a6:	d108      	bne.n	80024ba <HAL_RCC_OscConfig+0x272>
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024b0:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80024b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b6:	6053      	str	r3, [r2, #4]
 80024b8:	e030      	b.n	800251c <HAL_RCC_OscConfig+0x2d4>
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	031b      	lsls	r3, r3, #12
 80024c8:	4901      	ldr	r1, [pc, #4]	; (80024d0 <HAL_RCC_OscConfig+0x288>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]
 80024ce:	e025      	b.n	800251c <HAL_RCC_OscConfig+0x2d4>
 80024d0:	58024400 	.word	0x58024400
 80024d4:	4b9a      	ldr	r3, [pc, #616]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	4997      	ldr	r1, [pc, #604]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
 80024e8:	e018      	b.n	800251c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b95      	ldr	r3, [pc, #596]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a94      	ldr	r2, [pc, #592]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe fdbf 	bl	8001078 <HAL_GetTick>
 80024fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fe:	f7fe fdbb 	bl	8001078 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e2ed      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002510:	4b8b      	ldr	r3, [pc, #556]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80a9 	beq.w	800267c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252a:	4b85      	ldr	r3, [pc, #532]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002532:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002534:	4b82      	ldr	r3, [pc, #520]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	2b08      	cmp	r3, #8
 800253e:	d007      	beq.n	8002550 <HAL_RCC_OscConfig+0x308>
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b18      	cmp	r3, #24
 8002544:	d13a      	bne.n	80025bc <HAL_RCC_OscConfig+0x374>
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d135      	bne.n	80025bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002550:	4b7b      	ldr	r3, [pc, #492]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_OscConfig+0x320>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d001      	beq.n	8002568 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e2c1      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002568:	f7fe fdb6 	bl	80010d8 <HAL_GetREVID>
 800256c:	4603      	mov	r3, r0
 800256e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002572:	4293      	cmp	r3, r2
 8002574:	d817      	bhi.n	80025a6 <HAL_RCC_OscConfig+0x35e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	2b20      	cmp	r3, #32
 800257c:	d108      	bne.n	8002590 <HAL_RCC_OscConfig+0x348>
 800257e:	4b70      	ldr	r3, [pc, #448]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002586:	4a6e      	ldr	r2, [pc, #440]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002588:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800258c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800258e:	e075      	b.n	800267c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002590:	4b6b      	ldr	r3, [pc, #428]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	069b      	lsls	r3, r3, #26
 800259e:	4968      	ldr	r1, [pc, #416]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025a4:	e06a      	b.n	800267c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025a6:	4b66      	ldr	r3, [pc, #408]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	061b      	lsls	r3, r3, #24
 80025b4:	4962      	ldr	r1, [pc, #392]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025ba:	e05f      	b.n	800267c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d042      	beq.n	800264a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025c4:	4b5e      	ldr	r3, [pc, #376]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a5d      	ldr	r2, [pc, #372]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 80025ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fd52 	bl	8001078 <HAL_GetTick>
 80025d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025d8:	f7fe fd4e 	bl	8001078 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e280      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025ea:	4b55      	ldr	r3, [pc, #340]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025f6:	f7fe fd6f 	bl	80010d8 <HAL_GetREVID>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002600:	4293      	cmp	r3, r2
 8002602:	d817      	bhi.n	8002634 <HAL_RCC_OscConfig+0x3ec>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	2b20      	cmp	r3, #32
 800260a:	d108      	bne.n	800261e <HAL_RCC_OscConfig+0x3d6>
 800260c:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002614:	4a4a      	ldr	r2, [pc, #296]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002616:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800261a:	6053      	str	r3, [r2, #4]
 800261c:	e02e      	b.n	800267c <HAL_RCC_OscConfig+0x434>
 800261e:	4b48      	ldr	r3, [pc, #288]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	069b      	lsls	r3, r3, #26
 800262c:	4944      	ldr	r1, [pc, #272]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
 8002632:	e023      	b.n	800267c <HAL_RCC_OscConfig+0x434>
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	061b      	lsls	r3, r3, #24
 8002642:	493f      	ldr	r1, [pc, #252]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002644:	4313      	orrs	r3, r2
 8002646:	60cb      	str	r3, [r1, #12]
 8002648:	e018      	b.n	800267c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a3c      	ldr	r2, [pc, #240]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7fe fd0f 	bl	8001078 <HAL_GetTick>
 800265a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800265e:	f7fe fd0b 	bl	8001078 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e23d      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002670:	4b33      	ldr	r3, [pc, #204]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f0      	bne.n	800265e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d036      	beq.n	80026f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d019      	beq.n	80026c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002694:	4a2a      	ldr	r2, [pc, #168]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7fe fcec 	bl	8001078 <HAL_GetTick>
 80026a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a4:	f7fe fce8 	bl	8001078 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e21a      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026b6:	4b22      	ldr	r3, [pc, #136]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 80026b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x45c>
 80026c2:	e018      	b.n	80026f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c4:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 80026c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c8:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d0:	f7fe fcd2 	bl	8001078 <HAL_GetTick>
 80026d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d8:	f7fe fcce 	bl	8001078 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e200      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 80026ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d039      	beq.n	8002776 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01c      	beq.n	8002744 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002710:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002714:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002716:	f7fe fcaf 	bl	8001078 <HAL_GetTick>
 800271a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800271e:	f7fe fcab 	bl	8001078 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e1dd      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x4d6>
 800273c:	e01b      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
 800273e:	bf00      	nop
 8002740:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002744:	4b9b      	ldr	r3, [pc, #620]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a9a      	ldr	r2, [pc, #616]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 800274a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800274e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002750:	f7fe fc92 	bl	8001078 <HAL_GetTick>
 8002754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002758:	f7fe fc8e 	bl	8001078 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1c0      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800276a:	4b92      	ldr	r3, [pc, #584]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8081 	beq.w	8002886 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002784:	4b8c      	ldr	r3, [pc, #560]	; (80029b8 <HAL_RCC_OscConfig+0x770>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a8b      	ldr	r2, [pc, #556]	; (80029b8 <HAL_RCC_OscConfig+0x770>)
 800278a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002790:	f7fe fc72 	bl	8001078 <HAL_GetTick>
 8002794:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002798:	f7fe fc6e 	bl	8001078 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	; 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e1a0      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027aa:	4b83      	ldr	r3, [pc, #524]	; (80029b8 <HAL_RCC_OscConfig+0x770>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d106      	bne.n	80027cc <HAL_RCC_OscConfig+0x584>
 80027be:	4b7d      	ldr	r3, [pc, #500]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a7c      	ldr	r2, [pc, #496]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ca:	e02d      	b.n	8002828 <HAL_RCC_OscConfig+0x5e0>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10c      	bne.n	80027ee <HAL_RCC_OscConfig+0x5a6>
 80027d4:	4b77      	ldr	r3, [pc, #476]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a76      	ldr	r2, [pc, #472]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
 80027e0:	4b74      	ldr	r3, [pc, #464]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a73      	ldr	r2, [pc, #460]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 80027e6:	f023 0304 	bic.w	r3, r3, #4
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
 80027ec:	e01c      	b.n	8002828 <HAL_RCC_OscConfig+0x5e0>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x5c8>
 80027f6:	4b6f      	ldr	r3, [pc, #444]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	4a6e      	ldr	r2, [pc, #440]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	6713      	str	r3, [r2, #112]	; 0x70
 8002802:	4b6c      	ldr	r3, [pc, #432]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	4a6b      	ldr	r2, [pc, #428]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6713      	str	r3, [r2, #112]	; 0x70
 800280e:	e00b      	b.n	8002828 <HAL_RCC_OscConfig+0x5e0>
 8002810:	4b68      	ldr	r3, [pc, #416]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	4a67      	ldr	r2, [pc, #412]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002816:	f023 0301 	bic.w	r3, r3, #1
 800281a:	6713      	str	r3, [r2, #112]	; 0x70
 800281c:	4b65      	ldr	r3, [pc, #404]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	4a64      	ldr	r2, [pc, #400]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002822:	f023 0304 	bic.w	r3, r3, #4
 8002826:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d015      	beq.n	800285c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002830:	f7fe fc22 	bl	8001078 <HAL_GetTick>
 8002834:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002836:	e00a      	b.n	800284e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002838:	f7fe fc1e 	bl	8001078 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	; 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e14e      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800284e:	4b59      	ldr	r3, [pc, #356]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0ee      	beq.n	8002838 <HAL_RCC_OscConfig+0x5f0>
 800285a:	e014      	b.n	8002886 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7fe fc0c 	bl	8001078 <HAL_GetTick>
 8002860:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002862:	e00a      	b.n	800287a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002864:	f7fe fc08 	bl	8001078 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e138      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800287a:	4b4e      	ldr	r3, [pc, #312]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1ee      	bne.n	8002864 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 812d 	beq.w	8002aea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002890:	4b48      	ldr	r3, [pc, #288]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002898:	2b18      	cmp	r3, #24
 800289a:	f000 80bd 	beq.w	8002a18 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	f040 809e 	bne.w	80029e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a8:	4b42      	ldr	r3, [pc, #264]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a41      	ldr	r2, [pc, #260]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 80028ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe fbe0 	bl	8001078 <HAL_GetTick>
 80028b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe fbdc 	bl	8001078 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e10e      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028ce:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028da:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 80028dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028de:	4b37      	ldr	r3, [pc, #220]	; (80029bc <HAL_RCC_OscConfig+0x774>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028ea:	0112      	lsls	r2, r2, #4
 80028ec:	430a      	orrs	r2, r1
 80028ee:	4931      	ldr	r1, [pc, #196]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	628b      	str	r3, [r1, #40]	; 0x28
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	3b01      	subs	r3, #1
 80028fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002902:	3b01      	subs	r3, #1
 8002904:	025b      	lsls	r3, r3, #9
 8002906:	b29b      	uxth	r3, r3
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290e:	3b01      	subs	r3, #1
 8002910:	041b      	lsls	r3, r3, #16
 8002912:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291c:	3b01      	subs	r3, #1
 800291e:	061b      	lsls	r3, r3, #24
 8002920:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002924:	4923      	ldr	r1, [pc, #140]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002926:	4313      	orrs	r3, r2
 8002928:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800292a:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	4a21      	ldr	r2, [pc, #132]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002936:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800293a:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <HAL_RCC_OscConfig+0x778>)
 800293c:	4013      	ands	r3, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002942:	00d2      	lsls	r2, r2, #3
 8002944:	491b      	ldr	r1, [pc, #108]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800294a:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	f023 020c 	bic.w	r2, r3, #12
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4917      	ldr	r1, [pc, #92]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002958:	4313      	orrs	r3, r2
 800295a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800295c:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	f023 0202 	bic.w	r2, r3, #2
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002968:	4912      	ldr	r1, [pc, #72]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 800296a:	4313      	orrs	r3, r2
 800296c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	4a0d      	ldr	r2, [pc, #52]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002984:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002990:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <HAL_RCC_OscConfig+0x76c>)
 80029a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7fe fb65 	bl	8001078 <HAL_GetTick>
 80029ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029b0:	e011      	b.n	80029d6 <HAL_RCC_OscConfig+0x78e>
 80029b2:	bf00      	nop
 80029b4:	58024400 	.word	0x58024400
 80029b8:	58024800 	.word	0x58024800
 80029bc:	fffffc0c 	.word	0xfffffc0c
 80029c0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fb58 	bl	8001078 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e08a      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029d6:	4b47      	ldr	r3, [pc, #284]	; (8002af4 <HAL_RCC_OscConfig+0x8ac>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x77c>
 80029e2:	e082      	b.n	8002aea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e4:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <HAL_RCC_OscConfig+0x8ac>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a42      	ldr	r2, [pc, #264]	; (8002af4 <HAL_RCC_OscConfig+0x8ac>)
 80029ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe fb42 	bl	8001078 <HAL_GetTick>
 80029f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f8:	f7fe fb3e 	bl	8001078 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e070      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a0a:	4b3a      	ldr	r3, [pc, #232]	; (8002af4 <HAL_RCC_OscConfig+0x8ac>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x7b0>
 8002a16:	e068      	b.n	8002aea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a18:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <HAL_RCC_OscConfig+0x8ac>)
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a1e:	4b35      	ldr	r3, [pc, #212]	; (8002af4 <HAL_RCC_OscConfig+0x8ac>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d031      	beq.n	8002a90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f003 0203 	and.w	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d12a      	bne.n	8002a90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d122      	bne.n	8002a90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d11a      	bne.n	8002a90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	0a5b      	lsrs	r3, r3, #9
 8002a5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d111      	bne.n	8002a90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	0c1b      	lsrs	r3, r3, #16
 8002a70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d108      	bne.n	8002a90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	0e1b      	lsrs	r3, r3, #24
 8002a82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e02b      	b.n	8002aec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <HAL_RCC_OscConfig+0x8ac>)
 8002a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a98:	08db      	lsrs	r3, r3, #3
 8002a9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d01f      	beq.n	8002aea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_RCC_OscConfig+0x8ac>)
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <HAL_RCC_OscConfig+0x8ac>)
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ab6:	f7fe fadf 	bl	8001078 <HAL_GetTick>
 8002aba:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002abc:	bf00      	nop
 8002abe:	f7fe fadb 	bl	8001078 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d0f9      	beq.n	8002abe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_RCC_OscConfig+0x8ac>)
 8002acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_RCC_OscConfig+0x8b0>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ad6:	00d2      	lsls	r2, r2, #3
 8002ad8:	4906      	ldr	r1, [pc, #24]	; (8002af4 <HAL_RCC_OscConfig+0x8ac>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_OscConfig+0x8ac>)
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <HAL_RCC_OscConfig+0x8ac>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3730      	adds	r7, #48	; 0x30
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	58024400 	.word	0x58024400
 8002af8:	ffff0007 	.word	0xffff0007

08002afc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e19c      	b.n	8002e4a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b10:	4b8a      	ldr	r3, [pc, #552]	; (8002d3c <HAL_RCC_ClockConfig+0x240>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d910      	bls.n	8002b40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b87      	ldr	r3, [pc, #540]	; (8002d3c <HAL_RCC_ClockConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 020f 	bic.w	r2, r3, #15
 8002b26:	4985      	ldr	r1, [pc, #532]	; (8002d3c <HAL_RCC_ClockConfig+0x240>)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b83      	ldr	r3, [pc, #524]	; (8002d3c <HAL_RCC_ClockConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e184      	b.n	8002e4a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d010      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	4b7b      	ldr	r3, [pc, #492]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d908      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b5c:	4b78      	ldr	r3, [pc, #480]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	4975      	ldr	r1, [pc, #468]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d010      	beq.n	8002b9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	4b70      	ldr	r3, [pc, #448]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d908      	bls.n	8002b9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b8a:	4b6d      	ldr	r3, [pc, #436]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	496a      	ldr	r1, [pc, #424]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d010      	beq.n	8002bca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699a      	ldr	r2, [r3, #24]
 8002bac:	4b64      	ldr	r3, [pc, #400]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d908      	bls.n	8002bca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bb8:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	495e      	ldr	r1, [pc, #376]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d010      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69da      	ldr	r2, [r3, #28]
 8002bda:	4b59      	ldr	r3, [pc, #356]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d908      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002be6:	4b56      	ldr	r3, [pc, #344]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	4953      	ldr	r1, [pc, #332]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d010      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	4b4d      	ldr	r3, [pc, #308]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d908      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c14:	4b4a      	ldr	r3, [pc, #296]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f023 020f 	bic.w	r2, r3, #15
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4947      	ldr	r1, [pc, #284]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d055      	beq.n	8002cde <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c32:	4b43      	ldr	r3, [pc, #268]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	4940      	ldr	r1, [pc, #256]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d107      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c4c:	4b3c      	ldr	r3, [pc, #240]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d121      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0f6      	b.n	8002e4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c64:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d115      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0ea      	b.n	8002e4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d107      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c7c:	4b30      	ldr	r3, [pc, #192]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0de      	b.n	8002e4a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c8c:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0d6      	b.n	8002e4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c9c:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f023 0207 	bic.w	r2, r3, #7
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4925      	ldr	r1, [pc, #148]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cae:	f7fe f9e3 	bl	8001078 <HAL_GetTick>
 8002cb2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb6:	f7fe f9df 	bl	8001078 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e0be      	b.n	8002e4a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d1eb      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d010      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d208      	bcs.n	8002d0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cfa:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f023 020f 	bic.w	r2, r3, #15
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	490e      	ldr	r1, [pc, #56]	; (8002d40 <HAL_RCC_ClockConfig+0x244>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_RCC_ClockConfig+0x240>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d214      	bcs.n	8002d44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <HAL_RCC_ClockConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 020f 	bic.w	r2, r3, #15
 8002d22:	4906      	ldr	r1, [pc, #24]	; (8002d3c <HAL_RCC_ClockConfig+0x240>)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <HAL_RCC_ClockConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e086      	b.n	8002e4a <HAL_RCC_ClockConfig+0x34e>
 8002d3c:	52002000 	.word	0x52002000
 8002d40:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d010      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	4b3f      	ldr	r3, [pc, #252]	; (8002e54 <HAL_RCC_ClockConfig+0x358>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d208      	bcs.n	8002d72 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d60:	4b3c      	ldr	r3, [pc, #240]	; (8002e54 <HAL_RCC_ClockConfig+0x358>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	4939      	ldr	r1, [pc, #228]	; (8002e54 <HAL_RCC_ClockConfig+0x358>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <HAL_RCC_ClockConfig+0x358>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d208      	bcs.n	8002da0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d8e:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <HAL_RCC_ClockConfig+0x358>)
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	492e      	ldr	r1, [pc, #184]	; (8002e54 <HAL_RCC_ClockConfig+0x358>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d010      	beq.n	8002dce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699a      	ldr	r2, [r3, #24]
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <HAL_RCC_ClockConfig+0x358>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d208      	bcs.n	8002dce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dbc:	4b25      	ldr	r3, [pc, #148]	; (8002e54 <HAL_RCC_ClockConfig+0x358>)
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	4922      	ldr	r1, [pc, #136]	; (8002e54 <HAL_RCC_ClockConfig+0x358>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d010      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <HAL_RCC_ClockConfig+0x358>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d208      	bcs.n	8002dfc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dea:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <HAL_RCC_ClockConfig+0x358>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	4917      	ldr	r1, [pc, #92]	; (8002e54 <HAL_RCC_ClockConfig+0x358>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dfc:	f000 f834 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <HAL_RCC_ClockConfig+0x358>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	0a1b      	lsrs	r3, r3, #8
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	4912      	ldr	r1, [pc, #72]	; (8002e58 <HAL_RCC_ClockConfig+0x35c>)
 8002e0e:	5ccb      	ldrb	r3, [r1, r3]
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
 8002e18:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <HAL_RCC_ClockConfig+0x358>)
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	4a0d      	ldr	r2, [pc, #52]	; (8002e58 <HAL_RCC_ClockConfig+0x35c>)
 8002e24:	5cd3      	ldrb	r3, [r2, r3]
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e30:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <HAL_RCC_ClockConfig+0x360>)
 8002e32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e34:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <HAL_RCC_ClockConfig+0x364>)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_RCC_ClockConfig+0x368>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe f8d0 	bl	8000fe4 <HAL_InitTick>
 8002e44:	4603      	mov	r3, r0
 8002e46:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	58024400 	.word	0x58024400
 8002e58:	0800669c 	.word	0x0800669c
 8002e5c:	24000004 	.word	0x24000004
 8002e60:	24000000 	.word	0x24000000
 8002e64:	24000008 	.word	0x24000008

08002e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e6e:	4bb3      	ldr	r3, [pc, #716]	; (800313c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e76:	2b18      	cmp	r3, #24
 8002e78:	f200 8155 	bhi.w	8003126 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002ee9 	.word	0x08002ee9
 8002e88:	08003127 	.word	0x08003127
 8002e8c:	08003127 	.word	0x08003127
 8002e90:	08003127 	.word	0x08003127
 8002e94:	08003127 	.word	0x08003127
 8002e98:	08003127 	.word	0x08003127
 8002e9c:	08003127 	.word	0x08003127
 8002ea0:	08003127 	.word	0x08003127
 8002ea4:	08002f0f 	.word	0x08002f0f
 8002ea8:	08003127 	.word	0x08003127
 8002eac:	08003127 	.word	0x08003127
 8002eb0:	08003127 	.word	0x08003127
 8002eb4:	08003127 	.word	0x08003127
 8002eb8:	08003127 	.word	0x08003127
 8002ebc:	08003127 	.word	0x08003127
 8002ec0:	08003127 	.word	0x08003127
 8002ec4:	08002f15 	.word	0x08002f15
 8002ec8:	08003127 	.word	0x08003127
 8002ecc:	08003127 	.word	0x08003127
 8002ed0:	08003127 	.word	0x08003127
 8002ed4:	08003127 	.word	0x08003127
 8002ed8:	08003127 	.word	0x08003127
 8002edc:	08003127 	.word	0x08003127
 8002ee0:	08003127 	.word	0x08003127
 8002ee4:	08002f1b 	.word	0x08002f1b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ee8:	4b94      	ldr	r3, [pc, #592]	; (800313c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d009      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ef4:	4b91      	ldr	r3, [pc, #580]	; (800313c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	08db      	lsrs	r3, r3, #3
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	4a90      	ldr	r2, [pc, #576]	; (8003140 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
 8002f04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f06:	e111      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f08:	4b8d      	ldr	r3, [pc, #564]	; (8003140 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f0a:	61bb      	str	r3, [r7, #24]
      break;
 8002f0c:	e10e      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f0e:	4b8d      	ldr	r3, [pc, #564]	; (8003144 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f10:	61bb      	str	r3, [r7, #24]
      break;
 8002f12:	e10b      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f14:	4b8c      	ldr	r3, [pc, #560]	; (8003148 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f16:	61bb      	str	r3, [r7, #24]
      break;
 8002f18:	e108      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f1a:	4b88      	ldr	r3, [pc, #544]	; (800313c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f24:	4b85      	ldr	r3, [pc, #532]	; (800313c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f2e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f30:	4b82      	ldr	r3, [pc, #520]	; (800313c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f3a:	4b80      	ldr	r3, [pc, #512]	; (800313c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3e:	08db      	lsrs	r3, r3, #3
 8002f40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f52:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80e1 	beq.w	8003120 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	f000 8083 	beq.w	800306c <HAL_RCC_GetSysClockFreq+0x204>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	f200 80a1 	bhi.w	80030b0 <HAL_RCC_GetSysClockFreq+0x248>
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x114>
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d056      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f7a:	e099      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f7c:	4b6f      	ldr	r3, [pc, #444]	; (800313c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d02d      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f88:	4b6c      	ldr	r3, [pc, #432]	; (800313c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	08db      	lsrs	r3, r3, #3
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	4a6b      	ldr	r2, [pc, #428]	; (8003140 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
 8002f98:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	ee07 3a90 	vmov	s15, r3
 8002fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	ee07 3a90 	vmov	s15, r3
 8002faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fb2:	4b62      	ldr	r3, [pc, #392]	; (800313c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fc6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800314c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fde:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002fe2:	e087      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	ee07 3a90 	vmov	s15, r3
 8002fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003150 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ff6:	4b51      	ldr	r3, [pc, #324]	; (800313c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003006:	ed97 6a02 	vldr	s12, [r7, #8]
 800300a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800314c <HAL_RCC_GetSysClockFreq+0x2e4>
 800300e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800301a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800301e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003022:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003026:	e065      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003032:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003154 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800303a:	4b40      	ldr	r3, [pc, #256]	; (800313c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800304a:	ed97 6a02 	vldr	s12, [r7, #8]
 800304e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800314c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800305a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800305e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003066:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800306a:	e043      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003076:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003158 <HAL_RCC_GetSysClockFreq+0x2f0>
 800307a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800307e:	4b2f      	ldr	r3, [pc, #188]	; (800313c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003086:	ee07 3a90 	vmov	s15, r3
 800308a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800308e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003092:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800314c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800309a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800309e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030ae:	e021      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003154 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030c2:	4b1e      	ldr	r3, [pc, #120]	; (800313c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800314c <HAL_RCC_GetSysClockFreq+0x2e4>
 80030da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	0a5b      	lsrs	r3, r3, #9
 80030fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030fe:	3301      	adds	r3, #1
 8003100:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	ee07 3a90 	vmov	s15, r3
 8003108:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800310c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003118:	ee17 3a90 	vmov	r3, s15
 800311c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800311e:	e005      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	61bb      	str	r3, [r7, #24]
      break;
 8003124:	e002      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003126:	4b07      	ldr	r3, [pc, #28]	; (8003144 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003128:	61bb      	str	r3, [r7, #24]
      break;
 800312a:	bf00      	nop
  }

  return sysclockfreq;
 800312c:	69bb      	ldr	r3, [r7, #24]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3724      	adds	r7, #36	; 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	58024400 	.word	0x58024400
 8003140:	03d09000 	.word	0x03d09000
 8003144:	003d0900 	.word	0x003d0900
 8003148:	007a1200 	.word	0x007a1200
 800314c:	46000000 	.word	0x46000000
 8003150:	4c742400 	.word	0x4c742400
 8003154:	4a742400 	.word	0x4a742400
 8003158:	4af42400 	.word	0x4af42400

0800315c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003162:	f7ff fe81 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8003166:	4602      	mov	r2, r0
 8003168:	4b10      	ldr	r3, [pc, #64]	; (80031ac <HAL_RCC_GetHCLKFreq+0x50>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	490f      	ldr	r1, [pc, #60]	; (80031b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003174:	5ccb      	ldrb	r3, [r1, r3]
 8003176:	f003 031f 	and.w	r3, r3, #31
 800317a:	fa22 f303 	lsr.w	r3, r2, r3
 800317e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_RCC_GetHCLKFreq+0x50>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	4a09      	ldr	r2, [pc, #36]	; (80031b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800318a:	5cd3      	ldrb	r3, [r2, r3]
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	fa22 f303 	lsr.w	r3, r2, r3
 8003196:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003198:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800319a:	4a07      	ldr	r2, [pc, #28]	; (80031b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80031a0:	4b04      	ldr	r3, [pc, #16]	; (80031b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	58024400 	.word	0x58024400
 80031b0:	0800669c 	.word	0x0800669c
 80031b4:	24000004 	.word	0x24000004
 80031b8:	24000000 	.word	0x24000000

080031bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80031c0:	f7ff ffcc 	bl	800315c <HAL_RCC_GetHCLKFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4904      	ldr	r1, [pc, #16]	; (80031e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	58024400 	.word	0x58024400
 80031e4:	0800669c 	.word	0x0800669c

080031e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80031ec:	f7ff ffb6 	bl	800315c <HAL_RCC_GetHCLKFreq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	4904      	ldr	r1, [pc, #16]	; (8003210 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031fe:	5ccb      	ldrb	r3, [r1, r3]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	58024400 	.word	0x58024400
 8003210:	0800669c 	.word	0x0800669c

08003214 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003218:	b0ca      	sub	sp, #296	; 0x128
 800321a:	af00      	add	r7, sp, #0
 800321c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003220:	2300      	movs	r3, #0
 8003222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003226:	2300      	movs	r3, #0
 8003228:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800322c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003234:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003238:	2500      	movs	r5, #0
 800323a:	ea54 0305 	orrs.w	r3, r4, r5
 800323e:	d049      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003246:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800324a:	d02f      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800324c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003250:	d828      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003256:	d01a      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003258:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800325c:	d822      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003266:	d007      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003268:	e01c      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800326a:	4bb8      	ldr	r3, [pc, #736]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	4ab7      	ldr	r2, [pc, #732]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003274:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003276:	e01a      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800327c:	3308      	adds	r3, #8
 800327e:	2102      	movs	r1, #2
 8003280:	4618      	mov	r0, r3
 8003282:	f001 fc8f 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003286:	4603      	mov	r3, r0
 8003288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800328c:	e00f      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003292:	3328      	adds	r3, #40	; 0x28
 8003294:	2102      	movs	r1, #2
 8003296:	4618      	mov	r0, r3
 8003298:	f001 fd36 	bl	8004d08 <RCCEx_PLL3_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032a2:	e004      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032aa:	e000      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80032ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032b6:	4ba5      	ldr	r3, [pc, #660]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80032be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032c4:	4aa1      	ldr	r2, [pc, #644]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032c6:	430b      	orrs	r3, r1
 80032c8:	6513      	str	r3, [r2, #80]	; 0x50
 80032ca:	e003      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80032e0:	f04f 0900 	mov.w	r9, #0
 80032e4:	ea58 0309 	orrs.w	r3, r8, r9
 80032e8:	d047      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80032ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d82a      	bhi.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80032f4:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	08003311 	.word	0x08003311
 8003300:	0800331f 	.word	0x0800331f
 8003304:	08003335 	.word	0x08003335
 8003308:	08003353 	.word	0x08003353
 800330c:	08003353 	.word	0x08003353
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003310:	4b8e      	ldr	r3, [pc, #568]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	4a8d      	ldr	r2, [pc, #564]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800331c:	e01a      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800331e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003322:	3308      	adds	r3, #8
 8003324:	2100      	movs	r1, #0
 8003326:	4618      	mov	r0, r3
 8003328:	f001 fc3c 	bl	8004ba4 <RCCEx_PLL2_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003332:	e00f      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003338:	3328      	adds	r3, #40	; 0x28
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f001 fce3 	bl	8004d08 <RCCEx_PLL3_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003348:	e004      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003350:	e000      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800335c:	4b7b      	ldr	r3, [pc, #492]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800335e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003360:	f023 0107 	bic.w	r1, r3, #7
 8003364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	4a78      	ldr	r2, [pc, #480]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800336c:	430b      	orrs	r3, r1
 800336e:	6513      	str	r3, [r2, #80]	; 0x50
 8003370:	e003      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003376:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800337a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003386:	f04f 0b00 	mov.w	fp, #0
 800338a:	ea5a 030b 	orrs.w	r3, sl, fp
 800338e:	d04c      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800339a:	d030      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800339c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a0:	d829      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033a2:	2bc0      	cmp	r3, #192	; 0xc0
 80033a4:	d02d      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80033a6:	2bc0      	cmp	r3, #192	; 0xc0
 80033a8:	d825      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033aa:	2b80      	cmp	r3, #128	; 0x80
 80033ac:	d018      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033ae:	2b80      	cmp	r3, #128	; 0x80
 80033b0:	d821      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	d007      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80033ba:	e01c      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033bc:	4b63      	ldr	r3, [pc, #396]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	4a62      	ldr	r2, [pc, #392]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033c8:	e01c      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ce:	3308      	adds	r3, #8
 80033d0:	2100      	movs	r1, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f001 fbe6 	bl	8004ba4 <RCCEx_PLL2_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033de:	e011      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e4:	3328      	adds	r3, #40	; 0x28
 80033e6:	2100      	movs	r1, #0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 fc8d 	bl	8004d08 <RCCEx_PLL3_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033f4:	e006      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033fc:	e002      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033fe:	bf00      	nop
 8003400:	e000      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003404:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800340c:	4b4f      	ldr	r3, [pc, #316]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800340e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003410:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	4a4c      	ldr	r2, [pc, #304]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800341c:	430b      	orrs	r3, r1
 800341e:	6513      	str	r3, [r2, #80]	; 0x50
 8003420:	e003      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800342a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003436:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003440:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003444:	460b      	mov	r3, r1
 8003446:	4313      	orrs	r3, r2
 8003448:	d053      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800344a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800344e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003452:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003456:	d035      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003458:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800345c:	d82e      	bhi.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800345e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003462:	d031      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003464:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003468:	d828      	bhi.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800346a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346e:	d01a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003474:	d822      	bhi.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800347a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800347e:	d007      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003480:	e01c      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003482:	4b32      	ldr	r3, [pc, #200]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	4a31      	ldr	r2, [pc, #196]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800348e:	e01c      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003494:	3308      	adds	r3, #8
 8003496:	2100      	movs	r1, #0
 8003498:	4618      	mov	r0, r3
 800349a:	f001 fb83 	bl	8004ba4 <RCCEx_PLL2_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034a4:	e011      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034aa:	3328      	adds	r3, #40	; 0x28
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 fc2a 	bl	8004d08 <RCCEx_PLL3_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034ba:	e006      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034c2:	e002      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034c4:	bf00      	nop
 80034c6:	e000      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034d2:	4b1e      	ldr	r3, [pc, #120]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80034da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034e2:	4a1a      	ldr	r2, [pc, #104]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e4:	430b      	orrs	r3, r1
 80034e6:	6593      	str	r3, [r2, #88]	; 0x58
 80034e8:	e003      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80034fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003508:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800350c:	460b      	mov	r3, r1
 800350e:	4313      	orrs	r3, r2
 8003510:	d056      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800351a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800351e:	d038      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003524:	d831      	bhi.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003526:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800352a:	d034      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800352c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003530:	d82b      	bhi.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003536:	d01d      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003538:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800353c:	d825      	bhi.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d006      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003542:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003546:	d00a      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003548:	e01f      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800354a:	bf00      	nop
 800354c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003550:	4ba2      	ldr	r3, [pc, #648]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	4aa1      	ldr	r2, [pc, #644]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800355c:	e01c      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800355e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003562:	3308      	adds	r3, #8
 8003564:	2100      	movs	r1, #0
 8003566:	4618      	mov	r0, r3
 8003568:	f001 fb1c 	bl	8004ba4 <RCCEx_PLL2_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003572:	e011      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003578:	3328      	adds	r3, #40	; 0x28
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f001 fbc3 	bl	8004d08 <RCCEx_PLL3_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003588:	e006      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003590:	e002      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003598:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10b      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80035a0:	4b8e      	ldr	r3, [pc, #568]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80035a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035b0:	4a8a      	ldr	r2, [pc, #552]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035b2:	430b      	orrs	r3, r1
 80035b4:	6593      	str	r3, [r2, #88]	; 0x58
 80035b6:	e003      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80035cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80035d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80035da:	460b      	mov	r3, r1
 80035dc:	4313      	orrs	r3, r2
 80035de:	d03a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80035e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e6:	2b30      	cmp	r3, #48	; 0x30
 80035e8:	d01f      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80035ea:	2b30      	cmp	r3, #48	; 0x30
 80035ec:	d819      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d00c      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d815      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d019      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d111      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035fe:	4b77      	ldr	r3, [pc, #476]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	4a76      	ldr	r2, [pc, #472]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003608:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800360a:	e011      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003610:	3308      	adds	r3, #8
 8003612:	2102      	movs	r1, #2
 8003614:	4618      	mov	r0, r3
 8003616:	f001 fac5 	bl	8004ba4 <RCCEx_PLL2_Config>
 800361a:	4603      	mov	r3, r0
 800361c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003620:	e006      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003628:	e002      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800362a:	bf00      	nop
 800362c:	e000      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800362e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003638:	4b68      	ldr	r3, [pc, #416]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800363a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003646:	4a65      	ldr	r2, [pc, #404]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003648:	430b      	orrs	r3, r1
 800364a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800364c:	e003      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003662:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003666:	2300      	movs	r3, #0
 8003668:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800366c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003670:	460b      	mov	r3, r1
 8003672:	4313      	orrs	r3, r2
 8003674:	d051      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800367a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003680:	d035      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003686:	d82e      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003688:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800368c:	d031      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800368e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003692:	d828      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003698:	d01a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800369a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369e:	d822      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x498>
 80036a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a8:	d007      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80036aa:	e01c      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ac:	4b4b      	ldr	r3, [pc, #300]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	4a4a      	ldr	r2, [pc, #296]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036b8:	e01c      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036be:	3308      	adds	r3, #8
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 fa6e 	bl	8004ba4 <RCCEx_PLL2_Config>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036ce:	e011      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d4:	3328      	adds	r3, #40	; 0x28
 80036d6:	2100      	movs	r1, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 fb15 	bl	8004d08 <RCCEx_PLL3_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036e4:	e006      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036ec:	e002      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036fc:	4b37      	ldr	r3, [pc, #220]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003700:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370a:	4a34      	ldr	r2, [pc, #208]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800370c:	430b      	orrs	r3, r1
 800370e:	6513      	str	r3, [r2, #80]	; 0x50
 8003710:	e003      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003716:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800371a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003726:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800372a:	2300      	movs	r3, #0
 800372c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003730:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003734:	460b      	mov	r3, r1
 8003736:	4313      	orrs	r3, r2
 8003738:	d056      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003744:	d033      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003746:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800374a:	d82c      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800374c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003750:	d02f      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003752:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003756:	d826      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003758:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800375c:	d02b      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800375e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003762:	d820      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003768:	d012      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800376a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800376e:	d81a      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d022      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003778:	d115      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800377a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800377e:	3308      	adds	r3, #8
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f001 fa0e 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800378e:	e015      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003794:	3328      	adds	r3, #40	; 0x28
 8003796:	2101      	movs	r1, #1
 8003798:	4618      	mov	r0, r3
 800379a:	f001 fab5 	bl	8004d08 <RCCEx_PLL3_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037a4:	e00a      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037ac:	e006      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037ae:	bf00      	nop
 80037b0:	e004      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037b2:	bf00      	nop
 80037b4:	e002      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10d      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80037cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d2:	4a02      	ldr	r2, [pc, #8]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6513      	str	r3, [r2, #80]	; 0x50
 80037d8:	e006      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80037da:	bf00      	nop
 80037dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80037f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037fe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003802:	460b      	mov	r3, r1
 8003804:	4313      	orrs	r3, r2
 8003806:	d055      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800380c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003814:	d033      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800381a:	d82c      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800381c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003820:	d02f      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003826:	d826      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003828:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800382c:	d02b      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800382e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003832:	d820      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003838:	d012      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800383a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800383e:	d81a      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d022      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003848:	d115      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384e:	3308      	adds	r3, #8
 8003850:	2101      	movs	r1, #1
 8003852:	4618      	mov	r0, r3
 8003854:	f001 f9a6 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800385e:	e015      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003864:	3328      	adds	r3, #40	; 0x28
 8003866:	2101      	movs	r1, #1
 8003868:	4618      	mov	r0, r3
 800386a:	f001 fa4d 	bl	8004d08 <RCCEx_PLL3_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003874:	e00a      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800387c:	e006      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800387e:	bf00      	nop
 8003880:	e004      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003882:	bf00      	nop
 8003884:	e002      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003886:	bf00      	nop
 8003888:	e000      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800388a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800388c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10b      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003894:	4ba3      	ldr	r3, [pc, #652]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038a4:	4a9f      	ldr	r2, [pc, #636]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038a6:	430b      	orrs	r3, r1
 80038a8:	6593      	str	r3, [r2, #88]	; 0x58
 80038aa:	e003      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80038c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038c4:	2300      	movs	r3, #0
 80038c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80038ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038ce:	460b      	mov	r3, r1
 80038d0:	4313      	orrs	r3, r2
 80038d2:	d037      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80038d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038de:	d00e      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80038e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e4:	d816      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d018      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80038ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ee:	d111      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f0:	4b8c      	ldr	r3, [pc, #560]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	4a8b      	ldr	r2, [pc, #556]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038fc:	e00f      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003902:	3308      	adds	r3, #8
 8003904:	2101      	movs	r1, #1
 8003906:	4618      	mov	r0, r3
 8003908:	f001 f94c 	bl	8004ba4 <RCCEx_PLL2_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003912:	e004      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800391a:	e000      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800391c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003926:	4b7f      	ldr	r3, [pc, #508]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	4a7b      	ldr	r2, [pc, #492]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003936:	430b      	orrs	r3, r1
 8003938:	6513      	str	r3, [r2, #80]	; 0x50
 800393a:	e003      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003940:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003954:	2300      	movs	r3, #0
 8003956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800395a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800395e:	460b      	mov	r3, r1
 8003960:	4313      	orrs	r3, r2
 8003962:	d039      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396a:	2b03      	cmp	r3, #3
 800396c:	d81c      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800396e:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003974:	080039b1 	.word	0x080039b1
 8003978:	08003985 	.word	0x08003985
 800397c:	08003993 	.word	0x08003993
 8003980:	080039b1 	.word	0x080039b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003984:	4b67      	ldr	r3, [pc, #412]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	4a66      	ldr	r2, [pc, #408]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800398a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800398e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003990:	e00f      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003996:	3308      	adds	r3, #8
 8003998:	2102      	movs	r1, #2
 800399a:	4618      	mov	r0, r3
 800399c:	f001 f902 	bl	8004ba4 <RCCEx_PLL2_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039a6:	e004      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039ae:	e000      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80039b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039ba:	4b5a      	ldr	r3, [pc, #360]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039be:	f023 0103 	bic.w	r1, r3, #3
 80039c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c8:	4a56      	ldr	r2, [pc, #344]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ca:	430b      	orrs	r3, r1
 80039cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ce:	e003      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80039e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80039f2:	460b      	mov	r3, r1
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f000 809f 	beq.w	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039fa:	4b4b      	ldr	r3, [pc, #300]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a4a      	ldr	r2, [pc, #296]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a06:	f7fd fb37 	bl	8001078 <HAL_GetTick>
 8003a0a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a10:	f7fd fb32 	bl	8001078 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b64      	cmp	r3, #100	; 0x64
 8003a1e:	d903      	bls.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a26:	e005      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a28:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0ed      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003a34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d179      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a3c:	4b39      	ldr	r3, [pc, #228]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a48:	4053      	eors	r3, r2
 8003a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d015      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a52:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a5e:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	4a30      	ldr	r2, [pc, #192]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a68:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a6a:	4b2e      	ldr	r3, [pc, #184]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6e:	4a2d      	ldr	r2, [pc, #180]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a74:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a76:	4a2b      	ldr	r2, [pc, #172]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a7c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a8a:	d118      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fd faf4 	bl	8001078 <HAL_GetTick>
 8003a90:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a94:	e00d      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7fd faef 	bl	8001078 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003aa0:	1ad2      	subs	r2, r2, r3
 8003aa2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d903      	bls.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003ab0:	e005      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0eb      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d129      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ad6:	d10e      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ad8:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ae8:	091a      	lsrs	r2, r3, #4
 8003aea:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6113      	str	r3, [r2, #16]
 8003af4:	e005      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003af6:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003afc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b00:	6113      	str	r3, [r2, #16]
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b04:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b12:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6713      	str	r3, [r2, #112]	; 0x70
 8003b18:	e00e      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003b22:	e009      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b24:	58024400 	.word	0x58024400
 8003b28:	58024800 	.word	0x58024800
 8003b2c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f002 0301 	and.w	r3, r2, #1
 8003b44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f000 8089 	beq.w	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b60:	2b28      	cmp	r3, #40	; 0x28
 8003b62:	d86b      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b64:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003c45 	.word	0x08003c45
 8003b70:	08003c3d 	.word	0x08003c3d
 8003b74:	08003c3d 	.word	0x08003c3d
 8003b78:	08003c3d 	.word	0x08003c3d
 8003b7c:	08003c3d 	.word	0x08003c3d
 8003b80:	08003c3d 	.word	0x08003c3d
 8003b84:	08003c3d 	.word	0x08003c3d
 8003b88:	08003c3d 	.word	0x08003c3d
 8003b8c:	08003c11 	.word	0x08003c11
 8003b90:	08003c3d 	.word	0x08003c3d
 8003b94:	08003c3d 	.word	0x08003c3d
 8003b98:	08003c3d 	.word	0x08003c3d
 8003b9c:	08003c3d 	.word	0x08003c3d
 8003ba0:	08003c3d 	.word	0x08003c3d
 8003ba4:	08003c3d 	.word	0x08003c3d
 8003ba8:	08003c3d 	.word	0x08003c3d
 8003bac:	08003c27 	.word	0x08003c27
 8003bb0:	08003c3d 	.word	0x08003c3d
 8003bb4:	08003c3d 	.word	0x08003c3d
 8003bb8:	08003c3d 	.word	0x08003c3d
 8003bbc:	08003c3d 	.word	0x08003c3d
 8003bc0:	08003c3d 	.word	0x08003c3d
 8003bc4:	08003c3d 	.word	0x08003c3d
 8003bc8:	08003c3d 	.word	0x08003c3d
 8003bcc:	08003c45 	.word	0x08003c45
 8003bd0:	08003c3d 	.word	0x08003c3d
 8003bd4:	08003c3d 	.word	0x08003c3d
 8003bd8:	08003c3d 	.word	0x08003c3d
 8003bdc:	08003c3d 	.word	0x08003c3d
 8003be0:	08003c3d 	.word	0x08003c3d
 8003be4:	08003c3d 	.word	0x08003c3d
 8003be8:	08003c3d 	.word	0x08003c3d
 8003bec:	08003c45 	.word	0x08003c45
 8003bf0:	08003c3d 	.word	0x08003c3d
 8003bf4:	08003c3d 	.word	0x08003c3d
 8003bf8:	08003c3d 	.word	0x08003c3d
 8003bfc:	08003c3d 	.word	0x08003c3d
 8003c00:	08003c3d 	.word	0x08003c3d
 8003c04:	08003c3d 	.word	0x08003c3d
 8003c08:	08003c3d 	.word	0x08003c3d
 8003c0c:	08003c45 	.word	0x08003c45
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c14:	3308      	adds	r3, #8
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 ffc3 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c24:	e00f      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2a:	3328      	adds	r3, #40	; 0x28
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 f86a 	bl	8004d08 <RCCEx_PLL3_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c3a:	e004      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c42:	e000      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c4e:	4bbf      	ldr	r3, [pc, #764]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c5c:	4abb      	ldr	r2, [pc, #748]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c5e:	430b      	orrs	r3, r1
 8003c60:	6553      	str	r3, [r2, #84]	; 0x54
 8003c62:	e003      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f002 0302 	and.w	r3, r2, #2
 8003c78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003c82:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003c86:	460b      	mov	r3, r1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	d041      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c92:	2b05      	cmp	r3, #5
 8003c94:	d824      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003c96:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003ce9 	.word	0x08003ce9
 8003ca0:	08003cb5 	.word	0x08003cb5
 8003ca4:	08003ccb 	.word	0x08003ccb
 8003ca8:	08003ce9 	.word	0x08003ce9
 8003cac:	08003ce9 	.word	0x08003ce9
 8003cb0:	08003ce9 	.word	0x08003ce9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb8:	3308      	adds	r3, #8
 8003cba:	2101      	movs	r1, #1
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 ff71 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cc8:	e00f      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cce:	3328      	adds	r3, #40	; 0x28
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 f818 	bl	8004d08 <RCCEx_PLL3_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cde:	e004      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ce6:	e000      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cf2:	4b96      	ldr	r3, [pc, #600]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf6:	f023 0107 	bic.w	r1, r3, #7
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d00:	4a92      	ldr	r2, [pc, #584]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d02:	430b      	orrs	r3, r1
 8003d04:	6553      	str	r3, [r2, #84]	; 0x54
 8003d06:	e003      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f002 0304 	and.w	r3, r2, #4
 8003d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d26:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	d044      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d38:	2b05      	cmp	r3, #5
 8003d3a:	d825      	bhi.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003d3c:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d91 	.word	0x08003d91
 8003d48:	08003d5d 	.word	0x08003d5d
 8003d4c:	08003d73 	.word	0x08003d73
 8003d50:	08003d91 	.word	0x08003d91
 8003d54:	08003d91 	.word	0x08003d91
 8003d58:	08003d91 	.word	0x08003d91
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d60:	3308      	adds	r3, #8
 8003d62:	2101      	movs	r1, #1
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 ff1d 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d70:	e00f      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d76:	3328      	adds	r3, #40	; 0x28
 8003d78:	2101      	movs	r1, #1
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 ffc4 	bl	8004d08 <RCCEx_PLL3_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d86:	e004      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d8e:	e000      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10b      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d9a:	4b6c      	ldr	r3, [pc, #432]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	f023 0107 	bic.w	r1, r3, #7
 8003da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003daa:	4a68      	ldr	r2, [pc, #416]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dac:	430b      	orrs	r3, r1
 8003dae:	6593      	str	r3, [r2, #88]	; 0x58
 8003db0:	e003      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003db6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	f002 0320 	and.w	r3, r2, #32
 8003dc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	d055      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003de6:	d033      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dec:	d82c      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df2:	d02f      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df8:	d826      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dfe:	d02b      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003e00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e04:	d820      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e0a:	d012      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e10:	d81a      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d022      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003e16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e1a:	d115      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e20:	3308      	adds	r3, #8
 8003e22:	2100      	movs	r1, #0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 febd 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e30:	e015      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e36:	3328      	adds	r3, #40	; 0x28
 8003e38:	2102      	movs	r1, #2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 ff64 	bl	8004d08 <RCCEx_PLL3_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e46:	e00a      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e4e:	e006      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e50:	bf00      	nop
 8003e52:	e004      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e54:	bf00      	nop
 8003e56:	e002      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e58:	bf00      	nop
 8003e5a:	e000      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e66:	4b39      	ldr	r3, [pc, #228]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	4a35      	ldr	r2, [pc, #212]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	6553      	str	r3, [r2, #84]	; 0x54
 8003e7c:	e003      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003e92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e96:	2300      	movs	r3, #0
 8003e98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003e9c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	d058      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003eb2:	d033      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003eb4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003eb8:	d82c      	bhi.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebe:	d02f      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec4:	d826      	bhi.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ec6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eca:	d02b      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003ecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ed0:	d820      	bhi.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed6:	d012      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003edc:	d81a      	bhi.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d022      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee6:	d115      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eec:	3308      	adds	r3, #8
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fe57 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003efc:	e015      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f02:	3328      	adds	r3, #40	; 0x28
 8003f04:	2102      	movs	r1, #2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fefe 	bl	8004d08 <RCCEx_PLL3_Config>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f12:	e00a      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f1a:	e006      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f1c:	bf00      	nop
 8003f1e:	e004      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f20:	bf00      	nop
 8003f22:	e002      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f24:	bf00      	nop
 8003f26:	e000      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10e      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f42:	4a02      	ldr	r2, [pc, #8]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6593      	str	r3, [r2, #88]	; 0x58
 8003f48:	e006      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003f4a:	bf00      	nop
 8003f4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f6e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003f72:	460b      	mov	r3, r1
 8003f74:	4313      	orrs	r3, r2
 8003f76:	d055      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f84:	d033      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003f86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f8a:	d82c      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f90:	d02f      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f96:	d826      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f98:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f9c:	d02b      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003f9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fa2:	d820      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa8:	d012      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fae:	d81a      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d022      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb8:	d115      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fdee 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fce:	e015      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd4:	3328      	adds	r3, #40	; 0x28
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fe95 	bl	8004d08 <RCCEx_PLL3_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fe4:	e00a      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fec:	e006      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fee:	bf00      	nop
 8003ff0:	e004      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ff2:	bf00      	nop
 8003ff4:	e002      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ff6:	bf00      	nop
 8003ff8:	e000      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10b      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004004:	4ba1      	ldr	r3, [pc, #644]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004008:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004010:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004014:	4a9d      	ldr	r2, [pc, #628]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004016:	430b      	orrs	r3, r1
 8004018:	6593      	str	r3, [r2, #88]	; 0x58
 800401a:	e003      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004020:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402c:	f002 0308 	and.w	r3, r2, #8
 8004030:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004034:	2300      	movs	r3, #0
 8004036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800403a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800403e:	460b      	mov	r3, r1
 8004040:	4313      	orrs	r3, r2
 8004042:	d01e      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800404c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004050:	d10c      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004056:	3328      	adds	r3, #40	; 0x28
 8004058:	2102      	movs	r1, #2
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fe54 	bl	8004d08 <RCCEx_PLL3_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800406c:	4b87      	ldr	r3, [pc, #540]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800407c:	4a83      	ldr	r2, [pc, #524]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800407e:	430b      	orrs	r3, r1
 8004080:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	f002 0310 	and.w	r3, r2, #16
 800408e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004092:	2300      	movs	r3, #0
 8004094:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004098:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800409c:	460b      	mov	r3, r1
 800409e:	4313      	orrs	r3, r2
 80040a0:	d01e      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ae:	d10c      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b4:	3328      	adds	r3, #40	; 0x28
 80040b6:	2102      	movs	r1, #2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fe25 	bl	8004d08 <RCCEx_PLL3_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040ca:	4b70      	ldr	r3, [pc, #448]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040da:	4a6c      	ldr	r2, [pc, #432]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040dc:	430b      	orrs	r3, r1
 80040de:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80040ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80040fa:	460b      	mov	r3, r1
 80040fc:	4313      	orrs	r3, r2
 80040fe:	d03e      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004104:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800410c:	d022      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800410e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004112:	d81b      	bhi.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411c:	d00b      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800411e:	e015      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004124:	3308      	adds	r3, #8
 8004126:	2100      	movs	r1, #0
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fd3b 	bl	8004ba4 <RCCEx_PLL2_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004134:	e00f      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413a:	3328      	adds	r3, #40	; 0x28
 800413c:	2102      	movs	r1, #2
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fde2 	bl	8004d08 <RCCEx_PLL3_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800414a:	e004      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004152:	e000      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10b      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800415e:	4b4b      	ldr	r3, [pc, #300]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004162:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800416e:	4a47      	ldr	r2, [pc, #284]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004170:	430b      	orrs	r3, r1
 8004172:	6593      	str	r3, [r2, #88]	; 0x58
 8004174:	e003      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800417a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800417e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800418a:	67bb      	str	r3, [r7, #120]	; 0x78
 800418c:	2300      	movs	r3, #0
 800418e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004190:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004194:	460b      	mov	r3, r1
 8004196:	4313      	orrs	r3, r2
 8004198:	d03b      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800419a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041a6:	d01f      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80041a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041ac:	d818      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80041ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b2:	d003      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80041b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041b8:	d007      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80041ba:	e011      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041bc:	4b33      	ldr	r3, [pc, #204]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	4a32      	ldr	r2, [pc, #200]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041c8:	e00f      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ce:	3328      	adds	r3, #40	; 0x28
 80041d0:	2101      	movs	r1, #1
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fd98 	bl	8004d08 <RCCEx_PLL3_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80041de:	e004      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80041e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10b      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041f2:	4b26      	ldr	r3, [pc, #152]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	4a22      	ldr	r2, [pc, #136]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004204:	430b      	orrs	r3, r1
 8004206:	6553      	str	r3, [r2, #84]	; 0x54
 8004208:	e003      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800420e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800421e:	673b      	str	r3, [r7, #112]	; 0x70
 8004220:	2300      	movs	r3, #0
 8004222:	677b      	str	r3, [r7, #116]	; 0x74
 8004224:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004228:	460b      	mov	r3, r1
 800422a:	4313      	orrs	r3, r2
 800422c:	d034      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423c:	d007      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800423e:	e011      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004240:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	4a11      	ldr	r2, [pc, #68]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800424a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800424c:	e00e      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800424e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004252:	3308      	adds	r3, #8
 8004254:	2102      	movs	r1, #2
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fca4 	bl	8004ba4 <RCCEx_PLL2_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004262:	e003      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800426a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800426c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10d      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004278:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800427c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004282:	4a02      	ldr	r2, [pc, #8]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004284:	430b      	orrs	r3, r1
 8004286:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004288:	e006      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800428a:	bf00      	nop
 800428c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004290:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004294:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80042a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80042a6:	2300      	movs	r3, #0
 80042a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80042ae:	460b      	mov	r3, r1
 80042b0:	4313      	orrs	r3, r2
 80042b2:	d00c      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b8:	3328      	adds	r3, #40	; 0x28
 80042ba:	2102      	movs	r1, #2
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fd23 	bl	8004d08 <RCCEx_PLL3_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80042da:	663b      	str	r3, [r7, #96]	; 0x60
 80042dc:	2300      	movs	r3, #0
 80042de:	667b      	str	r3, [r7, #100]	; 0x64
 80042e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80042e4:	460b      	mov	r3, r1
 80042e6:	4313      	orrs	r3, r2
 80042e8:	d038      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80042ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f6:	d018      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80042f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fc:	d811      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004302:	d014      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004308:	d80b      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d011      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800430e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004312:	d106      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004314:	4bc3      	ldr	r3, [pc, #780]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	4ac2      	ldr	r2, [pc, #776]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800431a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800431e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004320:	e008      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004328:	e004      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800432a:	bf00      	nop
 800432c:	e002      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004334:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800433c:	4bb9      	ldr	r3, [pc, #740]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800434c:	4ab5      	ldr	r2, [pc, #724]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800434e:	430b      	orrs	r3, r1
 8004350:	6553      	str	r3, [r2, #84]	; 0x54
 8004352:	e003      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004358:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004368:	65bb      	str	r3, [r7, #88]	; 0x58
 800436a:	2300      	movs	r3, #0
 800436c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800436e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004372:	460b      	mov	r3, r1
 8004374:	4313      	orrs	r3, r2
 8004376:	d009      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004378:	4baa      	ldr	r3, [pc, #680]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800437a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004386:	4aa7      	ldr	r2, [pc, #668]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004388:	430b      	orrs	r3, r1
 800438a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004398:	653b      	str	r3, [r7, #80]	; 0x50
 800439a:	2300      	movs	r3, #0
 800439c:	657b      	str	r3, [r7, #84]	; 0x54
 800439e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80043a2:	460b      	mov	r3, r1
 80043a4:	4313      	orrs	r3, r2
 80043a6:	d00a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043a8:	4b9e      	ldr	r3, [pc, #632]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043b8:	4a9a      	ldr	r2, [pc, #616]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ba:	430b      	orrs	r3, r1
 80043bc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80043ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80043cc:	2300      	movs	r3, #0
 80043ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80043d4:	460b      	mov	r3, r1
 80043d6:	4313      	orrs	r3, r2
 80043d8:	d009      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043da:	4b92      	ldr	r3, [pc, #584]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043de:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043e8:	4a8e      	ldr	r2, [pc, #568]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ea:	430b      	orrs	r3, r1
 80043ec:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80043fa:	643b      	str	r3, [r7, #64]	; 0x40
 80043fc:	2300      	movs	r3, #0
 80043fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004400:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004404:	460b      	mov	r3, r1
 8004406:	4313      	orrs	r3, r2
 8004408:	d00e      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800440a:	4b86      	ldr	r3, [pc, #536]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	4a85      	ldr	r2, [pc, #532]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004410:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004414:	6113      	str	r3, [r2, #16]
 8004416:	4b83      	ldr	r3, [pc, #524]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004418:	6919      	ldr	r1, [r3, #16]
 800441a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800441e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004422:	4a80      	ldr	r2, [pc, #512]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004424:	430b      	orrs	r3, r1
 8004426:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004434:	63bb      	str	r3, [r7, #56]	; 0x38
 8004436:	2300      	movs	r3, #0
 8004438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800443a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800443e:	460b      	mov	r3, r1
 8004440:	4313      	orrs	r3, r2
 8004442:	d009      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004444:	4b77      	ldr	r3, [pc, #476]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004448:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800444c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004452:	4a74      	ldr	r2, [pc, #464]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004454:	430b      	orrs	r3, r1
 8004456:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004464:	633b      	str	r3, [r7, #48]	; 0x30
 8004466:	2300      	movs	r3, #0
 8004468:	637b      	str	r3, [r7, #52]	; 0x34
 800446a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800446e:	460b      	mov	r3, r1
 8004470:	4313      	orrs	r3, r2
 8004472:	d00a      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004474:	4b6b      	ldr	r3, [pc, #428]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004478:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800447c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004484:	4a67      	ldr	r2, [pc, #412]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004486:	430b      	orrs	r3, r1
 8004488:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800448a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004492:	2100      	movs	r1, #0
 8004494:	62b9      	str	r1, [r7, #40]	; 0x28
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800449c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80044a0:	460b      	mov	r3, r1
 80044a2:	4313      	orrs	r3, r2
 80044a4:	d011      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044aa:	3308      	adds	r3, #8
 80044ac:	2100      	movs	r1, #0
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fb78 	bl	8004ba4 <RCCEx_PLL2_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80044ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d2:	2100      	movs	r1, #0
 80044d4:	6239      	str	r1, [r7, #32]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
 80044dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044e0:	460b      	mov	r3, r1
 80044e2:	4313      	orrs	r3, r2
 80044e4:	d011      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ea:	3308      	adds	r3, #8
 80044ec:	2101      	movs	r1, #1
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fb58 	bl	8004ba4 <RCCEx_PLL2_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80044fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004512:	2100      	movs	r1, #0
 8004514:	61b9      	str	r1, [r7, #24]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004520:	460b      	mov	r3, r1
 8004522:	4313      	orrs	r3, r2
 8004524:	d011      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800452a:	3308      	adds	r3, #8
 800452c:	2102      	movs	r1, #2
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fb38 	bl	8004ba4 <RCCEx_PLL2_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800453a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004546:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	2100      	movs	r1, #0
 8004554:	6139      	str	r1, [r7, #16]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004560:	460b      	mov	r3, r1
 8004562:	4313      	orrs	r3, r2
 8004564:	d011      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456a:	3328      	adds	r3, #40	; 0x28
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fbca 	bl	8004d08 <RCCEx_PLL3_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800457a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004582:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004586:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	2100      	movs	r1, #0
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80045a0:	460b      	mov	r3, r1
 80045a2:	4313      	orrs	r3, r2
 80045a4:	d011      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045aa:	3328      	adds	r3, #40	; 0x28
 80045ac:	2101      	movs	r1, #1
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fbaa 	bl	8004d08 <RCCEx_PLL3_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	2100      	movs	r1, #0
 80045d4:	6039      	str	r1, [r7, #0]
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	607b      	str	r3, [r7, #4]
 80045dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80045e0:	460b      	mov	r3, r1
 80045e2:	4313      	orrs	r3, r2
 80045e4:	d011      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ea:	3328      	adds	r3, #40	; 0x28
 80045ec:	2102      	movs	r1, #2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fb8a 	bl	8004d08 <RCCEx_PLL3_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004606:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800460a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	e000      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
}
 8004618:	4618      	mov	r0, r3
 800461a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800461e:	46bd      	mov	sp, r7
 8004620:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004624:	58024400 	.word	0x58024400

08004628 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800462c:	f7fe fd96 	bl	800315c <HAL_RCC_GetHCLKFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	091b      	lsrs	r3, r3, #4
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	4904      	ldr	r1, [pc, #16]	; (8004650 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004648:	4618      	mov	r0, r3
 800464a:	bd80      	pop	{r7, pc}
 800464c:	58024400 	.word	0x58024400
 8004650:	0800669c 	.word	0x0800669c

08004654 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004654:	b480      	push	{r7}
 8004656:	b089      	sub	sp, #36	; 0x24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800465c:	4ba1      	ldr	r3, [pc, #644]	; (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004666:	4b9f      	ldr	r3, [pc, #636]	; (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	0b1b      	lsrs	r3, r3, #12
 800466c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004670:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004672:	4b9c      	ldr	r3, [pc, #624]	; (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800467e:	4b99      	ldr	r3, [pc, #612]	; (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	08db      	lsrs	r3, r3, #3
 8004684:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004696:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8111 	beq.w	80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	f000 8083 	beq.w	80047b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	f200 80a1 	bhi.w	80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d056      	beq.n	800476c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046be:	e099      	b.n	80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046c0:	4b88      	ldr	r3, [pc, #544]	; (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d02d      	beq.n	8004728 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046cc:	4b85      	ldr	r3, [pc, #532]	; (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	08db      	lsrs	r3, r3, #3
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	4a84      	ldr	r2, [pc, #528]	; (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
 80046dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	ee07 3a90 	vmov	s15, r3
 80046e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f6:	4b7b      	ldr	r3, [pc, #492]	; (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004706:	ed97 6a03 	vldr	s12, [r7, #12]
 800470a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800470e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800471a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004726:	e087      	b.n	8004838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004732:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473a:	4b6a      	ldr	r3, [pc, #424]	; (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474a:	ed97 6a03 	vldr	s12, [r7, #12]
 800474e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800475a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800475e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800476a:	e065      	b.n	8004838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800477a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477e:	4b59      	ldr	r3, [pc, #356]	; (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004792:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ae:	e043      	b.n	8004838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c2:	4b48      	ldr	r3, [pc, #288]	; (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047f2:	e021      	b.n	8004838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004806:	4b37      	ldr	r3, [pc, #220]	; (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004816:	ed97 6a03 	vldr	s12, [r7, #12]
 800481a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800481e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800482a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800482e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004832:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004836:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004838:	4b2a      	ldr	r3, [pc, #168]	; (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	0a5b      	lsrs	r3, r3, #9
 800483e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800484e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004852:	edd7 6a07 	vldr	s13, [r7, #28]
 8004856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800485a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800485e:	ee17 2a90 	vmov	r2, s15
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004866:	4b1f      	ldr	r3, [pc, #124]	; (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800487c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004880:	edd7 6a07 	vldr	s13, [r7, #28]
 8004884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800488c:	ee17 2a90 	vmov	r2, s15
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004894:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	0e1b      	lsrs	r3, r3, #24
 800489a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80048b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ba:	ee17 2a90 	vmov	r2, s15
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048c2:	e008      	b.n	80048d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	609a      	str	r2, [r3, #8]
}
 80048d6:	bf00      	nop
 80048d8:	3724      	adds	r7, #36	; 0x24
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	58024400 	.word	0x58024400
 80048e8:	03d09000 	.word	0x03d09000
 80048ec:	46000000 	.word	0x46000000
 80048f0:	4c742400 	.word	0x4c742400
 80048f4:	4a742400 	.word	0x4a742400
 80048f8:	4af42400 	.word	0x4af42400

080048fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b089      	sub	sp, #36	; 0x24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004904:	4ba1      	ldr	r3, [pc, #644]	; (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800490e:	4b9f      	ldr	r3, [pc, #636]	; (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	0d1b      	lsrs	r3, r3, #20
 8004914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004918:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800491a:	4b9c      	ldr	r3, [pc, #624]	; (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	0a1b      	lsrs	r3, r3, #8
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004926:	4b99      	ldr	r3, [pc, #612]	; (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	08db      	lsrs	r3, r3, #3
 800492c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 8111 	beq.w	8004b6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b02      	cmp	r3, #2
 800494e:	f000 8083 	beq.w	8004a58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b02      	cmp	r3, #2
 8004956:	f200 80a1 	bhi.w	8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d056      	beq.n	8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004966:	e099      	b.n	8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004968:	4b88      	ldr	r3, [pc, #544]	; (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d02d      	beq.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004974:	4b85      	ldr	r3, [pc, #532]	; (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	08db      	lsrs	r3, r3, #3
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	4a84      	ldr	r2, [pc, #528]	; (8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
 8004984:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	ee07 3a90 	vmov	s15, r3
 800498c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499e:	4b7b      	ldr	r3, [pc, #492]	; (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049ce:	e087      	b.n	8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80049de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e2:	4b6a      	ldr	r3, [pc, #424]	; (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a12:	e065      	b.n	8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a26:	4b59      	ldr	r3, [pc, #356]	; (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a56:	e043      	b.n	8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6a:	4b48      	ldr	r3, [pc, #288]	; (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a9a:	e021      	b.n	8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aae:	4b37      	ldr	r3, [pc, #220]	; (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ac2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ade:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ae0:	4b2a      	ldr	r3, [pc, #168]	; (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	0a5b      	lsrs	r3, r3, #9
 8004ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004af6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004afa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b06:	ee17 2a90 	vmov	r2, s15
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b0e:	4b1f      	ldr	r3, [pc, #124]	; (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	0c1b      	lsrs	r3, r3, #16
 8004b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b18:	ee07 3a90 	vmov	s15, r3
 8004b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b28:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b34:	ee17 2a90 	vmov	r2, s15
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b3c:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	0e1b      	lsrs	r3, r3, #24
 8004b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b56:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b62:	ee17 2a90 	vmov	r2, s15
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b6a:	e008      	b.n	8004b7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	609a      	str	r2, [r3, #8]
}
 8004b7e:	bf00      	nop
 8004b80:	3724      	adds	r7, #36	; 0x24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	58024400 	.word	0x58024400
 8004b90:	03d09000 	.word	0x03d09000
 8004b94:	46000000 	.word	0x46000000
 8004b98:	4c742400 	.word	0x4c742400
 8004b9c:	4a742400 	.word	0x4a742400
 8004ba0:	4af42400 	.word	0x4af42400

08004ba4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bb2:	4b53      	ldr	r3, [pc, #332]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d101      	bne.n	8004bc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e099      	b.n	8004cf6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004bc2:	4b4f      	ldr	r3, [pc, #316]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a4e      	ldr	r2, [pc, #312]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004bc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bce:	f7fc fa53 	bl	8001078 <HAL_GetTick>
 8004bd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bd4:	e008      	b.n	8004be8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bd6:	f7fc fa4f 	bl	8001078 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e086      	b.n	8004cf6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004be8:	4b45      	ldr	r3, [pc, #276]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f0      	bne.n	8004bd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004bf4:	4b42      	ldr	r3, [pc, #264]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	031b      	lsls	r3, r3, #12
 8004c02:	493f      	ldr	r1, [pc, #252]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	628b      	str	r3, [r1, #40]	; 0x28
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	025b      	lsls	r3, r3, #9
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	061b      	lsls	r3, r3, #24
 8004c34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c38:	4931      	ldr	r1, [pc, #196]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c3e:	4b30      	ldr	r3, [pc, #192]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	492d      	ldr	r1, [pc, #180]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c50:	4b2b      	ldr	r3, [pc, #172]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	f023 0220 	bic.w	r2, r3, #32
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	4928      	ldr	r1, [pc, #160]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c62:	4b27      	ldr	r3, [pc, #156]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	4a26      	ldr	r2, [pc, #152]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c68:	f023 0310 	bic.w	r3, r3, #16
 8004c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c6e:	4b24      	ldr	r3, [pc, #144]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c72:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <RCCEx_PLL2_Config+0x160>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	69d2      	ldr	r2, [r2, #28]
 8004c7a:	00d2      	lsls	r2, r2, #3
 8004c7c:	4920      	ldr	r1, [pc, #128]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c82:	4b1f      	ldr	r3, [pc, #124]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	4a1e      	ldr	r2, [pc, #120]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c88:	f043 0310 	orr.w	r3, r3, #16
 8004c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d106      	bne.n	8004ca2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c94:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	4a19      	ldr	r2, [pc, #100]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ca0:	e00f      	b.n	8004cc2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d106      	bne.n	8004cb6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ca8:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	4a14      	ldr	r2, [pc, #80]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cb4:	e005      	b.n	8004cc2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004cb6:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004cbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a0e      	ldr	r2, [pc, #56]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004cc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cce:	f7fc f9d3 	bl	8001078 <HAL_GetTick>
 8004cd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cd4:	e008      	b.n	8004ce8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cd6:	f7fc f9cf 	bl	8001078 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e006      	b.n	8004cf6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	58024400 	.word	0x58024400
 8004d04:	ffff0007 	.word	0xffff0007

08004d08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d16:	4b53      	ldr	r3, [pc, #332]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d101      	bne.n	8004d26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e099      	b.n	8004e5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d26:	4b4f      	ldr	r3, [pc, #316]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a4e      	ldr	r2, [pc, #312]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d32:	f7fc f9a1 	bl	8001078 <HAL_GetTick>
 8004d36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d38:	e008      	b.n	8004d4c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d3a:	f7fc f99d 	bl	8001078 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e086      	b.n	8004e5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d4c:	4b45      	ldr	r3, [pc, #276]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f0      	bne.n	8004d3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d58:	4b42      	ldr	r3, [pc, #264]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	051b      	lsls	r3, r3, #20
 8004d66:	493f      	ldr	r1, [pc, #252]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	628b      	str	r3, [r1, #40]	; 0x28
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	025b      	lsls	r3, r3, #9
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	041b      	lsls	r3, r3, #16
 8004d8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	061b      	lsls	r3, r3, #24
 8004d98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d9c:	4931      	ldr	r1, [pc, #196]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004da2:	4b30      	ldr	r3, [pc, #192]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	492d      	ldr	r1, [pc, #180]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004db4:	4b2b      	ldr	r3, [pc, #172]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	4928      	ldr	r1, [pc, #160]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004dc6:	4b27      	ldr	r3, [pc, #156]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	4a26      	ldr	r2, [pc, #152]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dd2:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dd6:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <RCCEx_PLL3_Config+0x160>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	69d2      	ldr	r2, [r2, #28]
 8004dde:	00d2      	lsls	r2, r2, #3
 8004de0:	4920      	ldr	r1, [pc, #128]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004de6:	4b1f      	ldr	r3, [pc, #124]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	4a1e      	ldr	r2, [pc, #120]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004df8:	4b1a      	ldr	r3, [pc, #104]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	4a19      	ldr	r2, [pc, #100]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004dfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e04:	e00f      	b.n	8004e26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d106      	bne.n	8004e1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e0c:	4b15      	ldr	r3, [pc, #84]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	4a14      	ldr	r2, [pc, #80]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004e12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e18:	e005      	b.n	8004e26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	4a11      	ldr	r2, [pc, #68]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004e20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e26:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a0e      	ldr	r2, [pc, #56]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e32:	f7fc f921 	bl	8001078 <HAL_GetTick>
 8004e36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e38:	e008      	b.n	8004e4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e3a:	f7fc f91d 	bl	8001078 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e006      	b.n	8004e5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	58024400 	.word	0x58024400
 8004e68:	ffff0007 	.word	0xffff0007

08004e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e042      	b.n	8004f04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d106      	bne.n	8004e96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7fb ff21 	bl	8000cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2224      	movs	r2, #36	; 0x24
 8004e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0201 	bic.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f82c 	bl	8004f0c <UART_SetConfig>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e022      	b.n	8004f04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fd88 	bl	80059dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fe0f 	bl	8005b20 <UART_CheckIdleState>
 8004f02:	4603      	mov	r3, r0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f10:	b092      	sub	sp, #72	; 0x48
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4bbe      	ldr	r3, [pc, #760]	; (8005234 <UART_SetConfig+0x328>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f44:	430b      	orrs	r3, r1
 8004f46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4ab3      	ldr	r2, [pc, #716]	; (8005238 <UART_SetConfig+0x32c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f74:	4313      	orrs	r3, r2
 8004f76:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	4baf      	ldr	r3, [pc, #700]	; (800523c <UART_SetConfig+0x330>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	6812      	ldr	r2, [r2, #0]
 8004f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	f023 010f 	bic.w	r1, r3, #15
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4aa6      	ldr	r2, [pc, #664]	; (8005240 <UART_SetConfig+0x334>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d177      	bne.n	800509c <UART_SetConfig+0x190>
 8004fac:	4ba5      	ldr	r3, [pc, #660]	; (8005244 <UART_SetConfig+0x338>)
 8004fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fb4:	2b28      	cmp	r3, #40	; 0x28
 8004fb6:	d86d      	bhi.n	8005094 <UART_SetConfig+0x188>
 8004fb8:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <UART_SetConfig+0xb4>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08005065 	.word	0x08005065
 8004fc4:	08005095 	.word	0x08005095
 8004fc8:	08005095 	.word	0x08005095
 8004fcc:	08005095 	.word	0x08005095
 8004fd0:	08005095 	.word	0x08005095
 8004fd4:	08005095 	.word	0x08005095
 8004fd8:	08005095 	.word	0x08005095
 8004fdc:	08005095 	.word	0x08005095
 8004fe0:	0800506d 	.word	0x0800506d
 8004fe4:	08005095 	.word	0x08005095
 8004fe8:	08005095 	.word	0x08005095
 8004fec:	08005095 	.word	0x08005095
 8004ff0:	08005095 	.word	0x08005095
 8004ff4:	08005095 	.word	0x08005095
 8004ff8:	08005095 	.word	0x08005095
 8004ffc:	08005095 	.word	0x08005095
 8005000:	08005075 	.word	0x08005075
 8005004:	08005095 	.word	0x08005095
 8005008:	08005095 	.word	0x08005095
 800500c:	08005095 	.word	0x08005095
 8005010:	08005095 	.word	0x08005095
 8005014:	08005095 	.word	0x08005095
 8005018:	08005095 	.word	0x08005095
 800501c:	08005095 	.word	0x08005095
 8005020:	0800507d 	.word	0x0800507d
 8005024:	08005095 	.word	0x08005095
 8005028:	08005095 	.word	0x08005095
 800502c:	08005095 	.word	0x08005095
 8005030:	08005095 	.word	0x08005095
 8005034:	08005095 	.word	0x08005095
 8005038:	08005095 	.word	0x08005095
 800503c:	08005095 	.word	0x08005095
 8005040:	08005085 	.word	0x08005085
 8005044:	08005095 	.word	0x08005095
 8005048:	08005095 	.word	0x08005095
 800504c:	08005095 	.word	0x08005095
 8005050:	08005095 	.word	0x08005095
 8005054:	08005095 	.word	0x08005095
 8005058:	08005095 	.word	0x08005095
 800505c:	08005095 	.word	0x08005095
 8005060:	0800508d 	.word	0x0800508d
 8005064:	2301      	movs	r3, #1
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506a:	e222      	b.n	80054b2 <UART_SetConfig+0x5a6>
 800506c:	2304      	movs	r3, #4
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005072:	e21e      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005074:	2308      	movs	r3, #8
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507a:	e21a      	b.n	80054b2 <UART_SetConfig+0x5a6>
 800507c:	2310      	movs	r3, #16
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005082:	e216      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005084:	2320      	movs	r3, #32
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508a:	e212      	b.n	80054b2 <UART_SetConfig+0x5a6>
 800508c:	2340      	movs	r3, #64	; 0x40
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005092:	e20e      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005094:	2380      	movs	r3, #128	; 0x80
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509a:	e20a      	b.n	80054b2 <UART_SetConfig+0x5a6>
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a69      	ldr	r2, [pc, #420]	; (8005248 <UART_SetConfig+0x33c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d130      	bne.n	8005108 <UART_SetConfig+0x1fc>
 80050a6:	4b67      	ldr	r3, [pc, #412]	; (8005244 <UART_SetConfig+0x338>)
 80050a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	d826      	bhi.n	8005100 <UART_SetConfig+0x1f4>
 80050b2:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0x1ac>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	080050d1 	.word	0x080050d1
 80050bc:	080050d9 	.word	0x080050d9
 80050c0:	080050e1 	.word	0x080050e1
 80050c4:	080050e9 	.word	0x080050e9
 80050c8:	080050f1 	.word	0x080050f1
 80050cc:	080050f9 	.word	0x080050f9
 80050d0:	2300      	movs	r3, #0
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d6:	e1ec      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050de:	e1e8      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e6:	e1e4      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ee:	e1e0      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80050f0:	2320      	movs	r3, #32
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f6:	e1dc      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80050f8:	2340      	movs	r3, #64	; 0x40
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fe:	e1d8      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005100:	2380      	movs	r3, #128	; 0x80
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005106:	e1d4      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a4f      	ldr	r2, [pc, #316]	; (800524c <UART_SetConfig+0x340>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d130      	bne.n	8005174 <UART_SetConfig+0x268>
 8005112:	4b4c      	ldr	r3, [pc, #304]	; (8005244 <UART_SetConfig+0x338>)
 8005114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	2b05      	cmp	r3, #5
 800511c:	d826      	bhi.n	800516c <UART_SetConfig+0x260>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <UART_SetConfig+0x218>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	0800513d 	.word	0x0800513d
 8005128:	08005145 	.word	0x08005145
 800512c:	0800514d 	.word	0x0800514d
 8005130:	08005155 	.word	0x08005155
 8005134:	0800515d 	.word	0x0800515d
 8005138:	08005165 	.word	0x08005165
 800513c:	2300      	movs	r3, #0
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005142:	e1b6      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005144:	2304      	movs	r3, #4
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800514a:	e1b2      	b.n	80054b2 <UART_SetConfig+0x5a6>
 800514c:	2308      	movs	r3, #8
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005152:	e1ae      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005154:	2310      	movs	r3, #16
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515a:	e1aa      	b.n	80054b2 <UART_SetConfig+0x5a6>
 800515c:	2320      	movs	r3, #32
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005162:	e1a6      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005164:	2340      	movs	r3, #64	; 0x40
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516a:	e1a2      	b.n	80054b2 <UART_SetConfig+0x5a6>
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005172:	e19e      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a35      	ldr	r2, [pc, #212]	; (8005250 <UART_SetConfig+0x344>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d130      	bne.n	80051e0 <UART_SetConfig+0x2d4>
 800517e:	4b31      	ldr	r3, [pc, #196]	; (8005244 <UART_SetConfig+0x338>)
 8005180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	2b05      	cmp	r3, #5
 8005188:	d826      	bhi.n	80051d8 <UART_SetConfig+0x2cc>
 800518a:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <UART_SetConfig+0x284>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051a9 	.word	0x080051a9
 8005194:	080051b1 	.word	0x080051b1
 8005198:	080051b9 	.word	0x080051b9
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051c9 	.word	0x080051c9
 80051a4:	080051d1 	.word	0x080051d1
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ae:	e180      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80051b0:	2304      	movs	r3, #4
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b6:	e17c      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80051b8:	2308      	movs	r3, #8
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051be:	e178      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80051c0:	2310      	movs	r3, #16
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c6:	e174      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80051c8:	2320      	movs	r3, #32
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ce:	e170      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80051d0:	2340      	movs	r3, #64	; 0x40
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d6:	e16c      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80051d8:	2380      	movs	r3, #128	; 0x80
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051de:	e168      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1b      	ldr	r2, [pc, #108]	; (8005254 <UART_SetConfig+0x348>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d142      	bne.n	8005270 <UART_SetConfig+0x364>
 80051ea:	4b16      	ldr	r3, [pc, #88]	; (8005244 <UART_SetConfig+0x338>)
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	2b05      	cmp	r3, #5
 80051f4:	d838      	bhi.n	8005268 <UART_SetConfig+0x35c>
 80051f6:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <UART_SetConfig+0x2f0>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	08005215 	.word	0x08005215
 8005200:	0800521d 	.word	0x0800521d
 8005204:	08005225 	.word	0x08005225
 8005208:	0800522d 	.word	0x0800522d
 800520c:	08005259 	.word	0x08005259
 8005210:	08005261 	.word	0x08005261
 8005214:	2300      	movs	r3, #0
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521a:	e14a      	b.n	80054b2 <UART_SetConfig+0x5a6>
 800521c:	2304      	movs	r3, #4
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005222:	e146      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005224:	2308      	movs	r3, #8
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522a:	e142      	b.n	80054b2 <UART_SetConfig+0x5a6>
 800522c:	2310      	movs	r3, #16
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005232:	e13e      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005234:	cfff69f3 	.word	0xcfff69f3
 8005238:	58000c00 	.word	0x58000c00
 800523c:	11fff4ff 	.word	0x11fff4ff
 8005240:	40011000 	.word	0x40011000
 8005244:	58024400 	.word	0x58024400
 8005248:	40004400 	.word	0x40004400
 800524c:	40004800 	.word	0x40004800
 8005250:	40004c00 	.word	0x40004c00
 8005254:	40005000 	.word	0x40005000
 8005258:	2320      	movs	r3, #32
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525e:	e128      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005260:	2340      	movs	r3, #64	; 0x40
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005266:	e124      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005268:	2380      	movs	r3, #128	; 0x80
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526e:	e120      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4acb      	ldr	r2, [pc, #812]	; (80055a4 <UART_SetConfig+0x698>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d176      	bne.n	8005368 <UART_SetConfig+0x45c>
 800527a:	4bcb      	ldr	r3, [pc, #812]	; (80055a8 <UART_SetConfig+0x69c>)
 800527c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005282:	2b28      	cmp	r3, #40	; 0x28
 8005284:	d86c      	bhi.n	8005360 <UART_SetConfig+0x454>
 8005286:	a201      	add	r2, pc, #4	; (adr r2, 800528c <UART_SetConfig+0x380>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	08005331 	.word	0x08005331
 8005290:	08005361 	.word	0x08005361
 8005294:	08005361 	.word	0x08005361
 8005298:	08005361 	.word	0x08005361
 800529c:	08005361 	.word	0x08005361
 80052a0:	08005361 	.word	0x08005361
 80052a4:	08005361 	.word	0x08005361
 80052a8:	08005361 	.word	0x08005361
 80052ac:	08005339 	.word	0x08005339
 80052b0:	08005361 	.word	0x08005361
 80052b4:	08005361 	.word	0x08005361
 80052b8:	08005361 	.word	0x08005361
 80052bc:	08005361 	.word	0x08005361
 80052c0:	08005361 	.word	0x08005361
 80052c4:	08005361 	.word	0x08005361
 80052c8:	08005361 	.word	0x08005361
 80052cc:	08005341 	.word	0x08005341
 80052d0:	08005361 	.word	0x08005361
 80052d4:	08005361 	.word	0x08005361
 80052d8:	08005361 	.word	0x08005361
 80052dc:	08005361 	.word	0x08005361
 80052e0:	08005361 	.word	0x08005361
 80052e4:	08005361 	.word	0x08005361
 80052e8:	08005361 	.word	0x08005361
 80052ec:	08005349 	.word	0x08005349
 80052f0:	08005361 	.word	0x08005361
 80052f4:	08005361 	.word	0x08005361
 80052f8:	08005361 	.word	0x08005361
 80052fc:	08005361 	.word	0x08005361
 8005300:	08005361 	.word	0x08005361
 8005304:	08005361 	.word	0x08005361
 8005308:	08005361 	.word	0x08005361
 800530c:	08005351 	.word	0x08005351
 8005310:	08005361 	.word	0x08005361
 8005314:	08005361 	.word	0x08005361
 8005318:	08005361 	.word	0x08005361
 800531c:	08005361 	.word	0x08005361
 8005320:	08005361 	.word	0x08005361
 8005324:	08005361 	.word	0x08005361
 8005328:	08005361 	.word	0x08005361
 800532c:	08005359 	.word	0x08005359
 8005330:	2301      	movs	r3, #1
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005336:	e0bc      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005338:	2304      	movs	r3, #4
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800533e:	e0b8      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005340:	2308      	movs	r3, #8
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005346:	e0b4      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005348:	2310      	movs	r3, #16
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534e:	e0b0      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005350:	2320      	movs	r3, #32
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005356:	e0ac      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005358:	2340      	movs	r3, #64	; 0x40
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535e:	e0a8      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005366:	e0a4      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a8f      	ldr	r2, [pc, #572]	; (80055ac <UART_SetConfig+0x6a0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d130      	bne.n	80053d4 <UART_SetConfig+0x4c8>
 8005372:	4b8d      	ldr	r3, [pc, #564]	; (80055a8 <UART_SetConfig+0x69c>)
 8005374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	2b05      	cmp	r3, #5
 800537c:	d826      	bhi.n	80053cc <UART_SetConfig+0x4c0>
 800537e:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <UART_SetConfig+0x478>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	0800539d 	.word	0x0800539d
 8005388:	080053a5 	.word	0x080053a5
 800538c:	080053ad 	.word	0x080053ad
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053c5 	.word	0x080053c5
 800539c:	2300      	movs	r3, #0
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053a2:	e086      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80053a4:	2304      	movs	r3, #4
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053aa:	e082      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80053ac:	2308      	movs	r3, #8
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b2:	e07e      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80053b4:	2310      	movs	r3, #16
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ba:	e07a      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80053bc:	2320      	movs	r3, #32
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c2:	e076      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80053c4:	2340      	movs	r3, #64	; 0x40
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ca:	e072      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80053cc:	2380      	movs	r3, #128	; 0x80
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d2:	e06e      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a75      	ldr	r2, [pc, #468]	; (80055b0 <UART_SetConfig+0x6a4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d130      	bne.n	8005440 <UART_SetConfig+0x534>
 80053de:	4b72      	ldr	r3, [pc, #456]	; (80055a8 <UART_SetConfig+0x69c>)
 80053e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	2b05      	cmp	r3, #5
 80053e8:	d826      	bhi.n	8005438 <UART_SetConfig+0x52c>
 80053ea:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <UART_SetConfig+0x4e4>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005409 	.word	0x08005409
 80053f4:	08005411 	.word	0x08005411
 80053f8:	08005419 	.word	0x08005419
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005429 	.word	0x08005429
 8005404:	08005431 	.word	0x08005431
 8005408:	2300      	movs	r3, #0
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800540e:	e050      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005410:	2304      	movs	r3, #4
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005416:	e04c      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005418:	2308      	movs	r3, #8
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541e:	e048      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005420:	2310      	movs	r3, #16
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005426:	e044      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005428:	2320      	movs	r3, #32
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542e:	e040      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005430:	2340      	movs	r3, #64	; 0x40
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005436:	e03c      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005438:	2380      	movs	r3, #128	; 0x80
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543e:	e038      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a5b      	ldr	r2, [pc, #364]	; (80055b4 <UART_SetConfig+0x6a8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d130      	bne.n	80054ac <UART_SetConfig+0x5a0>
 800544a:	4b57      	ldr	r3, [pc, #348]	; (80055a8 <UART_SetConfig+0x69c>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	2b05      	cmp	r3, #5
 8005454:	d826      	bhi.n	80054a4 <UART_SetConfig+0x598>
 8005456:	a201      	add	r2, pc, #4	; (adr r2, 800545c <UART_SetConfig+0x550>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	08005475 	.word	0x08005475
 8005460:	0800547d 	.word	0x0800547d
 8005464:	08005485 	.word	0x08005485
 8005468:	0800548d 	.word	0x0800548d
 800546c:	08005495 	.word	0x08005495
 8005470:	0800549d 	.word	0x0800549d
 8005474:	2302      	movs	r3, #2
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547a:	e01a      	b.n	80054b2 <UART_SetConfig+0x5a6>
 800547c:	2304      	movs	r3, #4
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005482:	e016      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005484:	2308      	movs	r3, #8
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548a:	e012      	b.n	80054b2 <UART_SetConfig+0x5a6>
 800548c:	2310      	movs	r3, #16
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005492:	e00e      	b.n	80054b2 <UART_SetConfig+0x5a6>
 8005494:	2320      	movs	r3, #32
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549a:	e00a      	b.n	80054b2 <UART_SetConfig+0x5a6>
 800549c:	2340      	movs	r3, #64	; 0x40
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a2:	e006      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80054a4:	2380      	movs	r3, #128	; 0x80
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054aa:	e002      	b.n	80054b2 <UART_SetConfig+0x5a6>
 80054ac:	2380      	movs	r3, #128	; 0x80
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a3f      	ldr	r2, [pc, #252]	; (80055b4 <UART_SetConfig+0x6a8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	f040 80f8 	bne.w	80056ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	dc46      	bgt.n	8005554 <UART_SetConfig+0x648>
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	f2c0 8082 	blt.w	80055d0 <UART_SetConfig+0x6c4>
 80054cc:	3b02      	subs	r3, #2
 80054ce:	2b1e      	cmp	r3, #30
 80054d0:	d87e      	bhi.n	80055d0 <UART_SetConfig+0x6c4>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <UART_SetConfig+0x5cc>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	0800555b 	.word	0x0800555b
 80054dc:	080055d1 	.word	0x080055d1
 80054e0:	08005563 	.word	0x08005563
 80054e4:	080055d1 	.word	0x080055d1
 80054e8:	080055d1 	.word	0x080055d1
 80054ec:	080055d1 	.word	0x080055d1
 80054f0:	08005573 	.word	0x08005573
 80054f4:	080055d1 	.word	0x080055d1
 80054f8:	080055d1 	.word	0x080055d1
 80054fc:	080055d1 	.word	0x080055d1
 8005500:	080055d1 	.word	0x080055d1
 8005504:	080055d1 	.word	0x080055d1
 8005508:	080055d1 	.word	0x080055d1
 800550c:	080055d1 	.word	0x080055d1
 8005510:	08005583 	.word	0x08005583
 8005514:	080055d1 	.word	0x080055d1
 8005518:	080055d1 	.word	0x080055d1
 800551c:	080055d1 	.word	0x080055d1
 8005520:	080055d1 	.word	0x080055d1
 8005524:	080055d1 	.word	0x080055d1
 8005528:	080055d1 	.word	0x080055d1
 800552c:	080055d1 	.word	0x080055d1
 8005530:	080055d1 	.word	0x080055d1
 8005534:	080055d1 	.word	0x080055d1
 8005538:	080055d1 	.word	0x080055d1
 800553c:	080055d1 	.word	0x080055d1
 8005540:	080055d1 	.word	0x080055d1
 8005544:	080055d1 	.word	0x080055d1
 8005548:	080055d1 	.word	0x080055d1
 800554c:	080055d1 	.word	0x080055d1
 8005550:	080055c3 	.word	0x080055c3
 8005554:	2b40      	cmp	r3, #64	; 0x40
 8005556:	d037      	beq.n	80055c8 <UART_SetConfig+0x6bc>
 8005558:	e03a      	b.n	80055d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800555a:	f7ff f865 	bl	8004628 <HAL_RCCEx_GetD3PCLK1Freq>
 800555e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005560:	e03c      	b.n	80055dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff f874 	bl	8004654 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005570:	e034      	b.n	80055dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005572:	f107 0318 	add.w	r3, r7, #24
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff f9c0 	bl	80048fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005580:	e02c      	b.n	80055dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005582:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <UART_SetConfig+0x69c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d016      	beq.n	80055bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800558e:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <UART_SetConfig+0x69c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	08db      	lsrs	r3, r3, #3
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	4a07      	ldr	r2, [pc, #28]	; (80055b8 <UART_SetConfig+0x6ac>)
 800559a:	fa22 f303 	lsr.w	r3, r2, r3
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055a0:	e01c      	b.n	80055dc <UART_SetConfig+0x6d0>
 80055a2:	bf00      	nop
 80055a4:	40011400 	.word	0x40011400
 80055a8:	58024400 	.word	0x58024400
 80055ac:	40007800 	.word	0x40007800
 80055b0:	40007c00 	.word	0x40007c00
 80055b4:	58000c00 	.word	0x58000c00
 80055b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80055bc:	4b9d      	ldr	r3, [pc, #628]	; (8005834 <UART_SetConfig+0x928>)
 80055be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c0:	e00c      	b.n	80055dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055c2:	4b9d      	ldr	r3, [pc, #628]	; (8005838 <UART_SetConfig+0x92c>)
 80055c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c6:	e009      	b.n	80055dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055ce:	e005      	b.n	80055dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80055da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 81de 	beq.w	80059a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	4a94      	ldr	r2, [pc, #592]	; (800583c <UART_SetConfig+0x930>)
 80055ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ee:	461a      	mov	r2, r3
 80055f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80055f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	4613      	mov	r3, r2
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	4413      	add	r3, r2
 8005602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005604:	429a      	cmp	r2, r3
 8005606:	d305      	bcc.n	8005614 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800560e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005610:	429a      	cmp	r2, r3
 8005612:	d903      	bls.n	800561c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800561a:	e1c1      	b.n	80059a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800561c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561e:	2200      	movs	r2, #0
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	60fa      	str	r2, [r7, #12]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	4a84      	ldr	r2, [pc, #528]	; (800583c <UART_SetConfig+0x930>)
 800562a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800562e:	b29b      	uxth	r3, r3
 8005630:	2200      	movs	r2, #0
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	607a      	str	r2, [r7, #4]
 8005636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800563a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800563e:	f7fa fe4b 	bl	80002d8 <__aeabi_uldivmod>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4610      	mov	r0, r2
 8005648:	4619      	mov	r1, r3
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	f04f 0300 	mov.w	r3, #0
 8005652:	020b      	lsls	r3, r1, #8
 8005654:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005658:	0202      	lsls	r2, r0, #8
 800565a:	6979      	ldr	r1, [r7, #20]
 800565c:	6849      	ldr	r1, [r1, #4]
 800565e:	0849      	lsrs	r1, r1, #1
 8005660:	2000      	movs	r0, #0
 8005662:	460c      	mov	r4, r1
 8005664:	4605      	mov	r5, r0
 8005666:	eb12 0804 	adds.w	r8, r2, r4
 800566a:	eb43 0905 	adc.w	r9, r3, r5
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	469a      	mov	sl, r3
 8005676:	4693      	mov	fp, r2
 8005678:	4652      	mov	r2, sl
 800567a:	465b      	mov	r3, fp
 800567c:	4640      	mov	r0, r8
 800567e:	4649      	mov	r1, r9
 8005680:	f7fa fe2a 	bl	80002d8 <__aeabi_uldivmod>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4613      	mov	r3, r2
 800568a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005692:	d308      	bcc.n	80056a6 <UART_SetConfig+0x79a>
 8005694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800569a:	d204      	bcs.n	80056a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056a2:	60da      	str	r2, [r3, #12]
 80056a4:	e17c      	b.n	80059a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80056ac:	e178      	b.n	80059a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b6:	f040 80c5 	bne.w	8005844 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80056ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80056be:	2b20      	cmp	r3, #32
 80056c0:	dc48      	bgt.n	8005754 <UART_SetConfig+0x848>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	db7b      	blt.n	80057be <UART_SetConfig+0x8b2>
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d879      	bhi.n	80057be <UART_SetConfig+0x8b2>
 80056ca:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <UART_SetConfig+0x7c4>)
 80056cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d0:	0800575b 	.word	0x0800575b
 80056d4:	08005763 	.word	0x08005763
 80056d8:	080057bf 	.word	0x080057bf
 80056dc:	080057bf 	.word	0x080057bf
 80056e0:	0800576b 	.word	0x0800576b
 80056e4:	080057bf 	.word	0x080057bf
 80056e8:	080057bf 	.word	0x080057bf
 80056ec:	080057bf 	.word	0x080057bf
 80056f0:	0800577b 	.word	0x0800577b
 80056f4:	080057bf 	.word	0x080057bf
 80056f8:	080057bf 	.word	0x080057bf
 80056fc:	080057bf 	.word	0x080057bf
 8005700:	080057bf 	.word	0x080057bf
 8005704:	080057bf 	.word	0x080057bf
 8005708:	080057bf 	.word	0x080057bf
 800570c:	080057bf 	.word	0x080057bf
 8005710:	0800578b 	.word	0x0800578b
 8005714:	080057bf 	.word	0x080057bf
 8005718:	080057bf 	.word	0x080057bf
 800571c:	080057bf 	.word	0x080057bf
 8005720:	080057bf 	.word	0x080057bf
 8005724:	080057bf 	.word	0x080057bf
 8005728:	080057bf 	.word	0x080057bf
 800572c:	080057bf 	.word	0x080057bf
 8005730:	080057bf 	.word	0x080057bf
 8005734:	080057bf 	.word	0x080057bf
 8005738:	080057bf 	.word	0x080057bf
 800573c:	080057bf 	.word	0x080057bf
 8005740:	080057bf 	.word	0x080057bf
 8005744:	080057bf 	.word	0x080057bf
 8005748:	080057bf 	.word	0x080057bf
 800574c:	080057bf 	.word	0x080057bf
 8005750:	080057b1 	.word	0x080057b1
 8005754:	2b40      	cmp	r3, #64	; 0x40
 8005756:	d02e      	beq.n	80057b6 <UART_SetConfig+0x8aa>
 8005758:	e031      	b.n	80057be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800575a:	f7fd fd2f 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 800575e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005760:	e033      	b.n	80057ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005762:	f7fd fd41 	bl	80031e8 <HAL_RCC_GetPCLK2Freq>
 8005766:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005768:	e02f      	b.n	80057ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800576a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe ff70 	bl	8004654 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005778:	e027      	b.n	80057ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800577a:	f107 0318 	add.w	r3, r7, #24
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff f8bc 	bl	80048fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005788:	e01f      	b.n	80057ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800578a:	4b2d      	ldr	r3, [pc, #180]	; (8005840 <UART_SetConfig+0x934>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005796:	4b2a      	ldr	r3, [pc, #168]	; (8005840 <UART_SetConfig+0x934>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	08db      	lsrs	r3, r3, #3
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	4a24      	ldr	r2, [pc, #144]	; (8005834 <UART_SetConfig+0x928>)
 80057a2:	fa22 f303 	lsr.w	r3, r2, r3
 80057a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057a8:	e00f      	b.n	80057ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80057aa:	4b22      	ldr	r3, [pc, #136]	; (8005834 <UART_SetConfig+0x928>)
 80057ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057ae:	e00c      	b.n	80057ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057b0:	4b21      	ldr	r3, [pc, #132]	; (8005838 <UART_SetConfig+0x92c>)
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057b4:	e009      	b.n	80057ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057bc:	e005      	b.n	80057ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80057c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80e7 	beq.w	80059a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	4a19      	ldr	r2, [pc, #100]	; (800583c <UART_SetConfig+0x930>)
 80057d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057dc:	461a      	mov	r2, r3
 80057de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80057e4:	005a      	lsls	r2, r3, #1
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	085b      	lsrs	r3, r3, #1
 80057ec:	441a      	add	r2, r3
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fa:	2b0f      	cmp	r3, #15
 80057fc:	d916      	bls.n	800582c <UART_SetConfig+0x920>
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005804:	d212      	bcs.n	800582c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	b29b      	uxth	r3, r3
 800580a:	f023 030f 	bic.w	r3, r3, #15
 800580e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	b29b      	uxth	r3, r3
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	b29a      	uxth	r2, r3
 800581c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800581e:	4313      	orrs	r3, r2
 8005820:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005828:	60da      	str	r2, [r3, #12]
 800582a:	e0b9      	b.n	80059a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005832:	e0b5      	b.n	80059a0 <UART_SetConfig+0xa94>
 8005834:	03d09000 	.word	0x03d09000
 8005838:	003d0900 	.word	0x003d0900
 800583c:	080066ac 	.word	0x080066ac
 8005840:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005844:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005848:	2b20      	cmp	r3, #32
 800584a:	dc49      	bgt.n	80058e0 <UART_SetConfig+0x9d4>
 800584c:	2b00      	cmp	r3, #0
 800584e:	db7c      	blt.n	800594a <UART_SetConfig+0xa3e>
 8005850:	2b20      	cmp	r3, #32
 8005852:	d87a      	bhi.n	800594a <UART_SetConfig+0xa3e>
 8005854:	a201      	add	r2, pc, #4	; (adr r2, 800585c <UART_SetConfig+0x950>)
 8005856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585a:	bf00      	nop
 800585c:	080058e7 	.word	0x080058e7
 8005860:	080058ef 	.word	0x080058ef
 8005864:	0800594b 	.word	0x0800594b
 8005868:	0800594b 	.word	0x0800594b
 800586c:	080058f7 	.word	0x080058f7
 8005870:	0800594b 	.word	0x0800594b
 8005874:	0800594b 	.word	0x0800594b
 8005878:	0800594b 	.word	0x0800594b
 800587c:	08005907 	.word	0x08005907
 8005880:	0800594b 	.word	0x0800594b
 8005884:	0800594b 	.word	0x0800594b
 8005888:	0800594b 	.word	0x0800594b
 800588c:	0800594b 	.word	0x0800594b
 8005890:	0800594b 	.word	0x0800594b
 8005894:	0800594b 	.word	0x0800594b
 8005898:	0800594b 	.word	0x0800594b
 800589c:	08005917 	.word	0x08005917
 80058a0:	0800594b 	.word	0x0800594b
 80058a4:	0800594b 	.word	0x0800594b
 80058a8:	0800594b 	.word	0x0800594b
 80058ac:	0800594b 	.word	0x0800594b
 80058b0:	0800594b 	.word	0x0800594b
 80058b4:	0800594b 	.word	0x0800594b
 80058b8:	0800594b 	.word	0x0800594b
 80058bc:	0800594b 	.word	0x0800594b
 80058c0:	0800594b 	.word	0x0800594b
 80058c4:	0800594b 	.word	0x0800594b
 80058c8:	0800594b 	.word	0x0800594b
 80058cc:	0800594b 	.word	0x0800594b
 80058d0:	0800594b 	.word	0x0800594b
 80058d4:	0800594b 	.word	0x0800594b
 80058d8:	0800594b 	.word	0x0800594b
 80058dc:	0800593d 	.word	0x0800593d
 80058e0:	2b40      	cmp	r3, #64	; 0x40
 80058e2:	d02e      	beq.n	8005942 <UART_SetConfig+0xa36>
 80058e4:	e031      	b.n	800594a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e6:	f7fd fc69 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 80058ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058ec:	e033      	b.n	8005956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ee:	f7fd fc7b 	bl	80031e8 <HAL_RCC_GetPCLK2Freq>
 80058f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058f4:	e02f      	b.n	8005956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe feaa 	bl	8004654 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005904:	e027      	b.n	8005956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005906:	f107 0318 	add.w	r3, r7, #24
 800590a:	4618      	mov	r0, r3
 800590c:	f7fe fff6 	bl	80048fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005914:	e01f      	b.n	8005956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005916:	4b2d      	ldr	r3, [pc, #180]	; (80059cc <UART_SetConfig+0xac0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005922:	4b2a      	ldr	r3, [pc, #168]	; (80059cc <UART_SetConfig+0xac0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	08db      	lsrs	r3, r3, #3
 8005928:	f003 0303 	and.w	r3, r3, #3
 800592c:	4a28      	ldr	r2, [pc, #160]	; (80059d0 <UART_SetConfig+0xac4>)
 800592e:	fa22 f303 	lsr.w	r3, r2, r3
 8005932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005934:	e00f      	b.n	8005956 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005936:	4b26      	ldr	r3, [pc, #152]	; (80059d0 <UART_SetConfig+0xac4>)
 8005938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800593a:	e00c      	b.n	8005956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800593c:	4b25      	ldr	r3, [pc, #148]	; (80059d4 <UART_SetConfig+0xac8>)
 800593e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005940:	e009      	b.n	8005956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005948:	e005      	b.n	8005956 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005954:	bf00      	nop
    }

    if (pclk != 0U)
 8005956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d021      	beq.n	80059a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	4a1d      	ldr	r2, [pc, #116]	; (80059d8 <UART_SetConfig+0xacc>)
 8005962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005966:	461a      	mov	r2, r3
 8005968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596a:	fbb3 f2f2 	udiv	r2, r3, r2
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	085b      	lsrs	r3, r3, #1
 8005974:	441a      	add	r2, r3
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	fbb2 f3f3 	udiv	r3, r2, r3
 800597e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	2b0f      	cmp	r3, #15
 8005984:	d909      	bls.n	800599a <UART_SetConfig+0xa8e>
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800598c:	d205      	bcs.n	800599a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	b29a      	uxth	r2, r3
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60da      	str	r2, [r3, #12]
 8005998:	e002      	b.n	80059a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2200      	movs	r2, #0
 80059b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2200      	movs	r2, #0
 80059ba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80059bc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3748      	adds	r7, #72	; 0x48
 80059c4:	46bd      	mov	sp, r7
 80059c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ca:	bf00      	nop
 80059cc:	58024400 	.word	0x58024400
 80059d0:	03d09000 	.word	0x03d09000
 80059d4:	003d0900 	.word	0x003d0900
 80059d8:	080066ac 	.word	0x080066ac

080059dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a92:	f003 0320 	and.w	r3, r3, #32
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01a      	beq.n	8005af2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ada:	d10a      	bne.n	8005af2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	605a      	str	r2, [r3, #4]
  }
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b098      	sub	sp, #96	; 0x60
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b30:	f7fb faa2 	bl	8001078 <HAL_GetTick>
 8005b34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d12f      	bne.n	8005ba4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f88e 	bl	8005c74 <UART_WaitOnFlagUntilTimeout>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d022      	beq.n	8005ba4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b72:	653b      	str	r3, [r7, #80]	; 0x50
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b7e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e6      	bne.n	8005b5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e063      	b.n	8005c6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d149      	bne.n	8005c46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f857 	bl	8005c74 <UART_WaitOnFlagUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d03c      	beq.n	8005c46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005be0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bea:	633b      	str	r3, [r7, #48]	; 0x30
 8005bec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e6      	bne.n	8005bcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3308      	adds	r3, #8
 8005c04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f023 0301 	bic.w	r3, r3, #1
 8005c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c1e:	61fa      	str	r2, [r7, #28]
 8005c20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	69b9      	ldr	r1, [r7, #24]
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e5      	bne.n	8005bfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e012      	b.n	8005c6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3758      	adds	r7, #88	; 0x58
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	4613      	mov	r3, r2
 8005c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c84:	e049      	b.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8c:	d045      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c8e:	f7fb f9f3 	bl	8001078 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d302      	bcc.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e048      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d031      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d110      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f839 	bl	8005d44 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e029      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cf4:	d111      	bne.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 f81f 	bl	8005d44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e00f      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4013      	ands	r3, r2
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	bf0c      	ite	eq
 8005d2a:	2301      	moveq	r3, #1
 8005d2c:	2300      	movne	r3, #0
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	79fb      	ldrb	r3, [r7, #7]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d0a6      	beq.n	8005c86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b095      	sub	sp, #84	; 0x54
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d6a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d72:	e841 2300 	strex	r3, r2, [r1]
 8005d76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1e6      	bne.n	8005d4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3308      	adds	r3, #8
 8005d84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	4b1e      	ldr	r3, [pc, #120]	; (8005e0c <UART_EndRxTransfer+0xc8>)
 8005d92:	4013      	ands	r3, r2
 8005d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005da0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da6:	e841 2300 	strex	r3, r2, [r1]
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1e5      	bne.n	8005d7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d118      	bne.n	8005dec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f023 0310 	bic.w	r3, r3, #16
 8005dce:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ddc:	6979      	ldr	r1, [r7, #20]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	e841 2300 	strex	r3, r2, [r1]
 8005de4:	613b      	str	r3, [r7, #16]
   return(result);
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e6      	bne.n	8005dba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005e00:	bf00      	nop
 8005e02:	3754      	adds	r7, #84	; 0x54
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	effffffe 	.word	0xeffffffe

08005e10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e22:	2302      	movs	r3, #2
 8005e24:	e027      	b.n	8005e76 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2224      	movs	r2, #36	; 0x24
 8005e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0201 	bic.w	r2, r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e02d      	b.n	8005ef6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2224      	movs	r2, #36	; 0x24
 8005ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0201 	bic.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f850 	bl	8005f7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e02d      	b.n	8005f72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2224      	movs	r2, #36	; 0x24
 8005f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0201 	bic.w	r2, r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f812 	bl	8005f7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d108      	bne.n	8005f9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f9c:	e031      	b.n	8006002 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f9e:	2310      	movs	r3, #16
 8005fa0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fa2:	2310      	movs	r3, #16
 8005fa4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	0e5b      	lsrs	r3, r3, #25
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	0f5b      	lsrs	r3, r3, #29
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fc6:	7bbb      	ldrb	r3, [r7, #14]
 8005fc8:	7b3a      	ldrb	r2, [r7, #12]
 8005fca:	4911      	ldr	r1, [pc, #68]	; (8006010 <UARTEx_SetNbDataToProcess+0x94>)
 8005fcc:	5c8a      	ldrb	r2, [r1, r2]
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fd2:	7b3a      	ldrb	r2, [r7, #12]
 8005fd4:	490f      	ldr	r1, [pc, #60]	; (8006014 <UARTEx_SetNbDataToProcess+0x98>)
 8005fd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	7b7a      	ldrb	r2, [r7, #13]
 8005fe8:	4909      	ldr	r1, [pc, #36]	; (8006010 <UARTEx_SetNbDataToProcess+0x94>)
 8005fea:	5c8a      	ldrb	r2, [r1, r2]
 8005fec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ff0:	7b7a      	ldrb	r2, [r7, #13]
 8005ff2:	4908      	ldr	r1, [pc, #32]	; (8006014 <UARTEx_SetNbDataToProcess+0x98>)
 8005ff4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ff6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	080066c4 	.word	0x080066c4
 8006014:	080066cc 	.word	0x080066cc

08006018 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006018:	b084      	sub	sp, #16
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	f107 001c 	add.w	r0, r7, #28
 8006026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	2b01      	cmp	r3, #1
 800602e:	d120      	bne.n	8006072 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	4b2a      	ldr	r3, [pc, #168]	; (80060ec <USB_CoreInit+0xd4>)
 8006042:	4013      	ands	r3, r2
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006056:	2b01      	cmp	r3, #1
 8006058:	d105      	bne.n	8006066 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 faac 	bl	80065c4 <USB_CoreReset>
 800606c:	4603      	mov	r3, r0
 800606e:	73fb      	strb	r3, [r7, #15]
 8006070:	e01a      	b.n	80060a8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 faa0 	bl	80065c4 <USB_CoreReset>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	639a      	str	r2, [r3, #56]	; 0x38
 800609a:	e005      	b.n	80060a8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d116      	bne.n	80060dc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060bc:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <USB_CoreInit+0xd8>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f043 0206 	orr.w	r2, r3, #6
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f043 0220 	orr.w	r2, r3, #32
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060e8:	b004      	add	sp, #16
 80060ea:	4770      	bx	lr
 80060ec:	ffbdffbf 	.word	0xffbdffbf
 80060f0:	03ee0000 	.word	0x03ee0000

080060f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f023 0201 	bic.w	r2, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b084      	sub	sp, #16
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	460b      	mov	r3, r1
 8006120:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006132:	78fb      	ldrb	r3, [r7, #3]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d115      	bne.n	8006164 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006144:	2001      	movs	r0, #1
 8006146:	f7fa ffa3 	bl	8001090 <HAL_Delay>
      ms++;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3301      	adds	r3, #1
 800614e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fa29 	bl	80065a8 <USB_GetMode>
 8006156:	4603      	mov	r3, r0
 8006158:	2b01      	cmp	r3, #1
 800615a:	d01e      	beq.n	800619a <USB_SetCurrentMode+0x84>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b31      	cmp	r3, #49	; 0x31
 8006160:	d9f0      	bls.n	8006144 <USB_SetCurrentMode+0x2e>
 8006162:	e01a      	b.n	800619a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d115      	bne.n	8006196 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006176:	2001      	movs	r0, #1
 8006178:	f7fa ff8a 	bl	8001090 <HAL_Delay>
      ms++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3301      	adds	r3, #1
 8006180:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa10 	bl	80065a8 <USB_GetMode>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d005      	beq.n	800619a <USB_SetCurrentMode+0x84>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b31      	cmp	r3, #49	; 0x31
 8006192:	d9f0      	bls.n	8006176 <USB_SetCurrentMode+0x60>
 8006194:	e001      	b.n	800619a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e005      	b.n	80061a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b32      	cmp	r3, #50	; 0x32
 800619e:	d101      	bne.n	80061a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e000      	b.n	80061a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061b0:	b084      	sub	sp, #16
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b086      	sub	sp, #24
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061ca:	2300      	movs	r3, #0
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	e009      	b.n	80061e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	3340      	adds	r3, #64	; 0x40
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	2200      	movs	r2, #0
 80061dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	3301      	adds	r3, #1
 80061e2:	613b      	str	r3, [r7, #16]
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	2b0e      	cmp	r3, #14
 80061e8:	d9f2      	bls.n	80061d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d11c      	bne.n	800622a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061fe:	f043 0302 	orr.w	r3, r3, #2
 8006202:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	e005      	b.n	8006236 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800623c:	461a      	mov	r2, r3
 800623e:	2300      	movs	r3, #0
 8006240:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006248:	4619      	mov	r1, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006250:	461a      	mov	r2, r3
 8006252:	680b      	ldr	r3, [r1, #0]
 8006254:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	2b01      	cmp	r3, #1
 800625a:	d10c      	bne.n	8006276 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	2b00      	cmp	r3, #0
 8006260:	d104      	bne.n	800626c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006262:	2100      	movs	r1, #0
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f965 	bl	8006534 <USB_SetDevSpeed>
 800626a:	e008      	b.n	800627e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800626c:	2101      	movs	r1, #1
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f960 	bl	8006534 <USB_SetDevSpeed>
 8006274:	e003      	b.n	800627e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006276:	2103      	movs	r1, #3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f95b 	bl	8006534 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800627e:	2110      	movs	r1, #16
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f8f3 	bl	800646c <USB_FlushTxFifo>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f91f 	bl	80064d4 <USB_FlushRxFifo>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a6:	461a      	mov	r2, r3
 80062a8:	2300      	movs	r3, #0
 80062aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b2:	461a      	mov	r2, r3
 80062b4:	2300      	movs	r3, #0
 80062b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062be:	461a      	mov	r2, r3
 80062c0:	2300      	movs	r3, #0
 80062c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]
 80062c8:	e043      	b.n	8006352 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062e0:	d118      	bne.n	8006314 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10a      	bne.n	80062fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f4:	461a      	mov	r2, r3
 80062f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	e013      	b.n	8006326 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630a:	461a      	mov	r2, r3
 800630c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	e008      	b.n	8006326 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006320:	461a      	mov	r2, r3
 8006322:	2300      	movs	r3, #0
 8006324:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006332:	461a      	mov	r2, r3
 8006334:	2300      	movs	r3, #0
 8006336:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006344:	461a      	mov	r2, r3
 8006346:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800634a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	3301      	adds	r3, #1
 8006350:	613b      	str	r3, [r7, #16]
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	429a      	cmp	r2, r3
 8006358:	d3b7      	bcc.n	80062ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800635a:	2300      	movs	r3, #0
 800635c:	613b      	str	r3, [r7, #16]
 800635e:	e043      	b.n	80063e8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006376:	d118      	bne.n	80063aa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10a      	bne.n	8006394 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638a:	461a      	mov	r2, r3
 800638c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	e013      	b.n	80063bc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a0:	461a      	mov	r2, r3
 80063a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	e008      	b.n	80063bc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b6:	461a      	mov	r2, r3
 80063b8:	2300      	movs	r3, #0
 80063ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c8:	461a      	mov	r2, r3
 80063ca:	2300      	movs	r3, #0
 80063cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063da:	461a      	mov	r2, r3
 80063dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	3301      	adds	r3, #1
 80063e6:	613b      	str	r3, [r7, #16]
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d3b7      	bcc.n	8006360 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006402:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006410:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d105      	bne.n	8006424 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	f043 0210 	orr.w	r2, r3, #16
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699a      	ldr	r2, [r3, #24]
 8006428:	4b0e      	ldr	r3, [pc, #56]	; (8006464 <USB_DevInit+0x2b4>)
 800642a:	4313      	orrs	r3, r2
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d005      	beq.n	8006442 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	f043 0208 	orr.w	r2, r3, #8
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006444:	2b01      	cmp	r3, #1
 8006446:	d105      	bne.n	8006454 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	699a      	ldr	r2, [r3, #24]
 800644c:	4b06      	ldr	r3, [pc, #24]	; (8006468 <USB_DevInit+0x2b8>)
 800644e:	4313      	orrs	r3, r2
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006454:	7dfb      	ldrb	r3, [r7, #23]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006460:	b004      	add	sp, #16
 8006462:	4770      	bx	lr
 8006464:	803c3800 	.word	0x803c3800
 8006468:	40000004 	.word	0x40000004

0800646c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3301      	adds	r3, #1
 800647e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4a13      	ldr	r2, [pc, #76]	; (80064d0 <USB_FlushTxFifo+0x64>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d901      	bls.n	800648c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e01b      	b.n	80064c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	daf2      	bge.n	800647a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	019b      	lsls	r3, r3, #6
 800649c:	f043 0220 	orr.w	r2, r3, #32
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3301      	adds	r3, #1
 80064a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4a08      	ldr	r2, [pc, #32]	; (80064d0 <USB_FlushTxFifo+0x64>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d901      	bls.n	80064b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e006      	b.n	80064c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d0f0      	beq.n	80064a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	00030d40 	.word	0x00030d40

080064d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3301      	adds	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4a11      	ldr	r2, [pc, #68]	; (8006530 <USB_FlushRxFifo+0x5c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d901      	bls.n	80064f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e018      	b.n	8006524 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	daf2      	bge.n	80064e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2210      	movs	r2, #16
 8006502:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3301      	adds	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4a08      	ldr	r2, [pc, #32]	; (8006530 <USB_FlushRxFifo+0x5c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d901      	bls.n	8006516 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e006      	b.n	8006524 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0310 	and.w	r3, r3, #16
 800651e:	2b10      	cmp	r3, #16
 8006520:	d0f0      	beq.n	8006504 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	00030d40 	.word	0x00030d40

08006534 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	68f9      	ldr	r1, [r7, #12]
 8006550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006554:	4313      	orrs	r3, r2
 8006556:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006580:	f023 0303 	bic.w	r3, r3, #3
 8006584:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006594:	f043 0302 	orr.w	r3, r3, #2
 8006598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	f003 0301 	and.w	r3, r3, #1
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3301      	adds	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4a13      	ldr	r2, [pc, #76]	; (8006628 <USB_CoreReset+0x64>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d901      	bls.n	80065e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e01b      	b.n	800661a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	daf2      	bge.n	80065d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f043 0201 	orr.w	r2, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3301      	adds	r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4a09      	ldr	r2, [pc, #36]	; (8006628 <USB_CoreReset+0x64>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d901      	bls.n	800660c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e006      	b.n	800661a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b01      	cmp	r3, #1
 8006616:	d0f0      	beq.n	80065fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	00030d40 	.word	0x00030d40

0800662c <memset>:
 800662c:	4402      	add	r2, r0
 800662e:	4603      	mov	r3, r0
 8006630:	4293      	cmp	r3, r2
 8006632:	d100      	bne.n	8006636 <memset+0xa>
 8006634:	4770      	bx	lr
 8006636:	f803 1b01 	strb.w	r1, [r3], #1
 800663a:	e7f9      	b.n	8006630 <memset+0x4>

0800663c <__libc_init_array>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	4d0d      	ldr	r5, [pc, #52]	; (8006674 <__libc_init_array+0x38>)
 8006640:	4c0d      	ldr	r4, [pc, #52]	; (8006678 <__libc_init_array+0x3c>)
 8006642:	1b64      	subs	r4, r4, r5
 8006644:	10a4      	asrs	r4, r4, #2
 8006646:	2600      	movs	r6, #0
 8006648:	42a6      	cmp	r6, r4
 800664a:	d109      	bne.n	8006660 <__libc_init_array+0x24>
 800664c:	4d0b      	ldr	r5, [pc, #44]	; (800667c <__libc_init_array+0x40>)
 800664e:	4c0c      	ldr	r4, [pc, #48]	; (8006680 <__libc_init_array+0x44>)
 8006650:	f000 f818 	bl	8006684 <_init>
 8006654:	1b64      	subs	r4, r4, r5
 8006656:	10a4      	asrs	r4, r4, #2
 8006658:	2600      	movs	r6, #0
 800665a:	42a6      	cmp	r6, r4
 800665c:	d105      	bne.n	800666a <__libc_init_array+0x2e>
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	f855 3b04 	ldr.w	r3, [r5], #4
 8006664:	4798      	blx	r3
 8006666:	3601      	adds	r6, #1
 8006668:	e7ee      	b.n	8006648 <__libc_init_array+0xc>
 800666a:	f855 3b04 	ldr.w	r3, [r5], #4
 800666e:	4798      	blx	r3
 8006670:	3601      	adds	r6, #1
 8006672:	e7f2      	b.n	800665a <__libc_init_array+0x1e>
 8006674:	080066dc 	.word	0x080066dc
 8006678:	080066dc 	.word	0x080066dc
 800667c:	080066dc 	.word	0x080066dc
 8006680:	080066e0 	.word	0x080066e0

08006684 <_init>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	bf00      	nop
 8006688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668a:	bc08      	pop	{r3}
 800668c:	469e      	mov	lr, r3
 800668e:	4770      	bx	lr

08006690 <_fini>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	bf00      	nop
 8006694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006696:	bc08      	pop	{r3}
 8006698:	469e      	mov	lr, r3
 800669a:	4770      	bx	lr
