
C_AMP_Blinky_12_01_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064e8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006780  08006780  00016780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067b8  080067b8  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080067b8  080067b8  000167b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067c0  080067c0  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067c0  080067c0  000167c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067c4  080067c4  000167c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080067c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080067d8  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08006838  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006b0  240000d0  08006898  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000780  08006898  00020780  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001850f  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000029e7  00000000  00000000  00038650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001038  00000000  00000000  0003b038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c84  00000000  00000000  0003c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003a46f  00000000  00000000  0003ccf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001510b  00000000  00000000  00077163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0017f5e5  00000000  00000000  0008c26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000044e0  00000000  00000000  0020b854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  0020fd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006768 	.word	0x08006768

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006768 	.word	0x08006768

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b30      	ldr	r3, [pc, #192]	; (80007d0 <main+0xd0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fa1d 	bl	8000b68 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fc53 	bl	8000fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f851 	bl	80007d8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <main+0xd0>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <main+0xd0>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <main+0xd0>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f001 fc09 	bl	8001f6c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fc1f 	bl	8001fa0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <main+0xd0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 f9ef 	bl	8000b68 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 f96d 	bl	8000a68 <MX_GPIO_Init>
  MX_ETH_Init();
 800078e:	f000 f8a1 	bl	80008d4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000792:	f000 f8eb 	bl	800096c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000796:	f000 f935 	bl	8000a04 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 800079a:	2201      	movs	r2, #1
 800079c:	2101      	movs	r1, #1
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <main+0xd4>)
 80007a0:	f001 fba8 	bl	8001ef4 <HAL_GPIO_WritePin>
	HAL_HSEM_Take(HSEM_ID_1, 0); // signal CM4 to UNSET LED
 80007a4:	2100      	movs	r1, #0
 80007a6:	2001      	movs	r0, #1
 80007a8:	f001 fbbe 	bl	8001f28 <HAL_HSEM_Take>
	HAL_Delay(500);
 80007ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b0:	f000 fca4 	bl	80010fc <HAL_Delay>

	HAL_HSEM_Release(HSEM_ID_1, 0); // signal CM4 to SET LED
 80007b4:	2100      	movs	r1, #0
 80007b6:	2001      	movs	r0, #1
 80007b8:	f001 fbf2 	bl	8001fa0 <HAL_HSEM_Release>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2101      	movs	r1, #1
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <main+0xd4>)
 80007c2:	f001 fb97 	bl	8001ef4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80007c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ca:	f000 fc97 	bl	80010fc <HAL_Delay>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 80007ce:	e7e4      	b.n	800079a <main+0x9a>
 80007d0:	58024400 	.word	0x58024400
 80007d4:	58020400 	.word	0x58020400

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	; 0x70
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	224c      	movs	r2, #76	; 0x4c
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f005 ff92 	bl	8006710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2220      	movs	r2, #32
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f005 ff8c 	bl	8006710 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007f8:	2004      	movs	r0, #4
 80007fa:	f001 fd2d 	bl	8002258 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <SystemClock_Config+0xf4>)
 8000804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000806:	4a31      	ldr	r2, [pc, #196]	; (80008cc <SystemClock_Config+0xf4>)
 8000808:	f023 0301 	bic.w	r3, r3, #1
 800080c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800080e:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <SystemClock_Config+0xf4>)
 8000810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <SystemClock_Config+0xf8>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000820:	4a2b      	ldr	r2, [pc, #172]	; (80008d0 <SystemClock_Config+0xf8>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <SystemClock_Config+0xf8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000834:	bf00      	nop
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <SystemClock_Config+0xf8>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800083e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000842:	d1f8      	bne.n	8000836 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000844:	2301      	movs	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000848:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000852:	2302      	movs	r3, #2
 8000854:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800085a:	2312      	movs	r3, #18
 800085c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800086a:	230c      	movs	r3, #12
 800086c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800086e:	2302      	movs	r3, #2
 8000870:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000872:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000876:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fd55 	bl	800232c <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000888:	f000 f96e 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	233f      	movs	r3, #63	; 0x3f
 800088e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2303      	movs	r3, #3
 8000892:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800089c:	2340      	movs	r3, #64	; 0x40
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008aa:	2340      	movs	r3, #64	; 0x40
 80008ac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2101      	movs	r1, #1
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 f994 	bl	8002be0 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008be:	f000 f953 	bl	8000b68 <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3770      	adds	r7, #112	; 0x70
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	58000400 	.word	0x58000400
 80008d0:	58024800 	.word	0x58024800

080008d4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_ETH_Init+0x80>)
 80008da:	4a1f      	ldr	r2, [pc, #124]	; (8000958 <MX_ETH_Init+0x84>)
 80008dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_ETH_Init+0x88>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_ETH_Init+0x88>)
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_ETH_Init+0x88>)
 80008ec:	22e1      	movs	r2, #225	; 0xe1
 80008ee:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_ETH_Init+0x88>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_ETH_Init+0x88>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_ETH_Init+0x88>)
 80008fe:	2200      	movs	r2, #0
 8000900:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_ETH_Init+0x80>)
 8000904:	4a15      	ldr	r2, [pc, #84]	; (800095c <MX_ETH_Init+0x88>)
 8000906:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_ETH_Init+0x80>)
 800090a:	2201      	movs	r2, #1
 800090c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_ETH_Init+0x80>)
 8000910:	4a13      	ldr	r2, [pc, #76]	; (8000960 <MX_ETH_Init+0x8c>)
 8000912:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_ETH_Init+0x80>)
 8000916:	4a13      	ldr	r2, [pc, #76]	; (8000964 <MX_ETH_Init+0x90>)
 8000918:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_ETH_Init+0x80>)
 800091c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000920:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000922:	480c      	ldr	r0, [pc, #48]	; (8000954 <MX_ETH_Init+0x80>)
 8000924:	f000 fd12 	bl	800134c <HAL_ETH_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800092e:	f000 f91b 	bl	8000b68 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000932:	2238      	movs	r2, #56	; 0x38
 8000934:	2100      	movs	r1, #0
 8000936:	480c      	ldr	r0, [pc, #48]	; (8000968 <MX_ETH_Init+0x94>)
 8000938:	f005 feea 	bl	8006710 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_ETH_Init+0x94>)
 800093e:	2221      	movs	r2, #33	; 0x21
 8000940:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_ETH_Init+0x94>)
 8000944:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000948:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <MX_ETH_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	24000124 	.word	0x24000124
 8000958:	40028000 	.word	0x40028000
 800095c:	24000774 	.word	0x24000774
 8000960:	24000070 	.word	0x24000070
 8000964:	24000010 	.word	0x24000010
 8000968:	240000ec 	.word	0x240000ec

0800096c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000972:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <MX_USART3_UART_Init+0x94>)
 8000974:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_USART3_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009b6:	f004 facb 	bl	8004f50 <HAL_UART_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009c0:	f000 f8d2 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c4:	2100      	movs	r1, #0
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009c8:	f005 facd 	bl	8005f66 <HAL_UARTEx_SetTxFifoThreshold>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009d2:	f000 f8c9 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4808      	ldr	r0, [pc, #32]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009da:	f005 fb02 	bl	8005fe2 <HAL_UARTEx_SetRxFifoThreshold>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009e4:	f000 f8c0 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009ea:	f005 fa83 	bl	8005ef4 <HAL_UARTEx_DisableFifoMode>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009f4:	f000 f8b8 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	240001d4 	.word	0x240001d4
 8000a00:	40004800 	.word	0x40004800

08000a04 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a10:	2209      	movs	r2, #9
 8000a12:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a16:	2202      	movs	r2, #2
 8000a18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4c:	f001 fabc 	bl	8001fc8 <HAL_PCD_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a56:	f000 f887 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	24000268 	.word	0x24000268
 8000a64:	40080000 	.word	0x40080000

08000a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	4b38      	ldr	r3, [pc, #224]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	4a36      	ldr	r2, [pc, #216]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8e:	4b34      	ldr	r3, [pc, #208]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9c:	4b30      	ldr	r3, [pc, #192]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2f      	ldr	r2, [pc, #188]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a27      	ldr	r2, [pc, #156]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	4a20      	ldr	r2, [pc, #128]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2101      	movs	r1, #1
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <MX_GPIO_Init+0xfc>)
 8000b38:	f001 f9dc 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_GPIO_Init+0xfc>)
 8000b54:	f001 f81e 	bl	8001b94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b58:	bf00      	nop
 8000b5a:	3730      	adds	r7, #48	; 0x30
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	58024400 	.word	0x58024400
 8000b64:	58020400 	.word	0x58020400

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_MspInit+0x30>)
 8000b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b80:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_MspInit+0x30>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_MspInit+0x30>)
 8000b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	58024400 	.word	0x58024400

08000ba8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a59      	ldr	r2, [pc, #356]	; (8000d2c <HAL_ETH_MspInit+0x184>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	f040 80ab 	bne.w	8000d22 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000bcc:	4b58      	ldr	r3, [pc, #352]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000bce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bd2:	4a57      	ldr	r2, [pc, #348]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bdc:	4b54      	ldr	r3, [pc, #336]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000bde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000be6:	623b      	str	r3, [r7, #32]
 8000be8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000bea:	4b51      	ldr	r3, [pc, #324]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bf0:	4a4f      	ldr	r2, [pc, #316]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bfa:	4b4d      	ldr	r3, [pc, #308]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c08:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000c0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c0e:	4a48      	ldr	r2, [pc, #288]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c18:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000c1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	61bb      	str	r3, [r7, #24]
 8000c24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	4a40      	ldr	r2, [pc, #256]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c36:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b3a      	ldr	r3, [pc, #232]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	4a39      	ldr	r2, [pc, #228]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c54:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	4a31      	ldr	r2, [pc, #196]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c72:	4b2f      	ldr	r3, [pc, #188]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	4a2a      	ldr	r2, [pc, #168]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c90:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <HAL_ETH_MspInit+0x188>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c9e:	2332      	movs	r3, #50	; 0x32
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cae:	230b      	movs	r3, #11
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	481e      	ldr	r0, [pc, #120]	; (8000d34 <HAL_ETH_MspInit+0x18c>)
 8000cba:	f000 ff6b 	bl	8001b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cbe:	2386      	movs	r3, #134	; 0x86
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cce:	230b      	movs	r3, #11
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4817      	ldr	r0, [pc, #92]	; (8000d38 <HAL_ETH_MspInit+0x190>)
 8000cda:	f000 ff5b 	bl	8001b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf0:	230b      	movs	r3, #11
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4810      	ldr	r0, [pc, #64]	; (8000d3c <HAL_ETH_MspInit+0x194>)
 8000cfc:	f000 ff4a 	bl	8001b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d12:	230b      	movs	r3, #11
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4808      	ldr	r0, [pc, #32]	; (8000d40 <HAL_ETH_MspInit+0x198>)
 8000d1e:	f000 ff39 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	3738      	adds	r7, #56	; 0x38
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40028000 	.word	0x40028000
 8000d30:	58024400 	.word	0x58024400
 8000d34:	58020800 	.word	0x58020800
 8000d38:	58020000 	.word	0x58020000
 8000d3c:	58020400 	.word	0x58020400
 8000d40:	58021800 	.word	0x58021800

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0ba      	sub	sp, #232	; 0xe8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	22c0      	movs	r2, #192	; 0xc0
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f005 fcd3 	bl	8006710 <memset>
  if(huart->Instance==USART3)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a27      	ldr	r2, [pc, #156]	; (8000e0c <HAL_UART_MspInit+0xc8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d146      	bne.n	8000e02 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d74:	f04f 0202 	mov.w	r2, #2
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fab4 	bl	80032f8 <HAL_RCCEx_PeriphCLKConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d96:	f7ff fee7 	bl	8000b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <HAL_UART_MspInit+0xcc>)
 8000d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <HAL_UART_MspInit+0xcc>)
 8000da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000daa:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_UART_MspInit+0xcc>)
 8000dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_UART_MspInit+0xcc>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <HAL_UART_MspInit+0xcc>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_UART_MspInit+0xcc>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000dd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df0:	2307      	movs	r3, #7
 8000df2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <HAL_UART_MspInit+0xd0>)
 8000dfe:	f000 fec9 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	37e8      	adds	r7, #232	; 0xe8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40004800 	.word	0x40004800
 8000e10:	58024400 	.word	0x58024400
 8000e14:	58020c00 	.word	0x58020c00

08000e18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0ba      	sub	sp, #232	; 0xe8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	22c0      	movs	r2, #192	; 0xc0
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f005 fc69 	bl	8006710 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a38      	ldr	r2, [pc, #224]	; (8000f24 <HAL_PCD_MspInit+0x10c>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d169      	bne.n	8000f1c <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000e58:	2312      	movs	r3, #18
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000e60:	2303      	movs	r3, #3
 8000e62:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000e64:	2302      	movs	r3, #2
 8000e66:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000e68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000e6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e72:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000e74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 fa39 	bl	80032f8 <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000e8c:	f7ff fe6c 	bl	8000b68 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e90:	f001 fa3c 	bl	800230c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <HAL_PCD_MspInit+0x110>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9a:	4a23      	ldr	r2, [pc, #140]	; (8000f28 <HAL_PCD_MspInit+0x110>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea4:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <HAL_PCD_MspInit+0x110>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000eb2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ecc:	230a      	movs	r3, #10
 8000ece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4814      	ldr	r0, [pc, #80]	; (8000f2c <HAL_PCD_MspInit+0x114>)
 8000eda:	f000 fe5b 	bl	8001b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <HAL_PCD_MspInit+0x114>)
 8000efa:	f000 fe4b 	bl	8001b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_PCD_MspInit+0x110>)
 8000f00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f04:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_PCD_MspInit+0x110>)
 8000f06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_PCD_MspInit+0x110>)
 8000f10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	37e8      	adds	r7, #232	; 0xe8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40080000 	.word	0x40080000
 8000f28:	58024400 	.word	0x58024400
 8000f2c:	58020000 	.word	0x58020000

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <NMI_Handler+0x4>

08000f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler+0x4>

08000f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7c:	f000 f89e 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f88:	f7ff fb24 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f8e:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa4:	4c0a      	ldr	r4, [pc, #40]	; (8000fd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f005 fbb5 	bl	8006720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb6:	f7ff fba3 	bl	8000700 <main>
  bx  lr
 8000fba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fbc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fc4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fc8:	080067c8 	.word	0x080067c8
  ldr r2, =_sbss
 8000fcc:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000fd0:	24000780 	.word	0x24000780

08000fd4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC3_IRQHandler>
	...

08000fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fde:	2003      	movs	r0, #3
 8000fe0:	f000 f982 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fe4:	f001 ffb2 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_Init+0x68>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	0a1b      	lsrs	r3, r3, #8
 8000ff0:	f003 030f 	and.w	r3, r3, #15
 8000ff4:	4913      	ldr	r1, [pc, #76]	; (8001044 <HAL_Init+0x6c>)
 8000ff6:	5ccb      	ldrb	r3, [r1, r3]
 8000ff8:	f003 031f 	and.w	r3, r3, #31
 8000ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8001000:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_Init+0x68>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <HAL_Init+0x6c>)
 800100c:	5cd3      	ldrb	r3, [r2, r3]
 800100e:	f003 031f 	and.w	r3, r3, #31
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	fa22 f303 	lsr.w	r3, r2, r3
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_Init+0x70>)
 800101a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_Init+0x74>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f814 	bl	8001050 <HAL_InitTick>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e002      	b.n	8001038 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001032:	f7ff fd9f 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	58024400 	.word	0x58024400
 8001044:	08006780 	.word	0x08006780
 8001048:	24000004 	.word	0x24000004
 800104c:	24000000 	.word	0x24000000

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_InitTick+0x60>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e021      	b.n	80010a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <HAL_InitTick+0x64>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_InitTick+0x60>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f959 	bl	8001332 <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f000 f931 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_InitTick+0x68>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2400000c 	.word	0x2400000c
 80010b4:	24000000 	.word	0x24000000
 80010b8:	24000008 	.word	0x24000008

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	2400000c 	.word	0x2400000c
 80010e0:	2400077c 	.word	0x2400077c

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	2400077c 	.word	0x2400077c

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2400000c 	.word	0x2400000c

08001144 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <HAL_GetREVID+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	0c1b      	lsrs	r3, r3, #16
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	5c001000 	.word	0x5c001000

0800115c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800116c:	4904      	ldr	r1, [pc, #16]	; (8001180 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	58000400 	.word	0x58000400

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	05fa0000 	.word	0x05fa0000

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	; (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	; (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f7ff ff8e 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff47 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff5e 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff90 	bl	800123c <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5f 	bl	80011e8 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffb2 	bl	80012a4 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e0cf      	b.n	80014fe <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001364:	2b00      	cmp	r3, #0
 8001366:	d106      	bne.n	8001376 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2223      	movs	r2, #35	; 0x23
 800136c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fc19 	bl	8000ba8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b64      	ldr	r3, [pc, #400]	; (8001508 <HAL_ETH_Init+0x1bc>)
 8001378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800137c:	4a62      	ldr	r2, [pc, #392]	; (8001508 <HAL_ETH_Init+0x1bc>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001386:	4b60      	ldr	r3, [pc, #384]	; (8001508 <HAL_ETH_Init+0x1bc>)
 8001388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7a1b      	ldrb	r3, [r3, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d103      	bne.n	80013a4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff fedd 	bl	800115c <HAL_SYSCFG_ETHInterfaceSelect>
 80013a2:	e003      	b.n	80013ac <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80013a4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80013a8:	f7ff fed8 	bl	800115c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80013ac:	4b57      	ldr	r3, [pc, #348]	; (800150c <HAL_ETH_Init+0x1c0>)
 80013ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c8:	f7ff fe8c 	bl	80010e4 <HAL_GetTick>
 80013cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013ce:	e011      	b.n	80013f4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013d0:	f7ff fe88 	bl	80010e4 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013de:	d909      	bls.n	80013f4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2204      	movs	r2, #4
 80013e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	22e0      	movs	r2, #224	; 0xe0
 80013ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e084      	b.n	80014fe <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1e4      	bne.n	80013d0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f886 	bl	8001518 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800140c:	f001 ff18 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8001410:	4603      	mov	r3, r0
 8001412:	4a3f      	ldr	r2, [pc, #252]	; (8001510 <HAL_ETH_Init+0x1c4>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	0c9a      	lsrs	r2, r3, #18
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3a01      	subs	r2, #1
 8001420:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fa71 	bl	800190c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001432:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001436:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001442:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001446:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	22e0      	movs	r2, #224	; 0xe0
 8001462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e049      	b.n	80014fe <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001472:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <HAL_ETH_Init+0x1c8>)
 8001478:	4013      	ands	r3, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6952      	ldr	r2, [r2, #20]
 800147e:	0051      	lsls	r1, r2, #1
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	430b      	orrs	r3, r1
 8001486:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800148a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fad9 	bl	8001a46 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fb1f 	bl	8001ad8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	3305      	adds	r3, #5
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	021a      	lsls	r2, r3, #8
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	3304      	adds	r3, #4
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	3303      	adds	r3, #3
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	061a      	lsls	r2, r3, #24
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	3302      	adds	r3, #2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	041b      	lsls	r3, r3, #16
 80014cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	3301      	adds	r3, #1
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014e6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2210      	movs	r2, #16
 80014f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	58024400 	.word	0x58024400
 800150c:	58000400 	.word	0x58000400
 8001510:	431bde83 	.word	0x431bde83
 8001514:	ffff8001 	.word	0xffff8001

08001518 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001528:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001530:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001532:	f001 fe85 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8001536:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d908      	bls.n	8001552 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d804      	bhi.n	8001552 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e027      	b.n	80015a2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	4a18      	ldr	r2, [pc, #96]	; (80015b8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d908      	bls.n	800156c <HAL_ETH_SetMDIOClockRange+0x54>
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	4a17      	ldr	r2, [pc, #92]	; (80015bc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d204      	bcs.n	800156c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	e01a      	b.n	80015a2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d303      	bcc.n	800157c <HAL_ETH_SetMDIOClockRange+0x64>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d911      	bls.n	80015a0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d908      	bls.n	8001596 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d804      	bhi.n	8001596 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	e005      	b.n	80015a2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	e000      	b.n	80015a2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80015a0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	01312cff 	.word	0x01312cff
 80015b8:	02160ebf 	.word	0x02160ebf
 80015bc:	03938700 	.word	0x03938700
 80015c0:	05f5e0ff 	.word	0x05f5e0ff
 80015c4:	08f0d17f 	.word	0x08f0d17f

080015c8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80015da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	791b      	ldrb	r3, [r3, #4]
 80015e0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80015e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	7b1b      	ldrb	r3, [r3, #12]
 80015e8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80015ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	7b5b      	ldrb	r3, [r3, #13]
 80015f0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80015f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	7b9b      	ldrb	r3, [r3, #14]
 80015f8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80015fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	7bdb      	ldrb	r3, [r3, #15]
 8001600:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001602:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	7c12      	ldrb	r2, [r2, #16]
 8001608:	2a00      	cmp	r2, #0
 800160a:	d102      	bne.n	8001612 <ETH_SetMACConfig+0x4a>
 800160c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001610:	e000      	b.n	8001614 <ETH_SetMACConfig+0x4c>
 8001612:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001614:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	7c52      	ldrb	r2, [r2, #17]
 800161a:	2a00      	cmp	r2, #0
 800161c:	d102      	bne.n	8001624 <ETH_SetMACConfig+0x5c>
 800161e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001622:	e000      	b.n	8001626 <ETH_SetMACConfig+0x5e>
 8001624:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001626:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	7c9b      	ldrb	r3, [r3, #18]
 800162c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800162e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001634:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800163a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	7f1b      	ldrb	r3, [r3, #28]
 8001640:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001642:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	7f5b      	ldrb	r3, [r3, #29]
 8001648:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800164a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	7f92      	ldrb	r2, [r2, #30]
 8001650:	2a00      	cmp	r2, #0
 8001652:	d102      	bne.n	800165a <ETH_SetMACConfig+0x92>
 8001654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001658:	e000      	b.n	800165c <ETH_SetMACConfig+0x94>
 800165a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800165c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	7fdb      	ldrb	r3, [r3, #31]
 8001662:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001664:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	f892 2020 	ldrb.w	r2, [r2, #32]
 800166c:	2a00      	cmp	r2, #0
 800166e:	d102      	bne.n	8001676 <ETH_SetMACConfig+0xae>
 8001670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001674:	e000      	b.n	8001678 <ETH_SetMACConfig+0xb0>
 8001676:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001678:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800167e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001686:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001688:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800168e:	4313      	orrs	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b56      	ldr	r3, [pc, #344]	; (80017f4 <ETH_SetMACConfig+0x22c>)
 800169a:	4013      	ands	r3, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	68f9      	ldr	r1, [r7, #12]
 80016a2:	430b      	orrs	r3, r1
 80016a4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016aa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016b2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016bc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80016c6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80016d0:	2a00      	cmp	r2, #0
 80016d2:	d102      	bne.n	80016da <ETH_SetMACConfig+0x112>
 80016d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016d8:	e000      	b.n	80016dc <ETH_SetMACConfig+0x114>
 80016da:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016dc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	4b42      	ldr	r3, [pc, #264]	; (80017f8 <ETH_SetMACConfig+0x230>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	68f9      	ldr	r1, [r7, #12]
 80016f6:	430b      	orrs	r3, r1
 80016f8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001700:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001706:	4313      	orrs	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <ETH_SetMACConfig+0x234>)
 8001712:	4013      	ands	r3, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	430b      	orrs	r3, r1
 800171c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001724:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800172a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001732:	2a00      	cmp	r2, #0
 8001734:	d101      	bne.n	800173a <ETH_SetMACConfig+0x172>
 8001736:	2280      	movs	r2, #128	; 0x80
 8001738:	e000      	b.n	800173c <ETH_SetMACConfig+0x174>
 800173a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800173c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001742:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001744:	4313      	orrs	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800174e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001752:	4013      	ands	r3, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	68f9      	ldr	r1, [r7, #12]
 800175a:	430b      	orrs	r3, r1
 800175c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001764:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800176c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800176e:	4313      	orrs	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177a:	f023 0103 	bic.w	r1, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	430a      	orrs	r2, r1
 8001786:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001792:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d101      	bne.n	80017b6 <ETH_SetMACConfig+0x1ee>
 80017b2:	2240      	movs	r2, #64	; 0x40
 80017b4:	e000      	b.n	80017b8 <ETH_SetMACConfig+0x1f0>
 80017b6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80017b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80017c0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80017ca:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80017cc:	4313      	orrs	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80017d8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	00048083 	.word	0x00048083
 80017f8:	c0f88000 	.word	0xc0f88000
 80017fc:	fffffef0 	.word	0xfffffef0

08001800 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <ETH_SetDMAConfig+0xf8>)
 8001816:	4013      	ands	r3, r2
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	6811      	ldr	r1, [r2, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	430b      	orrs	r3, r1
 8001822:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001826:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	791b      	ldrb	r3, [r3, #4]
 800182c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001832:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	7b1b      	ldrb	r3, [r3, #12]
 8001838:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <ETH_SetDMAConfig+0xfc>)
 800184a:	4013      	ands	r3, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	430b      	orrs	r3, r1
 8001854:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001858:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	7b5b      	ldrb	r3, [r3, #13]
 800185e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001864:	4313      	orrs	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001870:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001874:	4b22      	ldr	r3, [pc, #136]	; (8001900 <ETH_SetDMAConfig+0x100>)
 8001876:	4013      	ands	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	68f9      	ldr	r1, [r7, #12]
 800187e:	430b      	orrs	r3, r1
 8001880:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001884:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	7d1b      	ldrb	r3, [r3, #20]
 8001890:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001892:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	7f5b      	ldrb	r3, [r3, #29]
 8001898:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800189a:	4313      	orrs	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <ETH_SetDMAConfig+0x104>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	68f9      	ldr	r1, [r7, #12]
 80018b4:	430b      	orrs	r3, r1
 80018b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018ba:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	7f1b      	ldrb	r3, [r3, #28]
 80018c2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <ETH_SetDMAConfig+0x108>)
 80018da:	4013      	ands	r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	68f9      	ldr	r1, [r7, #12]
 80018e2:	430b      	orrs	r3, r1
 80018e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018e8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	ffff87fd 	.word	0xffff87fd
 80018fc:	ffff2ffe 	.word	0xffff2ffe
 8001900:	fffec000 	.word	0xfffec000
 8001904:	ffc0efef 	.word	0xffc0efef
 8001908:	7fc0ffff 	.word	0x7fc0ffff

0800190c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0a4      	sub	sp, #144	; 0x90
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001914:	2301      	movs	r3, #1
 8001916:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800191a:	2300      	movs	r3, #0
 800191c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800192a:	2301      	movs	r3, #1
 800192c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001930:	2301      	movs	r3, #1
 8001932:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001936:	2301      	movs	r3, #1
 8001938:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001942:	2301      	movs	r3, #1
 8001944:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001954:	2300      	movs	r3, #0
 8001956:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001964:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001968:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001974:	2301      	movs	r3, #1
 8001976:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001986:	2300      	movs	r3, #0
 8001988:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800198a:	2300      	movs	r3, #0
 800198c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800198e:	2300      	movs	r3, #0
 8001990:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800199e:	2301      	movs	r3, #1
 80019a0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80019a4:	2320      	movs	r3, #32
 80019a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80019aa:	2301      	movs	r3, #1
 80019ac:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80019b6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019c0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80019c8:	2302      	movs	r3, #2
 80019ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80019e0:	2301      	movs	r3, #1
 80019e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80019e6:	2300      	movs	r3, #0
 80019e8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80019f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fde6 	bl	80015c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80019fc:	2301      	movs	r3, #1
 80019fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a00:	2301      	movs	r3, #1
 8001a02:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a16:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a1a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a24:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001a2c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	4619      	mov	r1, r3
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff fee1 	bl	8001800 <ETH_SetDMAConfig>
}
 8001a3e:	bf00      	nop
 8001a40:	3790      	adds	r7, #144	; 0x90
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b085      	sub	sp, #20
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	e01d      	b.n	8001a90 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68d9      	ldr	r1, [r3, #12]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	3206      	adds	r2, #6
 8001a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d9de      	bls.n	8001a54 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e023      	b.n	8001b2e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6919      	ldr	r1, [r3, #16]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	440b      	add	r3, r1
 8001af6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2200      	movs	r2, #0
 8001b02:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	3212      	adds	r2, #18
 8001b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d9d8      	bls.n	8001ae6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b82:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	; 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ba2:	4b89      	ldr	r3, [pc, #548]	; (8001dc8 <HAL_GPIO_Init+0x234>)
 8001ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ba6:	e194      	b.n	8001ed2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	2101      	movs	r1, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 8186 	beq.w	8001ecc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d005      	beq.n	8001bd8 <HAL_GPIO_Init+0x44>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d130      	bne.n	8001c3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c0e:	2201      	movs	r2, #1
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	f003 0201 	and.w	r2, r3, #1
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d017      	beq.n	8001c76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d123      	bne.n	8001cca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	220f      	movs	r2, #15
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	08da      	lsrs	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3208      	adds	r2, #8
 8001cc4:	69b9      	ldr	r1, [r7, #24]
 8001cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0203 	and.w	r2, r3, #3
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80e0 	beq.w	8001ecc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <HAL_GPIO_Init+0x238>)
 8001d0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d12:	4a2e      	ldr	r2, [pc, #184]	; (8001dcc <HAL_GPIO_Init+0x238>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d1c:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <HAL_GPIO_Init+0x238>)
 8001d1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2a:	4a29      	ldr	r2, [pc, #164]	; (8001dd0 <HAL_GPIO_Init+0x23c>)
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	220f      	movs	r2, #15
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a20      	ldr	r2, [pc, #128]	; (8001dd4 <HAL_GPIO_Init+0x240>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d052      	beq.n	8001dfc <HAL_GPIO_Init+0x268>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <HAL_GPIO_Init+0x244>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d031      	beq.n	8001dc2 <HAL_GPIO_Init+0x22e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a1e      	ldr	r2, [pc, #120]	; (8001ddc <HAL_GPIO_Init+0x248>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d02b      	beq.n	8001dbe <HAL_GPIO_Init+0x22a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <HAL_GPIO_Init+0x24c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d025      	beq.n	8001dba <HAL_GPIO_Init+0x226>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <HAL_GPIO_Init+0x250>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d01f      	beq.n	8001db6 <HAL_GPIO_Init+0x222>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <HAL_GPIO_Init+0x254>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d019      	beq.n	8001db2 <HAL_GPIO_Init+0x21e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a1a      	ldr	r2, [pc, #104]	; (8001dec <HAL_GPIO_Init+0x258>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_GPIO_Init+0x21a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <HAL_GPIO_Init+0x25c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00d      	beq.n	8001daa <HAL_GPIO_Init+0x216>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a18      	ldr	r2, [pc, #96]	; (8001df4 <HAL_GPIO_Init+0x260>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d007      	beq.n	8001da6 <HAL_GPIO_Init+0x212>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a17      	ldr	r2, [pc, #92]	; (8001df8 <HAL_GPIO_Init+0x264>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d101      	bne.n	8001da2 <HAL_GPIO_Init+0x20e>
 8001d9e:	2309      	movs	r3, #9
 8001da0:	e02d      	b.n	8001dfe <HAL_GPIO_Init+0x26a>
 8001da2:	230a      	movs	r3, #10
 8001da4:	e02b      	b.n	8001dfe <HAL_GPIO_Init+0x26a>
 8001da6:	2308      	movs	r3, #8
 8001da8:	e029      	b.n	8001dfe <HAL_GPIO_Init+0x26a>
 8001daa:	2307      	movs	r3, #7
 8001dac:	e027      	b.n	8001dfe <HAL_GPIO_Init+0x26a>
 8001dae:	2306      	movs	r3, #6
 8001db0:	e025      	b.n	8001dfe <HAL_GPIO_Init+0x26a>
 8001db2:	2305      	movs	r3, #5
 8001db4:	e023      	b.n	8001dfe <HAL_GPIO_Init+0x26a>
 8001db6:	2304      	movs	r3, #4
 8001db8:	e021      	b.n	8001dfe <HAL_GPIO_Init+0x26a>
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e01f      	b.n	8001dfe <HAL_GPIO_Init+0x26a>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e01d      	b.n	8001dfe <HAL_GPIO_Init+0x26a>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e01b      	b.n	8001dfe <HAL_GPIO_Init+0x26a>
 8001dc6:	bf00      	nop
 8001dc8:	58000080 	.word	0x58000080
 8001dcc:	58024400 	.word	0x58024400
 8001dd0:	58000400 	.word	0x58000400
 8001dd4:	58020000 	.word	0x58020000
 8001dd8:	58020400 	.word	0x58020400
 8001ddc:	58020800 	.word	0x58020800
 8001de0:	58020c00 	.word	0x58020c00
 8001de4:	58021000 	.word	0x58021000
 8001de8:	58021400 	.word	0x58021400
 8001dec:	58021800 	.word	0x58021800
 8001df0:	58021c00 	.word	0x58021c00
 8001df4:	58022000 	.word	0x58022000
 8001df8:	58022400 	.word	0x58022400
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	f002 0203 	and.w	r2, r2, #3
 8001e04:	0092      	lsls	r2, r2, #2
 8001e06:	4093      	lsls	r3, r2
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e0e:	4938      	ldr	r1, [pc, #224]	; (8001ef0 <HAL_GPIO_Init+0x35c>)
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f47f ae63 	bne.w	8001ba8 <HAL_GPIO_Init+0x14>
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	bf00      	nop
 8001ee6:	3724      	adds	r7, #36	; 0x24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	58000400 	.word	0x58000400

08001ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
 8001f00:	4613      	mov	r3, r2
 8001f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f04:	787b      	ldrb	r3, [r7, #1]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0a:	887a      	ldrh	r2, [r7, #2]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f10:	e003      	b.n	8001f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f12:	887b      	ldrh	r3, [r7, #2]
 8001f14:	041a      	lsls	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	619a      	str	r2, [r3, #24]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8001f32:	490c      	ldr	r1, [pc, #48]	; (8001f64 <HAL_HSEM_Take+0x3c>)
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <HAL_HSEM_Take+0x40>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8001f40:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <HAL_HSEM_Take+0x3c>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f48:	6839      	ldr	r1, [r7, #0]
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <HAL_HSEM_Take+0x40>)
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d101      	bne.n	8001f56 <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e000      	b.n	8001f58 <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	58026400 	.word	0x58026400
 8001f68:	80000300 	.word	0x80000300

08001f6c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001f74:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <HAL_HSEM_FastTake+0x2c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3320      	adds	r3, #32
 8001f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7e:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <HAL_HSEM_FastTake+0x30>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d101      	bne.n	8001f88 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e000      	b.n	8001f8a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	58026400 	.word	0x58026400
 8001f9c:	80000300 	.word	0x80000300

08001fa0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001faa:	4906      	ldr	r1, [pc, #24]	; (8001fc4 <HAL_HSEM_Release+0x24>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	58026400 	.word	0x58026400

08001fc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fca:	b08f      	sub	sp, #60	; 0x3c
 8001fcc:	af0a      	add	r7, sp, #40	; 0x28
 8001fce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e116      	b.n	8002208 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d106      	bne.n	8001ffa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7fe ff0f 	bl	8000e18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f004 f8dd 	bl	80061d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	687e      	ldr	r6, [r7, #4]
 8002026:	466d      	mov	r5, sp
 8002028:	f106 0410 	add.w	r4, r6, #16
 800202c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002034:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002038:	e885 0003 	stmia.w	r5, {r0, r1}
 800203c:	1d33      	adds	r3, r6, #4
 800203e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002040:	6838      	ldr	r0, [r7, #0]
 8002042:	f004 f85b 	bl	80060fc <USB_CoreInit>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0d7      	b.n	8002208 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f004 f8cb 	bl	80061fa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	e04a      	b.n	8002100 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	333d      	adds	r3, #61	; 0x3d
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	333c      	adds	r3, #60	; 0x3c
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	b298      	uxth	r0, r3
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3356      	adds	r3, #86	; 0x56
 80020a6:	4602      	mov	r2, r0
 80020a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	3340      	adds	r3, #64	; 0x40
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	3344      	adds	r3, #68	; 0x44
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3348      	adds	r3, #72	; 0x48
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	334c      	adds	r3, #76	; 0x4c
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	3301      	adds	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	429a      	cmp	r2, r3
 8002108:	d3af      	bcc.n	800206a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	e044      	b.n	800219a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	3301      	adds	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d3b5      	bcc.n	8002110 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	687e      	ldr	r6, [r7, #4]
 80021ac:	466d      	mov	r5, sp
 80021ae:	f106 0410 	add.w	r4, r6, #16
 80021b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021be:	e885 0003 	stmia.w	r5, {r0, r1}
 80021c2:	1d33      	adds	r3, r6, #4
 80021c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c6:	6838      	ldr	r0, [r7, #0]
 80021c8:	f004 f864 	bl	8006294 <USB_DevInit>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e014      	b.n	8002208 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d102      	bne.n	80021fc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f80a 	bl	8002210 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f004 fa22 	bl	800664a <USB_DevDisconnect>

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002210 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_PCDEx_ActivateLPM+0x44>)
 8002240:	4313      	orrs	r3, r2
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	10000003 	.word	0x10000003

08002258 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002260:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_PWREx_ConfigSupply+0xb0>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	2b06      	cmp	r3, #6
 800226a:	d00a      	beq.n	8002282 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800226c:	4b26      	ldr	r3, [pc, #152]	; (8002308 <HAL_PWREx_ConfigSupply+0xb0>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	429a      	cmp	r2, r3
 8002278:	d001      	beq.n	800227e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e040      	b.n	8002300 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e03e      	b.n	8002300 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002282:	4b21      	ldr	r3, [pc, #132]	; (8002308 <HAL_PWREx_ConfigSupply+0xb0>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800228a:	491f      	ldr	r1, [pc, #124]	; (8002308 <HAL_PWREx_ConfigSupply+0xb0>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4313      	orrs	r3, r2
 8002290:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002292:	f7fe ff27 	bl	80010e4 <HAL_GetTick>
 8002296:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002298:	e009      	b.n	80022ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800229a:	f7fe ff23 	bl	80010e4 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022a8:	d901      	bls.n	80022ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e028      	b.n	8002300 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <HAL_PWREx_ConfigSupply+0xb0>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ba:	d1ee      	bne.n	800229a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b1e      	cmp	r3, #30
 80022c0:	d008      	beq.n	80022d4 <HAL_PWREx_ConfigSupply+0x7c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b2e      	cmp	r3, #46	; 0x2e
 80022c6:	d005      	beq.n	80022d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b1d      	cmp	r3, #29
 80022cc:	d002      	beq.n	80022d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b2d      	cmp	r3, #45	; 0x2d
 80022d2:	d114      	bne.n	80022fe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80022d4:	f7fe ff06 	bl	80010e4 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80022da:	e009      	b.n	80022f0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022dc:	f7fe ff02 	bl	80010e4 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ea:	d901      	bls.n	80022f0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e007      	b.n	8002300 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_PWREx_ConfigSupply+0xb0>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fc:	d1ee      	bne.n	80022dc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	58024800 	.word	0x58024800

0800230c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a04      	ldr	r2, [pc, #16]	; (8002328 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231a:	60d3      	str	r3, [r2, #12]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	58024800 	.word	0x58024800

0800232c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	; 0x30
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	f000 bc48 	b.w	8002bd0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8088 	beq.w	800245e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234e:	4b99      	ldr	r3, [pc, #612]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002358:	4b96      	ldr	r3, [pc, #600]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002360:	2b10      	cmp	r3, #16
 8002362:	d007      	beq.n	8002374 <HAL_RCC_OscConfig+0x48>
 8002364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002366:	2b18      	cmp	r3, #24
 8002368:	d111      	bne.n	800238e <HAL_RCC_OscConfig+0x62>
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d10c      	bne.n	800238e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	4b8f      	ldr	r3, [pc, #572]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d06d      	beq.n	800245c <HAL_RCC_OscConfig+0x130>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d169      	bne.n	800245c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	f000 bc21 	b.w	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x7a>
 8002398:	4b86      	ldr	r3, [pc, #536]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a85      	ldr	r2, [pc, #532]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800239e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	e02e      	b.n	8002404 <HAL_RCC_OscConfig+0xd8>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x9c>
 80023ae:	4b81      	ldr	r3, [pc, #516]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a80      	ldr	r2, [pc, #512]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b7e      	ldr	r3, [pc, #504]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7d      	ldr	r2, [pc, #500]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e01d      	b.n	8002404 <HAL_RCC_OscConfig+0xd8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0xc0>
 80023d2:	4b78      	ldr	r3, [pc, #480]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a77      	ldr	r2, [pc, #476]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b75      	ldr	r3, [pc, #468]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a74      	ldr	r2, [pc, #464]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0xd8>
 80023ec:	4b71      	ldr	r3, [pc, #452]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a70      	ldr	r2, [pc, #448]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b6e      	ldr	r3, [pc, #440]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a6d      	ldr	r2, [pc, #436]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d013      	beq.n	8002434 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe fe6a 	bl	80010e4 <HAL_GetTick>
 8002410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002414:	f7fe fe66 	bl	80010e4 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e3d4      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002426:	4b63      	ldr	r3, [pc, #396]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0xe8>
 8002432:	e014      	b.n	800245e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe fe56 	bl	80010e4 <HAL_GetTick>
 8002438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800243c:	f7fe fe52 	bl	80010e4 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e3c0      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800244e:	4b59      	ldr	r3, [pc, #356]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x110>
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 80ca 	beq.w	8002600 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246c:	4b51      	ldr	r3, [pc, #324]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002474:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002476:	4b4f      	ldr	r3, [pc, #316]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <HAL_RCC_OscConfig+0x166>
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	2b18      	cmp	r3, #24
 8002486:	d156      	bne.n	8002536 <HAL_RCC_OscConfig+0x20a>
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d151      	bne.n	8002536 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002492:	4b48      	ldr	r3, [pc, #288]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x17e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e392      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024aa:	4b42      	ldr	r3, [pc, #264]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 0219 	bic.w	r2, r3, #25
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	493f      	ldr	r1, [pc, #252]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7fe fe12 	bl	80010e4 <HAL_GetTick>
 80024c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c4:	f7fe fe0e 	bl	80010e4 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e37c      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024d6:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e2:	f7fe fe2f 	bl	8001144 <HAL_GetREVID>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d817      	bhi.n	8002520 <HAL_RCC_OscConfig+0x1f4>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	2b40      	cmp	r3, #64	; 0x40
 80024f6:	d108      	bne.n	800250a <HAL_RCC_OscConfig+0x1de>
 80024f8:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002500:	4a2c      	ldr	r2, [pc, #176]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002506:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002508:	e07a      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250a:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	031b      	lsls	r3, r3, #12
 8002518:	4926      	ldr	r1, [pc, #152]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800251e:	e06f      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	4921      	ldr	r1, [pc, #132]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002534:	e064      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d047      	beq.n	80025ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 0219 	bic.w	r2, r3, #25
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	491a      	ldr	r1, [pc, #104]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fdc8 	bl	80010e4 <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002558:	f7fe fdc4 	bl	80010e4 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e332      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	f7fe fde5 	bl	8001144 <HAL_GetREVID>
 800257a:	4603      	mov	r3, r0
 800257c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002580:	4293      	cmp	r3, r2
 8002582:	d819      	bhi.n	80025b8 <HAL_RCC_OscConfig+0x28c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b40      	cmp	r3, #64	; 0x40
 800258a:	d108      	bne.n	800259e <HAL_RCC_OscConfig+0x272>
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259a:	6053      	str	r3, [r2, #4]
 800259c:	e030      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	031b      	lsls	r3, r3, #12
 80025ac:	4901      	ldr	r1, [pc, #4]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
 80025b2:	e025      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
 80025b4:	58024400 	.word	0x58024400
 80025b8:	4b9a      	ldr	r3, [pc, #616]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	061b      	lsls	r3, r3, #24
 80025c6:	4997      	ldr	r1, [pc, #604]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
 80025cc:	e018      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ce:	4b95      	ldr	r3, [pc, #596]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a94      	ldr	r2, [pc, #592]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7fe fd83 	bl	80010e4 <HAL_GetTick>
 80025de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e2:	f7fe fd7f 	bl	80010e4 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e2ed      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025f4:	4b8b      	ldr	r3, [pc, #556]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80a9 	beq.w	8002760 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	4b85      	ldr	r3, [pc, #532]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002616:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002618:	4b82      	ldr	r3, [pc, #520]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d007      	beq.n	8002634 <HAL_RCC_OscConfig+0x308>
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b18      	cmp	r3, #24
 8002628:	d13a      	bne.n	80026a0 <HAL_RCC_OscConfig+0x374>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d135      	bne.n	80026a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002634:	4b7b      	ldr	r3, [pc, #492]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_OscConfig+0x320>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b80      	cmp	r3, #128	; 0x80
 8002646:	d001      	beq.n	800264c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e2c1      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800264c:	f7fe fd7a 	bl	8001144 <HAL_GetREVID>
 8002650:	4603      	mov	r3, r0
 8002652:	f241 0203 	movw	r2, #4099	; 0x1003
 8002656:	4293      	cmp	r3, r2
 8002658:	d817      	bhi.n	800268a <HAL_RCC_OscConfig+0x35e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	2b20      	cmp	r3, #32
 8002660:	d108      	bne.n	8002674 <HAL_RCC_OscConfig+0x348>
 8002662:	4b70      	ldr	r3, [pc, #448]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800266a:	4a6e      	ldr	r2, [pc, #440]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800266c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002670:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002672:	e075      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002674:	4b6b      	ldr	r3, [pc, #428]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	069b      	lsls	r3, r3, #26
 8002682:	4968      	ldr	r1, [pc, #416]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002688:	e06a      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800268a:	4b66      	ldr	r3, [pc, #408]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	061b      	lsls	r3, r3, #24
 8002698:	4962      	ldr	r1, [pc, #392]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800269a:	4313      	orrs	r3, r2
 800269c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800269e:	e05f      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d042      	beq.n	800272e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026a8:	4b5e      	ldr	r3, [pc, #376]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a5d      	ldr	r2, [pc, #372]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80026ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fd16 	bl	80010e4 <HAL_GetTick>
 80026b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026bc:	f7fe fd12 	bl	80010e4 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e280      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ce:	4b55      	ldr	r3, [pc, #340]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026da:	f7fe fd33 	bl	8001144 <HAL_GetREVID>
 80026de:	4603      	mov	r3, r0
 80026e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d817      	bhi.n	8002718 <HAL_RCC_OscConfig+0x3ec>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d108      	bne.n	8002702 <HAL_RCC_OscConfig+0x3d6>
 80026f0:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026f8:	4a4a      	ldr	r2, [pc, #296]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80026fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026fe:	6053      	str	r3, [r2, #4]
 8002700:	e02e      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
 8002702:	4b48      	ldr	r3, [pc, #288]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	069b      	lsls	r3, r3, #26
 8002710:	4944      	ldr	r1, [pc, #272]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
 8002716:	e023      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
 8002718:	4b42      	ldr	r3, [pc, #264]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	493f      	ldr	r1, [pc, #252]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002728:	4313      	orrs	r3, r2
 800272a:	60cb      	str	r3, [r1, #12]
 800272c:	e018      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800272e:	4b3d      	ldr	r3, [pc, #244]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a3c      	ldr	r2, [pc, #240]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe fcd3 	bl	80010e4 <HAL_GetTick>
 800273e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002742:	f7fe fccf 	bl	80010e4 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e23d      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002754:	4b33      	ldr	r3, [pc, #204]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d036      	beq.n	80027da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d019      	beq.n	80027a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002778:	4a2a      	ldr	r2, [pc, #168]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7fe fcb0 	bl	80010e4 <HAL_GetTick>
 8002784:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002788:	f7fe fcac 	bl	80010e4 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e21a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800279a:	4b22      	ldr	r3, [pc, #136]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800279c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x45c>
 80027a6:	e018      	b.n	80027da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a8:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80027aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ac:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b4:	f7fe fc96 	bl	80010e4 <HAL_GetTick>
 80027b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027bc:	f7fe fc92 	bl	80010e4 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e200      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80027d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d039      	beq.n	800285a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01c      	beq.n	8002828 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80027f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027fa:	f7fe fc73 	bl	80010e4 <HAL_GetTick>
 80027fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002802:	f7fe fc6f 	bl	80010e4 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1dd      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x4d6>
 8002820:	e01b      	b.n	800285a <HAL_RCC_OscConfig+0x52e>
 8002822:	bf00      	nop
 8002824:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002828:	4b9b      	ldr	r3, [pc, #620]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a9a      	ldr	r2, [pc, #616]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 800282e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002832:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002834:	f7fe fc56 	bl	80010e4 <HAL_GetTick>
 8002838:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800283c:	f7fe fc52 	bl	80010e4 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e1c0      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800284e:	4b92      	ldr	r3, [pc, #584]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8081 	beq.w	800296a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002868:	4b8c      	ldr	r3, [pc, #560]	; (8002a9c <HAL_RCC_OscConfig+0x770>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a8b      	ldr	r2, [pc, #556]	; (8002a9c <HAL_RCC_OscConfig+0x770>)
 800286e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002872:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002874:	f7fe fc36 	bl	80010e4 <HAL_GetTick>
 8002878:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287c:	f7fe fc32 	bl	80010e4 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e1a0      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800288e:	4b83      	ldr	r3, [pc, #524]	; (8002a9c <HAL_RCC_OscConfig+0x770>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_OscConfig+0x584>
 80028a2:	4b7d      	ldr	r3, [pc, #500]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	4a7c      	ldr	r2, [pc, #496]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6713      	str	r3, [r2, #112]	; 0x70
 80028ae:	e02d      	b.n	800290c <HAL_RCC_OscConfig+0x5e0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10c      	bne.n	80028d2 <HAL_RCC_OscConfig+0x5a6>
 80028b8:	4b77      	ldr	r3, [pc, #476]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	4a76      	ldr	r2, [pc, #472]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	6713      	str	r3, [r2, #112]	; 0x70
 80028c4:	4b74      	ldr	r3, [pc, #464]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	4a73      	ldr	r2, [pc, #460]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028ca:	f023 0304 	bic.w	r3, r3, #4
 80028ce:	6713      	str	r3, [r2, #112]	; 0x70
 80028d0:	e01c      	b.n	800290c <HAL_RCC_OscConfig+0x5e0>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b05      	cmp	r3, #5
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c8>
 80028da:	4b6f      	ldr	r3, [pc, #444]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	4a6e      	ldr	r2, [pc, #440]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	6713      	str	r3, [r2, #112]	; 0x70
 80028e6:	4b6c      	ldr	r3, [pc, #432]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	4a6b      	ldr	r2, [pc, #428]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6713      	str	r3, [r2, #112]	; 0x70
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0x5e0>
 80028f4:	4b68      	ldr	r3, [pc, #416]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a67      	ldr	r2, [pc, #412]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	4a64      	ldr	r2, [pc, #400]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002906:	f023 0304 	bic.w	r3, r3, #4
 800290a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe fbe6 	bl	80010e4 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800291a:	e00a      	b.n	8002932 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291c:	f7fe fbe2 	bl	80010e4 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e14e      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002932:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0ee      	beq.n	800291c <HAL_RCC_OscConfig+0x5f0>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002940:	f7fe fbd0 	bl	80010e4 <HAL_GetTick>
 8002944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002946:	e00a      	b.n	800295e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002948:	f7fe fbcc 	bl	80010e4 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	; 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e138      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800295e:	4b4e      	ldr	r3, [pc, #312]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ee      	bne.n	8002948 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 812d 	beq.w	8002bce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002974:	4b48      	ldr	r3, [pc, #288]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800297c:	2b18      	cmp	r3, #24
 800297e:	f000 80bd 	beq.w	8002afc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	2b02      	cmp	r3, #2
 8002988:	f040 809e 	bne.w	8002ac8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298c:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a41      	ldr	r2, [pc, #260]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe fba4 	bl	80010e4 <HAL_GetTick>
 800299c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe fba0 	bl	80010e4 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e10e      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029be:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80029c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_RCC_OscConfig+0x774>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029ce:	0112      	lsls	r2, r2, #4
 80029d0:	430a      	orrs	r2, r1
 80029d2:	4931      	ldr	r1, [pc, #196]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	628b      	str	r3, [r1, #40]	; 0x28
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	3b01      	subs	r3, #1
 80029de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e6:	3b01      	subs	r3, #1
 80029e8:	025b      	lsls	r3, r3, #9
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	3b01      	subs	r3, #1
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	3b01      	subs	r3, #1
 8002a02:	061b      	lsls	r3, r3, #24
 8002a04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a08:	4923      	ldr	r1, [pc, #140]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	4a21      	ldr	r2, [pc, #132]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_RCC_OscConfig+0x778>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a26:	00d2      	lsls	r2, r2, #3
 8002a28:	491b      	ldr	r1, [pc, #108]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	f023 020c 	bic.w	r2, r3, #12
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4917      	ldr	r1, [pc, #92]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a40:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	f023 0202 	bic.w	r2, r3, #2
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	4912      	ldr	r1, [pc, #72]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7fe fb29 	bl	80010e4 <HAL_GetTick>
 8002a92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a94:	e011      	b.n	8002aba <HAL_RCC_OscConfig+0x78e>
 8002a96:	bf00      	nop
 8002a98:	58024400 	.word	0x58024400
 8002a9c:	58024800 	.word	0x58024800
 8002aa0:	fffffc0c 	.word	0xfffffc0c
 8002aa4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe fb1c 	bl	80010e4 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e08a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aba:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x77c>
 8002ac6:	e082      	b.n	8002bce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac8:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a42      	ldr	r2, [pc, #264]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fb06 	bl	80010e4 <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fe fb02 	bl	80010e4 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e070      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aee:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x7b0>
 8002afa:	e068      	b.n	8002bce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002afc:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b02:	4b35      	ldr	r3, [pc, #212]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d031      	beq.n	8002b74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f003 0203 	and.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d12a      	bne.n	8002b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d122      	bne.n	8002b74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d11a      	bne.n	8002b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	0a5b      	lsrs	r3, r3, #9
 8002b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d111      	bne.n	8002b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	0c1b      	lsrs	r3, r3, #16
 8002b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d108      	bne.n	8002b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	0e1b      	lsrs	r3, r3, #24
 8002b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e02b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	08db      	lsrs	r3, r3, #3
 8002b7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d01f      	beq.n	8002bce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	4a11      	ldr	r2, [pc, #68]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b9a:	f7fe faa3 	bl	80010e4 <HAL_GetTick>
 8002b9e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ba0:	bf00      	nop
 8002ba2:	f7fe fa9f 	bl	80010e4 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d0f9      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_RCC_OscConfig+0x8b0>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bba:	00d2      	lsls	r2, r2, #3
 8002bbc:	4906      	ldr	r1, [pc, #24]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3730      	adds	r7, #48	; 0x30
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	58024400 	.word	0x58024400
 8002bdc:	ffff0007 	.word	0xffff0007

08002be0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e19c      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf4:	4b8a      	ldr	r3, [pc, #552]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d910      	bls.n	8002c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c02:	4b87      	ldr	r3, [pc, #540]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 020f 	bic.w	r2, r3, #15
 8002c0a:	4985      	ldr	r1, [pc, #532]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b83      	ldr	r3, [pc, #524]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e184      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d010      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	4b7b      	ldr	r3, [pc, #492]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d908      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c40:	4b78      	ldr	r3, [pc, #480]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	4975      	ldr	r1, [pc, #468]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d010      	beq.n	8002c80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	4b70      	ldr	r3, [pc, #448]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d908      	bls.n	8002c80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c6e:	4b6d      	ldr	r3, [pc, #436]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	496a      	ldr	r1, [pc, #424]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d010      	beq.n	8002cae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	4b64      	ldr	r3, [pc, #400]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d908      	bls.n	8002cae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c9c:	4b61      	ldr	r3, [pc, #388]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	495e      	ldr	r1, [pc, #376]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d010      	beq.n	8002cdc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	4b59      	ldr	r3, [pc, #356]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d908      	bls.n	8002cdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cca:	4b56      	ldr	r3, [pc, #344]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4953      	ldr	r1, [pc, #332]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d010      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	4b4d      	ldr	r3, [pc, #308]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d908      	bls.n	8002d0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf8:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f023 020f 	bic.w	r2, r3, #15
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4947      	ldr	r1, [pc, #284]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d055      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d16:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	4940      	ldr	r1, [pc, #256]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d30:	4b3c      	ldr	r3, [pc, #240]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d121      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0f6      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d48:	4b36      	ldr	r3, [pc, #216]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d115      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0ea      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d60:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d109      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0de      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d70:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0d6      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d80:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f023 0207 	bic.w	r2, r3, #7
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4925      	ldr	r1, [pc, #148]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d92:	f7fe f9a7 	bl	80010e4 <HAL_GetTick>
 8002d96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9a:	f7fe f9a3 	bl	80010e4 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0be      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db0:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d1eb      	bne.n	8002d9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d010      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d208      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f023 020f 	bic.w	r2, r3, #15
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	490e      	ldr	r1, [pc, #56]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d214      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 020f 	bic.w	r2, r3, #15
 8002e06:	4906      	ldr	r1, [pc, #24]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e086      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
 8002e20:	52002000 	.word	0x52002000
 8002e24:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d010      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	4b3f      	ldr	r3, [pc, #252]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d208      	bcs.n	8002e56 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e44:	4b3c      	ldr	r3, [pc, #240]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	4939      	ldr	r1, [pc, #228]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d010      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d208      	bcs.n	8002e84 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e72:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	492e      	ldr	r1, [pc, #184]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d010      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699a      	ldr	r2, [r3, #24]
 8002e94:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d208      	bcs.n	8002eb2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	4922      	ldr	r1, [pc, #136]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d010      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d208      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ece:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	4917      	ldr	r1, [pc, #92]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ee0:	f000 f834 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	4912      	ldr	r1, [pc, #72]	; (8002f3c <HAL_RCC_ClockConfig+0x35c>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	4a0d      	ldr	r2, [pc, #52]	; (8002f3c <HAL_RCC_ClockConfig+0x35c>)
 8002f08:	5cd3      	ldrb	r3, [r2, r3]
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
 8002f14:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <HAL_RCC_ClockConfig+0x360>)
 8002f16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f18:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <HAL_RCC_ClockConfig+0x364>)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_RCC_ClockConfig+0x368>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe f894 	bl	8001050 <HAL_InitTick>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	08006780 	.word	0x08006780
 8002f40:	24000004 	.word	0x24000004
 8002f44:	24000000 	.word	0x24000000
 8002f48:	24000008 	.word	0x24000008

08002f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f52:	4bb3      	ldr	r3, [pc, #716]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f5a:	2b18      	cmp	r3, #24
 8002f5c:	f200 8155 	bhi.w	800320a <HAL_RCC_GetSysClockFreq+0x2be>
 8002f60:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002fcd 	.word	0x08002fcd
 8002f6c:	0800320b 	.word	0x0800320b
 8002f70:	0800320b 	.word	0x0800320b
 8002f74:	0800320b 	.word	0x0800320b
 8002f78:	0800320b 	.word	0x0800320b
 8002f7c:	0800320b 	.word	0x0800320b
 8002f80:	0800320b 	.word	0x0800320b
 8002f84:	0800320b 	.word	0x0800320b
 8002f88:	08002ff3 	.word	0x08002ff3
 8002f8c:	0800320b 	.word	0x0800320b
 8002f90:	0800320b 	.word	0x0800320b
 8002f94:	0800320b 	.word	0x0800320b
 8002f98:	0800320b 	.word	0x0800320b
 8002f9c:	0800320b 	.word	0x0800320b
 8002fa0:	0800320b 	.word	0x0800320b
 8002fa4:	0800320b 	.word	0x0800320b
 8002fa8:	08002ff9 	.word	0x08002ff9
 8002fac:	0800320b 	.word	0x0800320b
 8002fb0:	0800320b 	.word	0x0800320b
 8002fb4:	0800320b 	.word	0x0800320b
 8002fb8:	0800320b 	.word	0x0800320b
 8002fbc:	0800320b 	.word	0x0800320b
 8002fc0:	0800320b 	.word	0x0800320b
 8002fc4:	0800320b 	.word	0x0800320b
 8002fc8:	08002fff 	.word	0x08002fff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fcc:	4b94      	ldr	r3, [pc, #592]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d009      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fd8:	4b91      	ldr	r3, [pc, #580]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	08db      	lsrs	r3, r3, #3
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	4a90      	ldr	r2, [pc, #576]	; (8003224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fea:	e111      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fec:	4b8d      	ldr	r3, [pc, #564]	; (8003224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fee:	61bb      	str	r3, [r7, #24]
      break;
 8002ff0:	e10e      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002ff2:	4b8d      	ldr	r3, [pc, #564]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ff4:	61bb      	str	r3, [r7, #24]
      break;
 8002ff6:	e10b      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ff8:	4b8c      	ldr	r3, [pc, #560]	; (800322c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ffa:	61bb      	str	r3, [r7, #24]
      break;
 8002ffc:	e108      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ffe:	4b88      	ldr	r3, [pc, #544]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003008:	4b85      	ldr	r3, [pc, #532]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003012:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003014:	4b82      	ldr	r3, [pc, #520]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800301e:	4b80      	ldr	r3, [pc, #512]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003022:	08db      	lsrs	r3, r3, #3
 8003024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003036:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80e1 	beq.w	8003204 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b02      	cmp	r3, #2
 8003046:	f000 8083 	beq.w	8003150 <HAL_RCC_GetSysClockFreq+0x204>
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b02      	cmp	r3, #2
 800304e:	f200 80a1 	bhi.w	8003194 <HAL_RCC_GetSysClockFreq+0x248>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x114>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d056      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x1c0>
 800305e:	e099      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003060:	4b6f      	ldr	r3, [pc, #444]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d02d      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800306c:	4b6c      	ldr	r3, [pc, #432]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	08db      	lsrs	r3, r3, #3
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	4a6b      	ldr	r2, [pc, #428]	; (8003224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
 800307c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	ee07 3a90 	vmov	s15, r3
 8003084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003096:	4b62      	ldr	r3, [pc, #392]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309e:	ee07 3a90 	vmov	s15, r3
 80030a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030c6:	e087      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003234 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030da:	4b51      	ldr	r3, [pc, #324]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003106:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800310a:	e065      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003116:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003238 <HAL_RCC_GetSysClockFreq+0x2ec>
 800311a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800311e:	4b40      	ldr	r3, [pc, #256]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800312e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003132:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800313a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800313e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800314e:	e043      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800323c <HAL_RCC_GetSysClockFreq+0x2f0>
 800315e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003162:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003172:	ed97 6a02 	vldr	s12, [r7, #8]
 8003176:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 800317a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800317e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800318a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003192:	e021      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003238 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a6:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031d8:	4b11      	ldr	r3, [pc, #68]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	0a5b      	lsrs	r3, r3, #9
 80031de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e2:	3301      	adds	r3, #1
 80031e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80031f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031fc:	ee17 3a90 	vmov	r3, s15
 8003200:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003202:	e005      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	61bb      	str	r3, [r7, #24]
      break;
 8003208:	e002      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800320a:	4b07      	ldr	r3, [pc, #28]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800320c:	61bb      	str	r3, [r7, #24]
      break;
 800320e:	bf00      	nop
  }

  return sysclockfreq;
 8003210:	69bb      	ldr	r3, [r7, #24]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	58024400 	.word	0x58024400
 8003224:	03d09000 	.word	0x03d09000
 8003228:	003d0900 	.word	0x003d0900
 800322c:	007a1200 	.word	0x007a1200
 8003230:	46000000 	.word	0x46000000
 8003234:	4c742400 	.word	0x4c742400
 8003238:	4a742400 	.word	0x4a742400
 800323c:	4af42400 	.word	0x4af42400

08003240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003246:	f7ff fe81 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 800324a:	4602      	mov	r2, r0
 800324c:	4b10      	ldr	r3, [pc, #64]	; (8003290 <HAL_RCC_GetHCLKFreq+0x50>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	490f      	ldr	r1, [pc, #60]	; (8003294 <HAL_RCC_GetHCLKFreq+0x54>)
 8003258:	5ccb      	ldrb	r3, [r1, r3]
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	fa22 f303 	lsr.w	r3, r2, r3
 8003262:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_RCC_GetHCLKFreq+0x50>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	4a09      	ldr	r2, [pc, #36]	; (8003294 <HAL_RCC_GetHCLKFreq+0x54>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <HAL_RCC_GetHCLKFreq+0x58>)
 800327c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <HAL_RCC_GetHCLKFreq+0x58>)
 8003286:	681b      	ldr	r3, [r3, #0]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	58024400 	.word	0x58024400
 8003294:	08006780 	.word	0x08006780
 8003298:	24000004 	.word	0x24000004
 800329c:	24000000 	.word	0x24000000

080032a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032a4:	f7ff ffcc 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4904      	ldr	r1, [pc, #16]	; (80032c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	58024400 	.word	0x58024400
 80032c8:	08006780 	.word	0x08006780

080032cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032d0:	f7ff ffb6 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	0a1b      	lsrs	r3, r3, #8
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	4904      	ldr	r1, [pc, #16]	; (80032f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032e2:	5ccb      	ldrb	r3, [r1, r3]
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	58024400 	.word	0x58024400
 80032f4:	08006780 	.word	0x08006780

080032f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032fc:	b0ca      	sub	sp, #296	; 0x128
 80032fe:	af00      	add	r7, sp, #0
 8003300:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003304:	2300      	movs	r3, #0
 8003306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800330a:	2300      	movs	r3, #0
 800330c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003318:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800331c:	2500      	movs	r5, #0
 800331e:	ea54 0305 	orrs.w	r3, r4, r5
 8003322:	d049      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800332a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800332e:	d02f      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003330:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003334:	d828      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003336:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800333a:	d01a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800333c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003340:	d822      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800334a:	d007      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800334c:	e01c      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800334e:	4bb8      	ldr	r3, [pc, #736]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	4ab7      	ldr	r2, [pc, #732]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003358:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800335a:	e01a      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003360:	3308      	adds	r3, #8
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f001 fc8f 	bl	8004c88 <RCCEx_PLL2_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003370:	e00f      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003376:	3328      	adds	r3, #40	; 0x28
 8003378:	2102      	movs	r1, #2
 800337a:	4618      	mov	r0, r3
 800337c:	f001 fd36 	bl	8004dec <RCCEx_PLL3_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003386:	e004      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800338e:	e000      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800339a:	4ba5      	ldr	r3, [pc, #660]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800339c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80033a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033a8:	4aa1      	ldr	r2, [pc, #644]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033aa:	430b      	orrs	r3, r1
 80033ac:	6513      	str	r3, [r2, #80]	; 0x50
 80033ae:	e003      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80033c4:	f04f 0900 	mov.w	r9, #0
 80033c8:	ea58 0309 	orrs.w	r3, r8, r9
 80033cc:	d047      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d82a      	bhi.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033d8:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033de:	bf00      	nop
 80033e0:	080033f5 	.word	0x080033f5
 80033e4:	08003403 	.word	0x08003403
 80033e8:	08003419 	.word	0x08003419
 80033ec:	08003437 	.word	0x08003437
 80033f0:	08003437 	.word	0x08003437
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f4:	4b8e      	ldr	r3, [pc, #568]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	4a8d      	ldr	r2, [pc, #564]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003400:	e01a      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003406:	3308      	adds	r3, #8
 8003408:	2100      	movs	r1, #0
 800340a:	4618      	mov	r0, r3
 800340c:	f001 fc3c 	bl	8004c88 <RCCEx_PLL2_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003416:	e00f      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800341c:	3328      	adds	r3, #40	; 0x28
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f001 fce3 	bl	8004dec <RCCEx_PLL3_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800342c:	e004      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003434:	e000      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003438:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003440:	4b7b      	ldr	r3, [pc, #492]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003444:	f023 0107 	bic.w	r1, r3, #7
 8003448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800344c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344e:	4a78      	ldr	r2, [pc, #480]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003450:	430b      	orrs	r3, r1
 8003452:	6513      	str	r3, [r2, #80]	; 0x50
 8003454:	e003      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800345a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800345e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800346a:	f04f 0b00 	mov.w	fp, #0
 800346e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003472:	d04c      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800347e:	d030      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003484:	d829      	bhi.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003486:	2bc0      	cmp	r3, #192	; 0xc0
 8003488:	d02d      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800348a:	2bc0      	cmp	r3, #192	; 0xc0
 800348c:	d825      	bhi.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d018      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	d821      	bhi.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800349a:	2b40      	cmp	r3, #64	; 0x40
 800349c:	d007      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800349e:	e01c      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a0:	4b63      	ldr	r3, [pc, #396]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	4a62      	ldr	r2, [pc, #392]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034ac:	e01c      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b2:	3308      	adds	r3, #8
 80034b4:	2100      	movs	r1, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f001 fbe6 	bl	8004c88 <RCCEx_PLL2_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034c2:	e011      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c8:	3328      	adds	r3, #40	; 0x28
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f001 fc8d 	bl	8004dec <RCCEx_PLL3_Config>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034d8:	e006      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034e0:	e002      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034e2:	bf00      	nop
 80034e4:	e000      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10a      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034f0:	4b4f      	ldr	r3, [pc, #316]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80034f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	4a4c      	ldr	r2, [pc, #304]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003500:	430b      	orrs	r3, r1
 8003502:	6513      	str	r3, [r2, #80]	; 0x50
 8003504:	e003      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800350a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800350e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800351a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800351e:	2300      	movs	r3, #0
 8003520:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003524:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003528:	460b      	mov	r3, r1
 800352a:	4313      	orrs	r3, r2
 800352c:	d053      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800352e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003532:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003536:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800353a:	d035      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800353c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003540:	d82e      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003542:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003546:	d031      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003548:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800354c:	d828      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800354e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003552:	d01a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003558:	d822      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800355e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003562:	d007      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003564:	e01c      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003566:	4b32      	ldr	r3, [pc, #200]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	4a31      	ldr	r2, [pc, #196]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800356c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003570:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003572:	e01c      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003578:	3308      	adds	r3, #8
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f001 fb83 	bl	8004c88 <RCCEx_PLL2_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003588:	e011      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358e:	3328      	adds	r3, #40	; 0x28
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f001 fc2a 	bl	8004dec <RCCEx_PLL3_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800359e:	e006      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035a6:	e002      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035a8:	bf00      	nop
 80035aa:	e000      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035b6:	4b1e      	ldr	r3, [pc, #120]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035c6:	4a1a      	ldr	r2, [pc, #104]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6593      	str	r3, [r2, #88]	; 0x58
 80035cc:	e003      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035de:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80035e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035e6:	2300      	movs	r3, #0
 80035e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035ec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80035f0:	460b      	mov	r3, r1
 80035f2:	4313      	orrs	r3, r2
 80035f4:	d056      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003602:	d038      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003604:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003608:	d831      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800360a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800360e:	d034      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003610:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003614:	d82b      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800361a:	d01d      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800361c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003620:	d825      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003626:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800362c:	e01f      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800362e:	bf00      	nop
 8003630:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003634:	4ba2      	ldr	r3, [pc, #648]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	4aa1      	ldr	r2, [pc, #644]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800363a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003640:	e01c      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003646:	3308      	adds	r3, #8
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f001 fb1c 	bl	8004c88 <RCCEx_PLL2_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003656:	e011      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365c:	3328      	adds	r3, #40	; 0x28
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f001 fbc3 	bl	8004dec <RCCEx_PLL3_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800366c:	e006      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003674:	e002      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003676:	bf00      	nop
 8003678:	e000      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800367a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10b      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003684:	4b8e      	ldr	r3, [pc, #568]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003688:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003690:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003694:	4a8a      	ldr	r2, [pc, #552]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003696:	430b      	orrs	r3, r1
 8003698:	6593      	str	r3, [r2, #88]	; 0x58
 800369a:	e003      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80036b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80036ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80036be:	460b      	mov	r3, r1
 80036c0:	4313      	orrs	r3, r2
 80036c2:	d03a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	2b30      	cmp	r3, #48	; 0x30
 80036cc:	d01f      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80036ce:	2b30      	cmp	r3, #48	; 0x30
 80036d0:	d819      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d00c      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d815      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d019      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80036de:	2b10      	cmp	r3, #16
 80036e0:	d111      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e2:	4b77      	ldr	r3, [pc, #476]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	4a76      	ldr	r2, [pc, #472]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036ee:	e011      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f4:	3308      	adds	r3, #8
 80036f6:	2102      	movs	r1, #2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 fac5 	bl	8004c88 <RCCEx_PLL2_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003704:	e006      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800370c:	e002      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800370e:	bf00      	nop
 8003710:	e000      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003714:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10a      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800371c:	4b68      	ldr	r3, [pc, #416]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800371e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003720:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372a:	4a65      	ldr	r2, [pc, #404]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800372c:	430b      	orrs	r3, r1
 800372e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003730:	e003      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003732:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003736:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003746:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800374a:	2300      	movs	r3, #0
 800374c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003750:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003754:	460b      	mov	r3, r1
 8003756:	4313      	orrs	r3, r2
 8003758:	d051      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800375a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800375e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003764:	d035      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800376a:	d82e      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800376c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003770:	d031      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003772:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003776:	d828      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800377c:	d01a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800377e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003782:	d822      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378c:	d007      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800378e:	e01c      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003790:	4b4b      	ldr	r3, [pc, #300]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	4a4a      	ldr	r2, [pc, #296]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800379c:	e01c      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a2:	3308      	adds	r3, #8
 80037a4:	2100      	movs	r1, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 fa6e 	bl	8004c88 <RCCEx_PLL2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037b2:	e011      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b8:	3328      	adds	r3, #40	; 0x28
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 fb15 	bl	8004dec <RCCEx_PLL3_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037c8:	e006      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037d0:	e002      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037d2:	bf00      	nop
 80037d4:	e000      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037e0:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80037e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ee:	4a34      	ldr	r2, [pc, #208]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6513      	str	r3, [r2, #80]	; 0x50
 80037f4:	e003      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800380a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800380e:	2300      	movs	r3, #0
 8003810:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003814:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003818:	460b      	mov	r3, r1
 800381a:	4313      	orrs	r3, r2
 800381c:	d056      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003828:	d033      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800382a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800382e:	d82c      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003834:	d02f      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003836:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800383a:	d826      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800383c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003840:	d02b      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003842:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003846:	d820      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003848:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800384c:	d012      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800384e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003852:	d81a      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003854:	2b00      	cmp	r3, #0
 8003856:	d022      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385c:	d115      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800385e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003862:	3308      	adds	r3, #8
 8003864:	2101      	movs	r1, #1
 8003866:	4618      	mov	r0, r3
 8003868:	f001 fa0e 	bl	8004c88 <RCCEx_PLL2_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003872:	e015      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003878:	3328      	adds	r3, #40	; 0x28
 800387a:	2101      	movs	r1, #1
 800387c:	4618      	mov	r0, r3
 800387e:	f001 fab5 	bl	8004dec <RCCEx_PLL3_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003888:	e00a      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003890:	e006      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003892:	bf00      	nop
 8003894:	e004      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003896:	bf00      	nop
 8003898:	e002      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800389a:	bf00      	nop
 800389c:	e000      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800389e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10d      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80038b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b6:	4a02      	ldr	r2, [pc, #8]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b8:	430b      	orrs	r3, r1
 80038ba:	6513      	str	r3, [r2, #80]	; 0x50
 80038bc:	e006      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80038be:	bf00      	nop
 80038c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80038d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038e2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4313      	orrs	r3, r2
 80038ea:	d055      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038f8:	d033      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80038fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038fe:	d82c      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003904:	d02f      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390a:	d826      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800390c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003910:	d02b      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003912:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003916:	d820      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800391c:	d012      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800391e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003922:	d81a      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d022      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800392c:	d115      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003932:	3308      	adds	r3, #8
 8003934:	2101      	movs	r1, #1
 8003936:	4618      	mov	r0, r3
 8003938:	f001 f9a6 	bl	8004c88 <RCCEx_PLL2_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003942:	e015      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003948:	3328      	adds	r3, #40	; 0x28
 800394a:	2101      	movs	r1, #1
 800394c:	4618      	mov	r0, r3
 800394e:	f001 fa4d 	bl	8004dec <RCCEx_PLL3_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003958:	e00a      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003960:	e006      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003962:	bf00      	nop
 8003964:	e004      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003966:	bf00      	nop
 8003968:	e002      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800396a:	bf00      	nop
 800396c:	e000      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800396e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003978:	4ba3      	ldr	r3, [pc, #652]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003984:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003988:	4a9f      	ldr	r2, [pc, #636]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800398a:	430b      	orrs	r3, r1
 800398c:	6593      	str	r3, [r2, #88]	; 0x58
 800398e:	e003      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003990:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003994:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80039a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039a8:	2300      	movs	r3, #0
 80039aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80039ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039b2:	460b      	mov	r3, r1
 80039b4:	4313      	orrs	r3, r2
 80039b6:	d037      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c2:	d00e      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80039c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c8:	d816      	bhi.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d018      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80039ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039d2:	d111      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d4:	4b8c      	ldr	r3, [pc, #560]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	4a8b      	ldr	r2, [pc, #556]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039e0:	e00f      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e6:	3308      	adds	r3, #8
 80039e8:	2101      	movs	r1, #1
 80039ea:	4618      	mov	r0, r3
 80039ec:	f001 f94c 	bl	8004c88 <RCCEx_PLL2_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039f6:	e004      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039fe:	e000      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10a      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a0a:	4b7f      	ldr	r3, [pc, #508]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a0e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4a7b      	ldr	r2, [pc, #492]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	6513      	str	r3, [r2, #80]	; 0x50
 8003a1e:	e003      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003a34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a3e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4313      	orrs	r3, r2
 8003a46:	d039      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d81c      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a52:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003a95 	.word	0x08003a95
 8003a5c:	08003a69 	.word	0x08003a69
 8003a60:	08003a77 	.word	0x08003a77
 8003a64:	08003a95 	.word	0x08003a95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a68:	4b67      	ldr	r3, [pc, #412]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	4a66      	ldr	r2, [pc, #408]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a74:	e00f      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 f902 	bl	8004c88 <RCCEx_PLL2_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a8a:	e004      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10a      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a9e:	4b5a      	ldr	r3, [pc, #360]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa2:	f023 0103 	bic.w	r1, r3, #3
 8003aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aac:	4a56      	ldr	r2, [pc, #344]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ab2:	e003      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ab8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ad2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f000 809f 	beq.w	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ade:	4b4b      	ldr	r3, [pc, #300]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a4a      	ldr	r2, [pc, #296]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aea:	f7fd fafb 	bl	80010e4 <HAL_GetTick>
 8003aee:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003af2:	e00b      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af4:	f7fd faf6 	bl	80010e4 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b64      	cmp	r3, #100	; 0x64
 8003b02:	d903      	bls.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b0a:	e005      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b0c:	4b3f      	ldr	r3, [pc, #252]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ed      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003b18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d179      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b20:	4b39      	ldr	r3, [pc, #228]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b2c:	4053      	eors	r3, r2
 8003b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d015      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b36:	4b34      	ldr	r3, [pc, #208]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b42:	4b31      	ldr	r3, [pc, #196]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	4a30      	ldr	r2, [pc, #192]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b4e:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	4a2d      	ldr	r2, [pc, #180]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b58:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b5a:	4a2b      	ldr	r2, [pc, #172]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6e:	d118      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fd fab8 	bl	80010e4 <HAL_GetTick>
 8003b74:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b78:	e00d      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fd fab3 	bl	80010e4 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b84:	1ad2      	subs	r2, r2, r3
 8003b86:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d903      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003b94:	e005      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b96:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0eb      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d129      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bba:	d10e      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bcc:	091a      	lsrs	r2, r3, #4
 8003bce:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	4a0d      	ldr	r2, [pc, #52]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6113      	str	r3, [r2, #16]
 8003bd8:	e005      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003bda:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003be4:	6113      	str	r3, [r2, #16]
 8003be6:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf6:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfc:	e00e      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003c06:	e009      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003c08:	58024400 	.word	0x58024400
 8003c0c:	58024800 	.word	0x58024800
 8003c10:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f002 0301 	and.w	r3, r2, #1
 8003c28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c32:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f000 8089 	beq.w	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c44:	2b28      	cmp	r3, #40	; 0x28
 8003c46:	d86b      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c48:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003d29 	.word	0x08003d29
 8003c54:	08003d21 	.word	0x08003d21
 8003c58:	08003d21 	.word	0x08003d21
 8003c5c:	08003d21 	.word	0x08003d21
 8003c60:	08003d21 	.word	0x08003d21
 8003c64:	08003d21 	.word	0x08003d21
 8003c68:	08003d21 	.word	0x08003d21
 8003c6c:	08003d21 	.word	0x08003d21
 8003c70:	08003cf5 	.word	0x08003cf5
 8003c74:	08003d21 	.word	0x08003d21
 8003c78:	08003d21 	.word	0x08003d21
 8003c7c:	08003d21 	.word	0x08003d21
 8003c80:	08003d21 	.word	0x08003d21
 8003c84:	08003d21 	.word	0x08003d21
 8003c88:	08003d21 	.word	0x08003d21
 8003c8c:	08003d21 	.word	0x08003d21
 8003c90:	08003d0b 	.word	0x08003d0b
 8003c94:	08003d21 	.word	0x08003d21
 8003c98:	08003d21 	.word	0x08003d21
 8003c9c:	08003d21 	.word	0x08003d21
 8003ca0:	08003d21 	.word	0x08003d21
 8003ca4:	08003d21 	.word	0x08003d21
 8003ca8:	08003d21 	.word	0x08003d21
 8003cac:	08003d21 	.word	0x08003d21
 8003cb0:	08003d29 	.word	0x08003d29
 8003cb4:	08003d21 	.word	0x08003d21
 8003cb8:	08003d21 	.word	0x08003d21
 8003cbc:	08003d21 	.word	0x08003d21
 8003cc0:	08003d21 	.word	0x08003d21
 8003cc4:	08003d21 	.word	0x08003d21
 8003cc8:	08003d21 	.word	0x08003d21
 8003ccc:	08003d21 	.word	0x08003d21
 8003cd0:	08003d29 	.word	0x08003d29
 8003cd4:	08003d21 	.word	0x08003d21
 8003cd8:	08003d21 	.word	0x08003d21
 8003cdc:	08003d21 	.word	0x08003d21
 8003ce0:	08003d21 	.word	0x08003d21
 8003ce4:	08003d21 	.word	0x08003d21
 8003ce8:	08003d21 	.word	0x08003d21
 8003cec:	08003d21 	.word	0x08003d21
 8003cf0:	08003d29 	.word	0x08003d29
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 ffc3 	bl	8004c88 <RCCEx_PLL2_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d08:	e00f      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0e:	3328      	adds	r3, #40	; 0x28
 8003d10:	2101      	movs	r1, #1
 8003d12:	4618      	mov	r0, r3
 8003d14:	f001 f86a 	bl	8004dec <RCCEx_PLL3_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d1e:	e004      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d26:	e000      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d32:	4bbf      	ldr	r3, [pc, #764]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d40:	4abb      	ldr	r2, [pc, #748]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d42:	430b      	orrs	r3, r1
 8003d44:	6553      	str	r3, [r2, #84]	; 0x54
 8003d46:	e003      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d58:	f002 0302 	and.w	r3, r2, #2
 8003d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d66:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	d041      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d824      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d7a:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d80:	08003dcd 	.word	0x08003dcd
 8003d84:	08003d99 	.word	0x08003d99
 8003d88:	08003daf 	.word	0x08003daf
 8003d8c:	08003dcd 	.word	0x08003dcd
 8003d90:	08003dcd 	.word	0x08003dcd
 8003d94:	08003dcd 	.word	0x08003dcd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 ff71 	bl	8004c88 <RCCEx_PLL2_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dac:	e00f      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db2:	3328      	adds	r3, #40	; 0x28
 8003db4:	2101      	movs	r1, #1
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 f818 	bl	8004dec <RCCEx_PLL3_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dc2:	e004      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dca:	e000      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dd6:	4b96      	ldr	r3, [pc, #600]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	f023 0107 	bic.w	r1, r3, #7
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de4:	4a92      	ldr	r2, [pc, #584]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003de6:	430b      	orrs	r3, r1
 8003de8:	6553      	str	r3, [r2, #84]	; 0x54
 8003dea:	e003      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003df0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f002 0304 	and.w	r3, r2, #4
 8003e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e0a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	d044      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d825      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003e20:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e75 	.word	0x08003e75
 8003e2c:	08003e41 	.word	0x08003e41
 8003e30:	08003e57 	.word	0x08003e57
 8003e34:	08003e75 	.word	0x08003e75
 8003e38:	08003e75 	.word	0x08003e75
 8003e3c:	08003e75 	.word	0x08003e75
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e44:	3308      	adds	r3, #8
 8003e46:	2101      	movs	r1, #1
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 ff1d 	bl	8004c88 <RCCEx_PLL2_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e54:	e00f      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5a:	3328      	adds	r3, #40	; 0x28
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 ffc4 	bl	8004dec <RCCEx_PLL3_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e6a:	e004      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e72:	e000      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10b      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e7e:	4b6c      	ldr	r3, [pc, #432]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	f023 0107 	bic.w	r1, r3, #7
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8e:	4a68      	ldr	r2, [pc, #416]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6593      	str	r3, [r2, #88]	; 0x58
 8003e94:	e003      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea6:	f002 0320 	and.w	r3, r2, #32
 8003eaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003eb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	d055      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eca:	d033      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ed0:	d82c      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d02f      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003edc:	d826      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ede:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ee2:	d02b      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003ee4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ee8:	d820      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eee:	d012      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ef4:	d81a      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d022      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003efe:	d115      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f04:	3308      	adds	r3, #8
 8003f06:	2100      	movs	r1, #0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 febd 	bl	8004c88 <RCCEx_PLL2_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f14:	e015      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f1a:	3328      	adds	r3, #40	; 0x28
 8003f1c:	2102      	movs	r1, #2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 ff64 	bl	8004dec <RCCEx_PLL3_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f32:	e006      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f34:	bf00      	nop
 8003f36:	e004      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f38:	bf00      	nop
 8003f3a:	e002      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f3c:	bf00      	nop
 8003f3e:	e000      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10b      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f4a:	4b39      	ldr	r3, [pc, #228]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	4a35      	ldr	r2, [pc, #212]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6553      	str	r3, [r2, #84]	; 0x54
 8003f60:	e003      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003f80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4313      	orrs	r3, r2
 8003f88:	d058      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f96:	d033      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f9c:	d82c      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa2:	d02f      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa8:	d826      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003faa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fae:	d02b      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003fb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fb4:	d820      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fba:	d012      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc0:	d81a      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d022      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fca:	d115      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fe57 	bl	8004c88 <RCCEx_PLL2_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fe0:	e015      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe6:	3328      	adds	r3, #40	; 0x28
 8003fe8:	2102      	movs	r1, #2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fefe 	bl	8004dec <RCCEx_PLL3_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ff6:	e00a      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ffe:	e006      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004000:	bf00      	nop
 8004002:	e004      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004004:	bf00      	nop
 8004006:	e002      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004008:	bf00      	nop
 800400a:	e000      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800400c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800400e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10e      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004022:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004026:	4a02      	ldr	r2, [pc, #8]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004028:	430b      	orrs	r3, r1
 800402a:	6593      	str	r3, [r2, #88]	; 0x58
 800402c:	e006      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800402e:	bf00      	nop
 8004030:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004034:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004038:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800403c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004052:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004056:	460b      	mov	r3, r1
 8004058:	4313      	orrs	r3, r2
 800405a:	d055      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004060:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004064:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004068:	d033      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800406a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800406e:	d82c      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004074:	d02f      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407a:	d826      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800407c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004080:	d02b      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004082:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004086:	d820      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800408c:	d012      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800408e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004092:	d81a      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d022      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409c:	d115      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800409e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a2:	3308      	adds	r3, #8
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fdee 	bl	8004c88 <RCCEx_PLL2_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040b2:	e015      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b8:	3328      	adds	r3, #40	; 0x28
 80040ba:	2102      	movs	r1, #2
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fe95 	bl	8004dec <RCCEx_PLL3_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040c8:	e00a      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040d0:	e006      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040d2:	bf00      	nop
 80040d4:	e004      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040d6:	bf00      	nop
 80040d8:	e002      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040da:	bf00      	nop
 80040dc:	e000      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040e8:	4ba1      	ldr	r3, [pc, #644]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80040f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040f8:	4a9d      	ldr	r2, [pc, #628]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040fa:	430b      	orrs	r3, r1
 80040fc:	6593      	str	r3, [r2, #88]	; 0x58
 80040fe:	e003      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004104:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f002 0308 	and.w	r3, r2, #8
 8004114:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004118:	2300      	movs	r3, #0
 800411a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800411e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004122:	460b      	mov	r3, r1
 8004124:	4313      	orrs	r3, r2
 8004126:	d01e      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800412c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004134:	d10c      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413a:	3328      	adds	r3, #40	; 0x28
 800413c:	2102      	movs	r1, #2
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fe54 	bl	8004dec <RCCEx_PLL3_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004150:	4b87      	ldr	r3, [pc, #540]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004154:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800415c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004160:	4a83      	ldr	r2, [pc, #524]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004162:	430b      	orrs	r3, r1
 8004164:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	f002 0310 	and.w	r3, r2, #16
 8004172:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004176:	2300      	movs	r3, #0
 8004178:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800417c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004180:	460b      	mov	r3, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	d01e      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800418a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800418e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004192:	d10c      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004198:	3328      	adds	r3, #40	; 0x28
 800419a:	2102      	movs	r1, #2
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fe25 	bl	8004dec <RCCEx_PLL3_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041ae:	4b70      	ldr	r3, [pc, #448]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041be:	4a6c      	ldr	r2, [pc, #432]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041cc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80041d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041d4:	2300      	movs	r3, #0
 80041d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80041de:	460b      	mov	r3, r1
 80041e0:	4313      	orrs	r3, r2
 80041e2:	d03e      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041f0:	d022      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80041f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041f6:	d81b      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80041fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004200:	d00b      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004202:	e015      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004208:	3308      	adds	r3, #8
 800420a:	2100      	movs	r1, #0
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fd3b 	bl	8004c88 <RCCEx_PLL2_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004218:	e00f      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421e:	3328      	adds	r3, #40	; 0x28
 8004220:	2102      	movs	r1, #2
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fde2 	bl	8004dec <RCCEx_PLL3_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800422e:	e004      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004236:	e000      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800423a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10b      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004242:	4b4b      	ldr	r3, [pc, #300]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800424e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004252:	4a47      	ldr	r2, [pc, #284]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004254:	430b      	orrs	r3, r1
 8004256:	6593      	str	r3, [r2, #88]	; 0x58
 8004258:	e003      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800425e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800426e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004270:	2300      	movs	r3, #0
 8004272:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004274:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004278:	460b      	mov	r3, r1
 800427a:	4313      	orrs	r3, r2
 800427c:	d03b      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800428a:	d01f      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800428c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004290:	d818      	bhi.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004296:	d003      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004298:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800429c:	d007      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800429e:	e011      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a0:	4b33      	ldr	r3, [pc, #204]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	4a32      	ldr	r2, [pc, #200]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042ac:	e00f      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b2:	3328      	adds	r3, #40	; 0x28
 80042b4:	2101      	movs	r1, #1
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fd98 	bl	8004dec <RCCEx_PLL3_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80042c2:	e004      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042ca:	e000      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80042cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10b      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042d6:	4b26      	ldr	r3, [pc, #152]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	4a22      	ldr	r2, [pc, #136]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e8:	430b      	orrs	r3, r1
 80042ea:	6553      	str	r3, [r2, #84]	; 0x54
 80042ec:	e003      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004302:	673b      	str	r3, [r7, #112]	; 0x70
 8004304:	2300      	movs	r3, #0
 8004306:	677b      	str	r3, [r7, #116]	; 0x74
 8004308:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800430c:	460b      	mov	r3, r1
 800430e:	4313      	orrs	r3, r2
 8004310:	d034      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004320:	d007      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004322:	e011      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	4a11      	ldr	r2, [pc, #68]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800432a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800432e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004330:	e00e      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004336:	3308      	adds	r3, #8
 8004338:	2102      	movs	r1, #2
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fca4 	bl	8004c88 <RCCEx_PLL2_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004346:	e003      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800434e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004350:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10d      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800435a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004366:	4a02      	ldr	r2, [pc, #8]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004368:	430b      	orrs	r3, r1
 800436a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800436c:	e006      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800436e:	bf00      	nop
 8004370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004378:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004388:	66bb      	str	r3, [r7, #104]	; 0x68
 800438a:	2300      	movs	r3, #0
 800438c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800438e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004392:	460b      	mov	r3, r1
 8004394:	4313      	orrs	r3, r2
 8004396:	d00c      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439c:	3328      	adds	r3, #40	; 0x28
 800439e:	2102      	movs	r1, #2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fd23 	bl	8004dec <RCCEx_PLL3_Config>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80043be:	663b      	str	r3, [r7, #96]	; 0x60
 80043c0:	2300      	movs	r3, #0
 80043c2:	667b      	str	r3, [r7, #100]	; 0x64
 80043c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80043c8:	460b      	mov	r3, r1
 80043ca:	4313      	orrs	r3, r2
 80043cc:	d038      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043da:	d018      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80043dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e0:	d811      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e6:	d014      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ec:	d80b      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d011      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80043f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f6:	d106      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f8:	4bc3      	ldr	r3, [pc, #780]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	4ac2      	ldr	r2, [pc, #776]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004404:	e008      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800440c:	e004      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800440e:	bf00      	nop
 8004410:	e002      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004412:	bf00      	nop
 8004414:	e000      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004418:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004420:	4bb9      	ldr	r3, [pc, #740]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004424:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004430:	4ab5      	ldr	r2, [pc, #724]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004432:	430b      	orrs	r3, r1
 8004434:	6553      	str	r3, [r2, #84]	; 0x54
 8004436:	e003      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800443c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800444c:	65bb      	str	r3, [r7, #88]	; 0x58
 800444e:	2300      	movs	r3, #0
 8004450:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004452:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004456:	460b      	mov	r3, r1
 8004458:	4313      	orrs	r3, r2
 800445a:	d009      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800445c:	4baa      	ldr	r3, [pc, #680]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800445e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004460:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446a:	4aa7      	ldr	r2, [pc, #668]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446c:	430b      	orrs	r3, r1
 800446e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800447c:	653b      	str	r3, [r7, #80]	; 0x50
 800447e:	2300      	movs	r3, #0
 8004480:	657b      	str	r3, [r7, #84]	; 0x54
 8004482:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004486:	460b      	mov	r3, r1
 8004488:	4313      	orrs	r3, r2
 800448a:	d00a      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800448c:	4b9e      	ldr	r3, [pc, #632]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004498:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800449c:	4a9a      	ldr	r2, [pc, #616]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800449e:	430b      	orrs	r3, r1
 80044a0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80044ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80044b0:	2300      	movs	r3, #0
 80044b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80044b8:	460b      	mov	r3, r1
 80044ba:	4313      	orrs	r3, r2
 80044bc:	d009      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044be:	4b92      	ldr	r3, [pc, #584]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044cc:	4a8e      	ldr	r2, [pc, #568]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ce:	430b      	orrs	r3, r1
 80044d0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80044de:	643b      	str	r3, [r7, #64]	; 0x40
 80044e0:	2300      	movs	r3, #0
 80044e2:	647b      	str	r3, [r7, #68]	; 0x44
 80044e4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80044e8:	460b      	mov	r3, r1
 80044ea:	4313      	orrs	r3, r2
 80044ec:	d00e      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ee:	4b86      	ldr	r3, [pc, #536]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	4a85      	ldr	r2, [pc, #532]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044f8:	6113      	str	r3, [r2, #16]
 80044fa:	4b83      	ldr	r3, [pc, #524]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044fc:	6919      	ldr	r1, [r3, #16]
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004502:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004506:	4a80      	ldr	r2, [pc, #512]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004508:	430b      	orrs	r3, r1
 800450a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004518:	63bb      	str	r3, [r7, #56]	; 0x38
 800451a:	2300      	movs	r3, #0
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800451e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004522:	460b      	mov	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	d009      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004528:	4b77      	ldr	r3, [pc, #476]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800452a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	4a74      	ldr	r2, [pc, #464]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004538:	430b      	orrs	r3, r1
 800453a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004548:	633b      	str	r3, [r7, #48]	; 0x30
 800454a:	2300      	movs	r3, #0
 800454c:	637b      	str	r3, [r7, #52]	; 0x34
 800454e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004552:	460b      	mov	r3, r1
 8004554:	4313      	orrs	r3, r2
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004558:	4b6b      	ldr	r3, [pc, #428]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800455a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004568:	4a67      	ldr	r2, [pc, #412]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800456a:	430b      	orrs	r3, r1
 800456c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	2100      	movs	r1, #0
 8004578:	62b9      	str	r1, [r7, #40]	; 0x28
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004580:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004584:	460b      	mov	r3, r1
 8004586:	4313      	orrs	r3, r2
 8004588:	d011      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458e:	3308      	adds	r3, #8
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fb78 	bl	8004c88 <RCCEx_PLL2_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800459e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	2100      	movs	r1, #0
 80045b8:	6239      	str	r1, [r7, #32]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
 80045c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045c4:	460b      	mov	r3, r1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	d011      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ce:	3308      	adds	r3, #8
 80045d0:	2101      	movs	r1, #1
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fb58 	bl	8004c88 <RCCEx_PLL2_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f6:	2100      	movs	r1, #0
 80045f8:	61b9      	str	r1, [r7, #24]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004604:	460b      	mov	r3, r1
 8004606:	4313      	orrs	r3, r2
 8004608:	d011      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460e:	3308      	adds	r3, #8
 8004610:	2102      	movs	r1, #2
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fb38 	bl	8004c88 <RCCEx_PLL2_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800461e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800462a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	2100      	movs	r1, #0
 8004638:	6139      	str	r1, [r7, #16]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004644:	460b      	mov	r3, r1
 8004646:	4313      	orrs	r3, r2
 8004648:	d011      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464e:	3328      	adds	r3, #40	; 0x28
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fbca 	bl	8004dec <RCCEx_PLL3_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800465e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800466a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	2100      	movs	r1, #0
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004684:	460b      	mov	r3, r1
 8004686:	4313      	orrs	r3, r2
 8004688:	d011      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468e:	3328      	adds	r3, #40	; 0x28
 8004690:	2101      	movs	r1, #1
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fbaa 	bl	8004dec <RCCEx_PLL3_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800469e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	2100      	movs	r1, #0
 80046b8:	6039      	str	r1, [r7, #0]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046c4:	460b      	mov	r3, r1
 80046c6:	4313      	orrs	r3, r2
 80046c8:	d011      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ce:	3328      	adds	r3, #40	; 0x28
 80046d0:	2102      	movs	r1, #2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fb8a 	bl	8004dec <RCCEx_PLL3_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80046de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80046ee:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e000      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004702:	46bd      	mov	sp, r7
 8004704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004708:	58024400 	.word	0x58024400

0800470c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004710:	f7fe fd96 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4904      	ldr	r1, [pc, #16]	; (8004734 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	58024400 	.word	0x58024400
 8004734:	08006780 	.word	0x08006780

08004738 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004738:	b480      	push	{r7}
 800473a:	b089      	sub	sp, #36	; 0x24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004740:	4ba1      	ldr	r3, [pc, #644]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800474a:	4b9f      	ldr	r3, [pc, #636]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	0b1b      	lsrs	r3, r3, #12
 8004750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004754:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004756:	4b9c      	ldr	r3, [pc, #624]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	091b      	lsrs	r3, r3, #4
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004762:	4b99      	ldr	r3, [pc, #612]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004766:	08db      	lsrs	r3, r3, #3
 8004768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8111 	beq.w	80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b02      	cmp	r3, #2
 800478a:	f000 8083 	beq.w	8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	2b02      	cmp	r3, #2
 8004792:	f200 80a1 	bhi.w	80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d056      	beq.n	8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80047a2:	e099      	b.n	80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047a4:	4b88      	ldr	r3, [pc, #544]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d02d      	beq.n	800480c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047b0:	4b85      	ldr	r3, [pc, #532]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	08db      	lsrs	r3, r3, #3
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	4a84      	ldr	r2, [pc, #528]	; (80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
 80047c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047da:	4b7b      	ldr	r3, [pc, #492]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004806:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800480a:	e087      	b.n	800491c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800481a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481e:	4b6a      	ldr	r3, [pc, #424]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004832:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800483a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800484e:	e065      	b.n	800491c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800485e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004862:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004872:	ed97 6a03 	vldr	s12, [r7, #12]
 8004876:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800487a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800488a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004892:	e043      	b.n	800491c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80048a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a6:	4b48      	ldr	r3, [pc, #288]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048d6:	e021      	b.n	800491c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ea:	4b37      	ldr	r3, [pc, #220]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80048fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800490e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800491a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800491c:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	0a5b      	lsrs	r3, r3, #9
 8004922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004932:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004936:	edd7 6a07 	vldr	s13, [r7, #28]
 800493a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004942:	ee17 2a90 	vmov	r2, s15
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800494a:	4b1f      	ldr	r3, [pc, #124]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004960:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004964:	edd7 6a07 	vldr	s13, [r7, #28]
 8004968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800496c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004970:	ee17 2a90 	vmov	r2, s15
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004978:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	0e1b      	lsrs	r3, r3, #24
 800497e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800498e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004992:	edd7 6a07 	vldr	s13, [r7, #28]
 8004996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800499a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800499e:	ee17 2a90 	vmov	r2, s15
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049a6:	e008      	b.n	80049ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	609a      	str	r2, [r3, #8]
}
 80049ba:	bf00      	nop
 80049bc:	3724      	adds	r7, #36	; 0x24
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	58024400 	.word	0x58024400
 80049cc:	03d09000 	.word	0x03d09000
 80049d0:	46000000 	.word	0x46000000
 80049d4:	4c742400 	.word	0x4c742400
 80049d8:	4a742400 	.word	0x4a742400
 80049dc:	4af42400 	.word	0x4af42400

080049e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b089      	sub	sp, #36	; 0x24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049e8:	4ba1      	ldr	r3, [pc, #644]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049f2:	4b9f      	ldr	r3, [pc, #636]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	0d1b      	lsrs	r3, r3, #20
 80049f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049fe:	4b9c      	ldr	r3, [pc, #624]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	0a1b      	lsrs	r3, r3, #8
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a0a:	4b99      	ldr	r3, [pc, #612]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	08db      	lsrs	r3, r3, #3
 8004a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8111 	beq.w	8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	f000 8083 	beq.w	8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	f200 80a1 	bhi.w	8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d056      	beq.n	8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a4a:	e099      	b.n	8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a4c:	4b88      	ldr	r3, [pc, #544]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d02d      	beq.n	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a58:	4b85      	ldr	r3, [pc, #532]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	08db      	lsrs	r3, r3, #3
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	4a84      	ldr	r2, [pc, #528]	; (8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
 8004a68:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	ee07 3a90 	vmov	s15, r3
 8004a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a82:	4b7b      	ldr	r3, [pc, #492]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ab2:	e087      	b.n	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004abe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac6:	4b6a      	ldr	r3, [pc, #424]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ada:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004af6:	e065      	b.n	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0a:	4b59      	ldr	r3, [pc, #356]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b3a:	e043      	b.n	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4e:	4b48      	ldr	r3, [pc, #288]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b7e:	e021      	b.n	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b92:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004bc4:	4b2a      	ldr	r3, [pc, #168]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	0a5b      	lsrs	r3, r3, #9
 8004bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bea:	ee17 2a90 	vmov	r2, s15
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004bf2:	4b1f      	ldr	r3, [pc, #124]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	0c1b      	lsrs	r3, r3, #16
 8004bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c18:	ee17 2a90 	vmov	r2, s15
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c20:	4b13      	ldr	r3, [pc, #76]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	0e1b      	lsrs	r3, r3, #24
 8004c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c46:	ee17 2a90 	vmov	r2, s15
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c4e:	e008      	b.n	8004c62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	609a      	str	r2, [r3, #8]
}
 8004c62:	bf00      	nop
 8004c64:	3724      	adds	r7, #36	; 0x24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	58024400 	.word	0x58024400
 8004c74:	03d09000 	.word	0x03d09000
 8004c78:	46000000 	.word	0x46000000
 8004c7c:	4c742400 	.word	0x4c742400
 8004c80:	4a742400 	.word	0x4a742400
 8004c84:	4af42400 	.word	0x4af42400

08004c88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c96:	4b53      	ldr	r3, [pc, #332]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d101      	bne.n	8004ca6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e099      	b.n	8004dda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ca6:	4b4f      	ldr	r3, [pc, #316]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a4e      	ldr	r2, [pc, #312]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004cac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb2:	f7fc fa17 	bl	80010e4 <HAL_GetTick>
 8004cb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cb8:	e008      	b.n	8004ccc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cba:	f7fc fa13 	bl	80010e4 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e086      	b.n	8004dda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ccc:	4b45      	ldr	r3, [pc, #276]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1f0      	bne.n	8004cba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004cd8:	4b42      	ldr	r3, [pc, #264]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	031b      	lsls	r3, r3, #12
 8004ce6:	493f      	ldr	r1, [pc, #252]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	628b      	str	r3, [r1, #40]	; 0x28
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	025b      	lsls	r3, r3, #9
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	041b      	lsls	r3, r3, #16
 8004d0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	061b      	lsls	r3, r3, #24
 8004d18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d1c:	4931      	ldr	r1, [pc, #196]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d22:	4b30      	ldr	r3, [pc, #192]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	492d      	ldr	r1, [pc, #180]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d34:	4b2b      	ldr	r3, [pc, #172]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	f023 0220 	bic.w	r2, r3, #32
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	4928      	ldr	r1, [pc, #160]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d46:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	4a26      	ldr	r2, [pc, #152]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d4c:	f023 0310 	bic.w	r3, r3, #16
 8004d50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d52:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d56:	4b24      	ldr	r3, [pc, #144]	; (8004de8 <RCCEx_PLL2_Config+0x160>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	69d2      	ldr	r2, [r2, #28]
 8004d5e:	00d2      	lsls	r2, r2, #3
 8004d60:	4920      	ldr	r1, [pc, #128]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d66:	4b1f      	ldr	r3, [pc, #124]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	4a1e      	ldr	r2, [pc, #120]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d6c:	f043 0310 	orr.w	r3, r3, #16
 8004d70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d78:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d84:	e00f      	b.n	8004da6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d106      	bne.n	8004d9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d8c:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	4a14      	ldr	r2, [pc, #80]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d98:	e005      	b.n	8004da6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	4a11      	ldr	r2, [pc, #68]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004da0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004da4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a0e      	ldr	r2, [pc, #56]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004dac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db2:	f7fc f997 	bl	80010e4 <HAL_GetTick>
 8004db6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004db8:	e008      	b.n	8004dcc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dba:	f7fc f993 	bl	80010e4 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e006      	b.n	8004dda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f0      	beq.n	8004dba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	58024400 	.word	0x58024400
 8004de8:	ffff0007 	.word	0xffff0007

08004dec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dfa:	4b53      	ldr	r3, [pc, #332]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d101      	bne.n	8004e0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e099      	b.n	8004f3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e0a:	4b4f      	ldr	r3, [pc, #316]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a4e      	ldr	r2, [pc, #312]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e16:	f7fc f965 	bl	80010e4 <HAL_GetTick>
 8004e1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e1c:	e008      	b.n	8004e30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e1e:	f7fc f961 	bl	80010e4 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e086      	b.n	8004f3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e30:	4b45      	ldr	r3, [pc, #276]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f0      	bne.n	8004e1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e3c:	4b42      	ldr	r3, [pc, #264]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	051b      	lsls	r3, r3, #20
 8004e4a:	493f      	ldr	r1, [pc, #252]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	628b      	str	r3, [r1, #40]	; 0x28
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	025b      	lsls	r3, r3, #9
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	041b      	lsls	r3, r3, #16
 8004e6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	061b      	lsls	r3, r3, #24
 8004e7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e80:	4931      	ldr	r1, [pc, #196]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e86:	4b30      	ldr	r3, [pc, #192]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	492d      	ldr	r1, [pc, #180]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e98:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	4928      	ldr	r1, [pc, #160]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004eaa:	4b27      	ldr	r3, [pc, #156]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	4a26      	ldr	r2, [pc, #152]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004eb6:	4b24      	ldr	r3, [pc, #144]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eba:	4b24      	ldr	r3, [pc, #144]	; (8004f4c <RCCEx_PLL3_Config+0x160>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	69d2      	ldr	r2, [r2, #28]
 8004ec2:	00d2      	lsls	r2, r2, #3
 8004ec4:	4920      	ldr	r1, [pc, #128]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004eca:	4b1f      	ldr	r3, [pc, #124]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004edc:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ee2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ee8:	e00f      	b.n	8004f0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d106      	bne.n	8004efe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ef0:	4b15      	ldr	r3, [pc, #84]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	4a14      	ldr	r2, [pc, #80]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ef6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004efc:	e005      	b.n	8004f0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004efe:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	4a11      	ldr	r2, [pc, #68]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f0a:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a0e      	ldr	r2, [pc, #56]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f16:	f7fc f8e5 	bl	80010e4 <HAL_GetTick>
 8004f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f1c:	e008      	b.n	8004f30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f1e:	f7fc f8e1 	bl	80010e4 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e006      	b.n	8004f3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f0      	beq.n	8004f1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	58024400 	.word	0x58024400
 8004f4c:	ffff0007 	.word	0xffff0007

08004f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e042      	b.n	8004fe8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7fb fee5 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2224      	movs	r2, #36	; 0x24
 8004f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0201 	bic.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f82c 	bl	8004ff0 <UART_SetConfig>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e022      	b.n	8004fe8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fd88 	bl	8005ac0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fe0f 	bl	8005c04 <UART_CheckIdleState>
 8004fe6:	4603      	mov	r3, r0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff4:	b092      	sub	sp, #72	; 0x48
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	431a      	orrs	r2, r3
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	431a      	orrs	r2, r3
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	4313      	orrs	r3, r2
 8005016:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4bbe      	ldr	r3, [pc, #760]	; (8005318 <UART_SetConfig+0x328>)
 8005020:	4013      	ands	r3, r2
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005028:	430b      	orrs	r3, r1
 800502a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4ab3      	ldr	r2, [pc, #716]	; (800531c <UART_SetConfig+0x32c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d004      	beq.n	800505c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005058:	4313      	orrs	r3, r2
 800505a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	4baf      	ldr	r3, [pc, #700]	; (8005320 <UART_SetConfig+0x330>)
 8005064:	4013      	ands	r3, r2
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800506c:	430b      	orrs	r3, r1
 800506e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	f023 010f 	bic.w	r1, r3, #15
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4aa6      	ldr	r2, [pc, #664]	; (8005324 <UART_SetConfig+0x334>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d177      	bne.n	8005180 <UART_SetConfig+0x190>
 8005090:	4ba5      	ldr	r3, [pc, #660]	; (8005328 <UART_SetConfig+0x338>)
 8005092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005094:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005098:	2b28      	cmp	r3, #40	; 0x28
 800509a:	d86d      	bhi.n	8005178 <UART_SetConfig+0x188>
 800509c:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <UART_SetConfig+0xb4>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	08005149 	.word	0x08005149
 80050a8:	08005179 	.word	0x08005179
 80050ac:	08005179 	.word	0x08005179
 80050b0:	08005179 	.word	0x08005179
 80050b4:	08005179 	.word	0x08005179
 80050b8:	08005179 	.word	0x08005179
 80050bc:	08005179 	.word	0x08005179
 80050c0:	08005179 	.word	0x08005179
 80050c4:	08005151 	.word	0x08005151
 80050c8:	08005179 	.word	0x08005179
 80050cc:	08005179 	.word	0x08005179
 80050d0:	08005179 	.word	0x08005179
 80050d4:	08005179 	.word	0x08005179
 80050d8:	08005179 	.word	0x08005179
 80050dc:	08005179 	.word	0x08005179
 80050e0:	08005179 	.word	0x08005179
 80050e4:	08005159 	.word	0x08005159
 80050e8:	08005179 	.word	0x08005179
 80050ec:	08005179 	.word	0x08005179
 80050f0:	08005179 	.word	0x08005179
 80050f4:	08005179 	.word	0x08005179
 80050f8:	08005179 	.word	0x08005179
 80050fc:	08005179 	.word	0x08005179
 8005100:	08005179 	.word	0x08005179
 8005104:	08005161 	.word	0x08005161
 8005108:	08005179 	.word	0x08005179
 800510c:	08005179 	.word	0x08005179
 8005110:	08005179 	.word	0x08005179
 8005114:	08005179 	.word	0x08005179
 8005118:	08005179 	.word	0x08005179
 800511c:	08005179 	.word	0x08005179
 8005120:	08005179 	.word	0x08005179
 8005124:	08005169 	.word	0x08005169
 8005128:	08005179 	.word	0x08005179
 800512c:	08005179 	.word	0x08005179
 8005130:	08005179 	.word	0x08005179
 8005134:	08005179 	.word	0x08005179
 8005138:	08005179 	.word	0x08005179
 800513c:	08005179 	.word	0x08005179
 8005140:	08005179 	.word	0x08005179
 8005144:	08005171 	.word	0x08005171
 8005148:	2301      	movs	r3, #1
 800514a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800514e:	e222      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005150:	2304      	movs	r3, #4
 8005152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005156:	e21e      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005158:	2308      	movs	r3, #8
 800515a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515e:	e21a      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005160:	2310      	movs	r3, #16
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005166:	e216      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005168:	2320      	movs	r3, #32
 800516a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516e:	e212      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005170:	2340      	movs	r3, #64	; 0x40
 8005172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005176:	e20e      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005178:	2380      	movs	r3, #128	; 0x80
 800517a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517e:	e20a      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a69      	ldr	r2, [pc, #420]	; (800532c <UART_SetConfig+0x33c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d130      	bne.n	80051ec <UART_SetConfig+0x1fc>
 800518a:	4b67      	ldr	r3, [pc, #412]	; (8005328 <UART_SetConfig+0x338>)
 800518c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	2b05      	cmp	r3, #5
 8005194:	d826      	bhi.n	80051e4 <UART_SetConfig+0x1f4>
 8005196:	a201      	add	r2, pc, #4	; (adr r2, 800519c <UART_SetConfig+0x1ac>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051b5 	.word	0x080051b5
 80051a0:	080051bd 	.word	0x080051bd
 80051a4:	080051c5 	.word	0x080051c5
 80051a8:	080051cd 	.word	0x080051cd
 80051ac:	080051d5 	.word	0x080051d5
 80051b0:	080051dd 	.word	0x080051dd
 80051b4:	2300      	movs	r3, #0
 80051b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ba:	e1ec      	b.n	8005596 <UART_SetConfig+0x5a6>
 80051bc:	2304      	movs	r3, #4
 80051be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c2:	e1e8      	b.n	8005596 <UART_SetConfig+0x5a6>
 80051c4:	2308      	movs	r3, #8
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ca:	e1e4      	b.n	8005596 <UART_SetConfig+0x5a6>
 80051cc:	2310      	movs	r3, #16
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d2:	e1e0      	b.n	8005596 <UART_SetConfig+0x5a6>
 80051d4:	2320      	movs	r3, #32
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051da:	e1dc      	b.n	8005596 <UART_SetConfig+0x5a6>
 80051dc:	2340      	movs	r3, #64	; 0x40
 80051de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e2:	e1d8      	b.n	8005596 <UART_SetConfig+0x5a6>
 80051e4:	2380      	movs	r3, #128	; 0x80
 80051e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ea:	e1d4      	b.n	8005596 <UART_SetConfig+0x5a6>
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a4f      	ldr	r2, [pc, #316]	; (8005330 <UART_SetConfig+0x340>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d130      	bne.n	8005258 <UART_SetConfig+0x268>
 80051f6:	4b4c      	ldr	r3, [pc, #304]	; (8005328 <UART_SetConfig+0x338>)
 80051f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	2b05      	cmp	r3, #5
 8005200:	d826      	bhi.n	8005250 <UART_SetConfig+0x260>
 8005202:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <UART_SetConfig+0x218>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	08005221 	.word	0x08005221
 800520c:	08005229 	.word	0x08005229
 8005210:	08005231 	.word	0x08005231
 8005214:	08005239 	.word	0x08005239
 8005218:	08005241 	.word	0x08005241
 800521c:	08005249 	.word	0x08005249
 8005220:	2300      	movs	r3, #0
 8005222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005226:	e1b6      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005228:	2304      	movs	r3, #4
 800522a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522e:	e1b2      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005230:	2308      	movs	r3, #8
 8005232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005236:	e1ae      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005238:	2310      	movs	r3, #16
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523e:	e1aa      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005240:	2320      	movs	r3, #32
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005246:	e1a6      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005248:	2340      	movs	r3, #64	; 0x40
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524e:	e1a2      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005256:	e19e      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a35      	ldr	r2, [pc, #212]	; (8005334 <UART_SetConfig+0x344>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d130      	bne.n	80052c4 <UART_SetConfig+0x2d4>
 8005262:	4b31      	ldr	r3, [pc, #196]	; (8005328 <UART_SetConfig+0x338>)
 8005264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	2b05      	cmp	r3, #5
 800526c:	d826      	bhi.n	80052bc <UART_SetConfig+0x2cc>
 800526e:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <UART_SetConfig+0x284>)
 8005270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005274:	0800528d 	.word	0x0800528d
 8005278:	08005295 	.word	0x08005295
 800527c:	0800529d 	.word	0x0800529d
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052ad 	.word	0x080052ad
 8005288:	080052b5 	.word	0x080052b5
 800528c:	2300      	movs	r3, #0
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005292:	e180      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005294:	2304      	movs	r3, #4
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529a:	e17c      	b.n	8005596 <UART_SetConfig+0x5a6>
 800529c:	2308      	movs	r3, #8
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a2:	e178      	b.n	8005596 <UART_SetConfig+0x5a6>
 80052a4:	2310      	movs	r3, #16
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052aa:	e174      	b.n	8005596 <UART_SetConfig+0x5a6>
 80052ac:	2320      	movs	r3, #32
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b2:	e170      	b.n	8005596 <UART_SetConfig+0x5a6>
 80052b4:	2340      	movs	r3, #64	; 0x40
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ba:	e16c      	b.n	8005596 <UART_SetConfig+0x5a6>
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c2:	e168      	b.n	8005596 <UART_SetConfig+0x5a6>
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a1b      	ldr	r2, [pc, #108]	; (8005338 <UART_SetConfig+0x348>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d142      	bne.n	8005354 <UART_SetConfig+0x364>
 80052ce:	4b16      	ldr	r3, [pc, #88]	; (8005328 <UART_SetConfig+0x338>)
 80052d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	2b05      	cmp	r3, #5
 80052d8:	d838      	bhi.n	800534c <UART_SetConfig+0x35c>
 80052da:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <UART_SetConfig+0x2f0>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	080052f9 	.word	0x080052f9
 80052e4:	08005301 	.word	0x08005301
 80052e8:	08005309 	.word	0x08005309
 80052ec:	08005311 	.word	0x08005311
 80052f0:	0800533d 	.word	0x0800533d
 80052f4:	08005345 	.word	0x08005345
 80052f8:	2300      	movs	r3, #0
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fe:	e14a      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005300:	2304      	movs	r3, #4
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005306:	e146      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005308:	2308      	movs	r3, #8
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530e:	e142      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005310:	2310      	movs	r3, #16
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005316:	e13e      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005318:	cfff69f3 	.word	0xcfff69f3
 800531c:	58000c00 	.word	0x58000c00
 8005320:	11fff4ff 	.word	0x11fff4ff
 8005324:	40011000 	.word	0x40011000
 8005328:	58024400 	.word	0x58024400
 800532c:	40004400 	.word	0x40004400
 8005330:	40004800 	.word	0x40004800
 8005334:	40004c00 	.word	0x40004c00
 8005338:	40005000 	.word	0x40005000
 800533c:	2320      	movs	r3, #32
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005342:	e128      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005344:	2340      	movs	r3, #64	; 0x40
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534a:	e124      	b.n	8005596 <UART_SetConfig+0x5a6>
 800534c:	2380      	movs	r3, #128	; 0x80
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005352:	e120      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4acb      	ldr	r2, [pc, #812]	; (8005688 <UART_SetConfig+0x698>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d176      	bne.n	800544c <UART_SetConfig+0x45c>
 800535e:	4bcb      	ldr	r3, [pc, #812]	; (800568c <UART_SetConfig+0x69c>)
 8005360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005366:	2b28      	cmp	r3, #40	; 0x28
 8005368:	d86c      	bhi.n	8005444 <UART_SetConfig+0x454>
 800536a:	a201      	add	r2, pc, #4	; (adr r2, 8005370 <UART_SetConfig+0x380>)
 800536c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005370:	08005415 	.word	0x08005415
 8005374:	08005445 	.word	0x08005445
 8005378:	08005445 	.word	0x08005445
 800537c:	08005445 	.word	0x08005445
 8005380:	08005445 	.word	0x08005445
 8005384:	08005445 	.word	0x08005445
 8005388:	08005445 	.word	0x08005445
 800538c:	08005445 	.word	0x08005445
 8005390:	0800541d 	.word	0x0800541d
 8005394:	08005445 	.word	0x08005445
 8005398:	08005445 	.word	0x08005445
 800539c:	08005445 	.word	0x08005445
 80053a0:	08005445 	.word	0x08005445
 80053a4:	08005445 	.word	0x08005445
 80053a8:	08005445 	.word	0x08005445
 80053ac:	08005445 	.word	0x08005445
 80053b0:	08005425 	.word	0x08005425
 80053b4:	08005445 	.word	0x08005445
 80053b8:	08005445 	.word	0x08005445
 80053bc:	08005445 	.word	0x08005445
 80053c0:	08005445 	.word	0x08005445
 80053c4:	08005445 	.word	0x08005445
 80053c8:	08005445 	.word	0x08005445
 80053cc:	08005445 	.word	0x08005445
 80053d0:	0800542d 	.word	0x0800542d
 80053d4:	08005445 	.word	0x08005445
 80053d8:	08005445 	.word	0x08005445
 80053dc:	08005445 	.word	0x08005445
 80053e0:	08005445 	.word	0x08005445
 80053e4:	08005445 	.word	0x08005445
 80053e8:	08005445 	.word	0x08005445
 80053ec:	08005445 	.word	0x08005445
 80053f0:	08005435 	.word	0x08005435
 80053f4:	08005445 	.word	0x08005445
 80053f8:	08005445 	.word	0x08005445
 80053fc:	08005445 	.word	0x08005445
 8005400:	08005445 	.word	0x08005445
 8005404:	08005445 	.word	0x08005445
 8005408:	08005445 	.word	0x08005445
 800540c:	08005445 	.word	0x08005445
 8005410:	0800543d 	.word	0x0800543d
 8005414:	2301      	movs	r3, #1
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541a:	e0bc      	b.n	8005596 <UART_SetConfig+0x5a6>
 800541c:	2304      	movs	r3, #4
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005422:	e0b8      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005424:	2308      	movs	r3, #8
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542a:	e0b4      	b.n	8005596 <UART_SetConfig+0x5a6>
 800542c:	2310      	movs	r3, #16
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005432:	e0b0      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005434:	2320      	movs	r3, #32
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543a:	e0ac      	b.n	8005596 <UART_SetConfig+0x5a6>
 800543c:	2340      	movs	r3, #64	; 0x40
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005442:	e0a8      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005444:	2380      	movs	r3, #128	; 0x80
 8005446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544a:	e0a4      	b.n	8005596 <UART_SetConfig+0x5a6>
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a8f      	ldr	r2, [pc, #572]	; (8005690 <UART_SetConfig+0x6a0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d130      	bne.n	80054b8 <UART_SetConfig+0x4c8>
 8005456:	4b8d      	ldr	r3, [pc, #564]	; (800568c <UART_SetConfig+0x69c>)
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	2b05      	cmp	r3, #5
 8005460:	d826      	bhi.n	80054b0 <UART_SetConfig+0x4c0>
 8005462:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <UART_SetConfig+0x478>)
 8005464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005468:	08005481 	.word	0x08005481
 800546c:	08005489 	.word	0x08005489
 8005470:	08005491 	.word	0x08005491
 8005474:	08005499 	.word	0x08005499
 8005478:	080054a1 	.word	0x080054a1
 800547c:	080054a9 	.word	0x080054a9
 8005480:	2300      	movs	r3, #0
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005486:	e086      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005488:	2304      	movs	r3, #4
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548e:	e082      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005490:	2308      	movs	r3, #8
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005496:	e07e      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005498:	2310      	movs	r3, #16
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549e:	e07a      	b.n	8005596 <UART_SetConfig+0x5a6>
 80054a0:	2320      	movs	r3, #32
 80054a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a6:	e076      	b.n	8005596 <UART_SetConfig+0x5a6>
 80054a8:	2340      	movs	r3, #64	; 0x40
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ae:	e072      	b.n	8005596 <UART_SetConfig+0x5a6>
 80054b0:	2380      	movs	r3, #128	; 0x80
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b6:	e06e      	b.n	8005596 <UART_SetConfig+0x5a6>
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a75      	ldr	r2, [pc, #468]	; (8005694 <UART_SetConfig+0x6a4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d130      	bne.n	8005524 <UART_SetConfig+0x534>
 80054c2:	4b72      	ldr	r3, [pc, #456]	; (800568c <UART_SetConfig+0x69c>)
 80054c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	2b05      	cmp	r3, #5
 80054cc:	d826      	bhi.n	800551c <UART_SetConfig+0x52c>
 80054ce:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <UART_SetConfig+0x4e4>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	080054ed 	.word	0x080054ed
 80054d8:	080054f5 	.word	0x080054f5
 80054dc:	080054fd 	.word	0x080054fd
 80054e0:	08005505 	.word	0x08005505
 80054e4:	0800550d 	.word	0x0800550d
 80054e8:	08005515 	.word	0x08005515
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054f2:	e050      	b.n	8005596 <UART_SetConfig+0x5a6>
 80054f4:	2304      	movs	r3, #4
 80054f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054fa:	e04c      	b.n	8005596 <UART_SetConfig+0x5a6>
 80054fc:	2308      	movs	r3, #8
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005502:	e048      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005504:	2310      	movs	r3, #16
 8005506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550a:	e044      	b.n	8005596 <UART_SetConfig+0x5a6>
 800550c:	2320      	movs	r3, #32
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005512:	e040      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005514:	2340      	movs	r3, #64	; 0x40
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551a:	e03c      	b.n	8005596 <UART_SetConfig+0x5a6>
 800551c:	2380      	movs	r3, #128	; 0x80
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005522:	e038      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a5b      	ldr	r2, [pc, #364]	; (8005698 <UART_SetConfig+0x6a8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d130      	bne.n	8005590 <UART_SetConfig+0x5a0>
 800552e:	4b57      	ldr	r3, [pc, #348]	; (800568c <UART_SetConfig+0x69c>)
 8005530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	2b05      	cmp	r3, #5
 8005538:	d826      	bhi.n	8005588 <UART_SetConfig+0x598>
 800553a:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <UART_SetConfig+0x550>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	08005559 	.word	0x08005559
 8005544:	08005561 	.word	0x08005561
 8005548:	08005569 	.word	0x08005569
 800554c:	08005571 	.word	0x08005571
 8005550:	08005579 	.word	0x08005579
 8005554:	08005581 	.word	0x08005581
 8005558:	2302      	movs	r3, #2
 800555a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555e:	e01a      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005560:	2304      	movs	r3, #4
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005566:	e016      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005568:	2308      	movs	r3, #8
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556e:	e012      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005570:	2310      	movs	r3, #16
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005576:	e00e      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005578:	2320      	movs	r3, #32
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557e:	e00a      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005580:	2340      	movs	r3, #64	; 0x40
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005586:	e006      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005588:	2380      	movs	r3, #128	; 0x80
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558e:	e002      	b.n	8005596 <UART_SetConfig+0x5a6>
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a3f      	ldr	r2, [pc, #252]	; (8005698 <UART_SetConfig+0x6a8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	f040 80f8 	bne.w	8005792 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	dc46      	bgt.n	8005638 <UART_SetConfig+0x648>
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	f2c0 8082 	blt.w	80056b4 <UART_SetConfig+0x6c4>
 80055b0:	3b02      	subs	r3, #2
 80055b2:	2b1e      	cmp	r3, #30
 80055b4:	d87e      	bhi.n	80056b4 <UART_SetConfig+0x6c4>
 80055b6:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <UART_SetConfig+0x5cc>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	0800563f 	.word	0x0800563f
 80055c0:	080056b5 	.word	0x080056b5
 80055c4:	08005647 	.word	0x08005647
 80055c8:	080056b5 	.word	0x080056b5
 80055cc:	080056b5 	.word	0x080056b5
 80055d0:	080056b5 	.word	0x080056b5
 80055d4:	08005657 	.word	0x08005657
 80055d8:	080056b5 	.word	0x080056b5
 80055dc:	080056b5 	.word	0x080056b5
 80055e0:	080056b5 	.word	0x080056b5
 80055e4:	080056b5 	.word	0x080056b5
 80055e8:	080056b5 	.word	0x080056b5
 80055ec:	080056b5 	.word	0x080056b5
 80055f0:	080056b5 	.word	0x080056b5
 80055f4:	08005667 	.word	0x08005667
 80055f8:	080056b5 	.word	0x080056b5
 80055fc:	080056b5 	.word	0x080056b5
 8005600:	080056b5 	.word	0x080056b5
 8005604:	080056b5 	.word	0x080056b5
 8005608:	080056b5 	.word	0x080056b5
 800560c:	080056b5 	.word	0x080056b5
 8005610:	080056b5 	.word	0x080056b5
 8005614:	080056b5 	.word	0x080056b5
 8005618:	080056b5 	.word	0x080056b5
 800561c:	080056b5 	.word	0x080056b5
 8005620:	080056b5 	.word	0x080056b5
 8005624:	080056b5 	.word	0x080056b5
 8005628:	080056b5 	.word	0x080056b5
 800562c:	080056b5 	.word	0x080056b5
 8005630:	080056b5 	.word	0x080056b5
 8005634:	080056a7 	.word	0x080056a7
 8005638:	2b40      	cmp	r3, #64	; 0x40
 800563a:	d037      	beq.n	80056ac <UART_SetConfig+0x6bc>
 800563c:	e03a      	b.n	80056b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800563e:	f7ff f865 	bl	800470c <HAL_RCCEx_GetD3PCLK1Freq>
 8005642:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005644:	e03c      	b.n	80056c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff f874 	bl	8004738 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005654:	e034      	b.n	80056c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005656:	f107 0318 	add.w	r3, r7, #24
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff f9c0 	bl	80049e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005664:	e02c      	b.n	80056c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005666:	4b09      	ldr	r3, [pc, #36]	; (800568c <UART_SetConfig+0x69c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d016      	beq.n	80056a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005672:	4b06      	ldr	r3, [pc, #24]	; (800568c <UART_SetConfig+0x69c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	08db      	lsrs	r3, r3, #3
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	4a07      	ldr	r2, [pc, #28]	; (800569c <UART_SetConfig+0x6ac>)
 800567e:	fa22 f303 	lsr.w	r3, r2, r3
 8005682:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005684:	e01c      	b.n	80056c0 <UART_SetConfig+0x6d0>
 8005686:	bf00      	nop
 8005688:	40011400 	.word	0x40011400
 800568c:	58024400 	.word	0x58024400
 8005690:	40007800 	.word	0x40007800
 8005694:	40007c00 	.word	0x40007c00
 8005698:	58000c00 	.word	0x58000c00
 800569c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80056a0:	4b9d      	ldr	r3, [pc, #628]	; (8005918 <UART_SetConfig+0x928>)
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056a4:	e00c      	b.n	80056c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056a6:	4b9d      	ldr	r3, [pc, #628]	; (800591c <UART_SetConfig+0x92c>)
 80056a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056aa:	e009      	b.n	80056c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056b2:	e005      	b.n	80056c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80056be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 81de 	beq.w	8005a84 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	4a94      	ldr	r2, [pc, #592]	; (8005920 <UART_SetConfig+0x930>)
 80056ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056d2:	461a      	mov	r2, r3
 80056d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80056da:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	4413      	add	r3, r2
 80056e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d305      	bcc.n	80056f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d903      	bls.n	8005700 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80056fe:	e1c1      	b.n	8005a84 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005702:	2200      	movs	r2, #0
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	60fa      	str	r2, [r7, #12]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	4a84      	ldr	r2, [pc, #528]	; (8005920 <UART_SetConfig+0x930>)
 800570e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005712:	b29b      	uxth	r3, r3
 8005714:	2200      	movs	r2, #0
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	607a      	str	r2, [r7, #4]
 800571a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800571e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005722:	f7fa fdd9 	bl	80002d8 <__aeabi_uldivmod>
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4610      	mov	r0, r2
 800572c:	4619      	mov	r1, r3
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	020b      	lsls	r3, r1, #8
 8005738:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800573c:	0202      	lsls	r2, r0, #8
 800573e:	6979      	ldr	r1, [r7, #20]
 8005740:	6849      	ldr	r1, [r1, #4]
 8005742:	0849      	lsrs	r1, r1, #1
 8005744:	2000      	movs	r0, #0
 8005746:	460c      	mov	r4, r1
 8005748:	4605      	mov	r5, r0
 800574a:	eb12 0804 	adds.w	r8, r2, r4
 800574e:	eb43 0905 	adc.w	r9, r3, r5
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	469a      	mov	sl, r3
 800575a:	4693      	mov	fp, r2
 800575c:	4652      	mov	r2, sl
 800575e:	465b      	mov	r3, fp
 8005760:	4640      	mov	r0, r8
 8005762:	4649      	mov	r1, r9
 8005764:	f7fa fdb8 	bl	80002d8 <__aeabi_uldivmod>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4613      	mov	r3, r2
 800576e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005776:	d308      	bcc.n	800578a <UART_SetConfig+0x79a>
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800577e:	d204      	bcs.n	800578a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005786:	60da      	str	r2, [r3, #12]
 8005788:	e17c      	b.n	8005a84 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005790:	e178      	b.n	8005a84 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800579a:	f040 80c5 	bne.w	8005928 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800579e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	dc48      	bgt.n	8005838 <UART_SetConfig+0x848>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	db7b      	blt.n	80058a2 <UART_SetConfig+0x8b2>
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	d879      	bhi.n	80058a2 <UART_SetConfig+0x8b2>
 80057ae:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <UART_SetConfig+0x7c4>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	0800583f 	.word	0x0800583f
 80057b8:	08005847 	.word	0x08005847
 80057bc:	080058a3 	.word	0x080058a3
 80057c0:	080058a3 	.word	0x080058a3
 80057c4:	0800584f 	.word	0x0800584f
 80057c8:	080058a3 	.word	0x080058a3
 80057cc:	080058a3 	.word	0x080058a3
 80057d0:	080058a3 	.word	0x080058a3
 80057d4:	0800585f 	.word	0x0800585f
 80057d8:	080058a3 	.word	0x080058a3
 80057dc:	080058a3 	.word	0x080058a3
 80057e0:	080058a3 	.word	0x080058a3
 80057e4:	080058a3 	.word	0x080058a3
 80057e8:	080058a3 	.word	0x080058a3
 80057ec:	080058a3 	.word	0x080058a3
 80057f0:	080058a3 	.word	0x080058a3
 80057f4:	0800586f 	.word	0x0800586f
 80057f8:	080058a3 	.word	0x080058a3
 80057fc:	080058a3 	.word	0x080058a3
 8005800:	080058a3 	.word	0x080058a3
 8005804:	080058a3 	.word	0x080058a3
 8005808:	080058a3 	.word	0x080058a3
 800580c:	080058a3 	.word	0x080058a3
 8005810:	080058a3 	.word	0x080058a3
 8005814:	080058a3 	.word	0x080058a3
 8005818:	080058a3 	.word	0x080058a3
 800581c:	080058a3 	.word	0x080058a3
 8005820:	080058a3 	.word	0x080058a3
 8005824:	080058a3 	.word	0x080058a3
 8005828:	080058a3 	.word	0x080058a3
 800582c:	080058a3 	.word	0x080058a3
 8005830:	080058a3 	.word	0x080058a3
 8005834:	08005895 	.word	0x08005895
 8005838:	2b40      	cmp	r3, #64	; 0x40
 800583a:	d02e      	beq.n	800589a <UART_SetConfig+0x8aa>
 800583c:	e031      	b.n	80058a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800583e:	f7fd fd2f 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 8005842:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005844:	e033      	b.n	80058ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005846:	f7fd fd41 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 800584a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800584c:	e02f      	b.n	80058ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800584e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005852:	4618      	mov	r0, r3
 8005854:	f7fe ff70 	bl	8004738 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800585c:	e027      	b.n	80058ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800585e:	f107 0318 	add.w	r3, r7, #24
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff f8bc 	bl	80049e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800586c:	e01f      	b.n	80058ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800586e:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <UART_SetConfig+0x934>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800587a:	4b2a      	ldr	r3, [pc, #168]	; (8005924 <UART_SetConfig+0x934>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	08db      	lsrs	r3, r3, #3
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	4a24      	ldr	r2, [pc, #144]	; (8005918 <UART_SetConfig+0x928>)
 8005886:	fa22 f303 	lsr.w	r3, r2, r3
 800588a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800588c:	e00f      	b.n	80058ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800588e:	4b22      	ldr	r3, [pc, #136]	; (8005918 <UART_SetConfig+0x928>)
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005892:	e00c      	b.n	80058ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005894:	4b21      	ldr	r3, [pc, #132]	; (800591c <UART_SetConfig+0x92c>)
 8005896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005898:	e009      	b.n	80058ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800589a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800589e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a0:	e005      	b.n	80058ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80058ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 80e7 	beq.w	8005a84 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	4a19      	ldr	r2, [pc, #100]	; (8005920 <UART_SetConfig+0x930>)
 80058bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058c0:	461a      	mov	r2, r3
 80058c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80058c8:	005a      	lsls	r2, r3, #1
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	085b      	lsrs	r3, r3, #1
 80058d0:	441a      	add	r2, r3
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058de:	2b0f      	cmp	r3, #15
 80058e0:	d916      	bls.n	8005910 <UART_SetConfig+0x920>
 80058e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e8:	d212      	bcs.n	8005910 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f023 030f 	bic.w	r3, r3, #15
 80058f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	085b      	lsrs	r3, r3, #1
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	b29a      	uxth	r2, r3
 8005900:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005902:	4313      	orrs	r3, r2
 8005904:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800590c:	60da      	str	r2, [r3, #12]
 800590e:	e0b9      	b.n	8005a84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005916:	e0b5      	b.n	8005a84 <UART_SetConfig+0xa94>
 8005918:	03d09000 	.word	0x03d09000
 800591c:	003d0900 	.word	0x003d0900
 8005920:	08006790 	.word	0x08006790
 8005924:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005928:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800592c:	2b20      	cmp	r3, #32
 800592e:	dc49      	bgt.n	80059c4 <UART_SetConfig+0x9d4>
 8005930:	2b00      	cmp	r3, #0
 8005932:	db7c      	blt.n	8005a2e <UART_SetConfig+0xa3e>
 8005934:	2b20      	cmp	r3, #32
 8005936:	d87a      	bhi.n	8005a2e <UART_SetConfig+0xa3e>
 8005938:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <UART_SetConfig+0x950>)
 800593a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593e:	bf00      	nop
 8005940:	080059cb 	.word	0x080059cb
 8005944:	080059d3 	.word	0x080059d3
 8005948:	08005a2f 	.word	0x08005a2f
 800594c:	08005a2f 	.word	0x08005a2f
 8005950:	080059db 	.word	0x080059db
 8005954:	08005a2f 	.word	0x08005a2f
 8005958:	08005a2f 	.word	0x08005a2f
 800595c:	08005a2f 	.word	0x08005a2f
 8005960:	080059eb 	.word	0x080059eb
 8005964:	08005a2f 	.word	0x08005a2f
 8005968:	08005a2f 	.word	0x08005a2f
 800596c:	08005a2f 	.word	0x08005a2f
 8005970:	08005a2f 	.word	0x08005a2f
 8005974:	08005a2f 	.word	0x08005a2f
 8005978:	08005a2f 	.word	0x08005a2f
 800597c:	08005a2f 	.word	0x08005a2f
 8005980:	080059fb 	.word	0x080059fb
 8005984:	08005a2f 	.word	0x08005a2f
 8005988:	08005a2f 	.word	0x08005a2f
 800598c:	08005a2f 	.word	0x08005a2f
 8005990:	08005a2f 	.word	0x08005a2f
 8005994:	08005a2f 	.word	0x08005a2f
 8005998:	08005a2f 	.word	0x08005a2f
 800599c:	08005a2f 	.word	0x08005a2f
 80059a0:	08005a2f 	.word	0x08005a2f
 80059a4:	08005a2f 	.word	0x08005a2f
 80059a8:	08005a2f 	.word	0x08005a2f
 80059ac:	08005a2f 	.word	0x08005a2f
 80059b0:	08005a2f 	.word	0x08005a2f
 80059b4:	08005a2f 	.word	0x08005a2f
 80059b8:	08005a2f 	.word	0x08005a2f
 80059bc:	08005a2f 	.word	0x08005a2f
 80059c0:	08005a21 	.word	0x08005a21
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d02e      	beq.n	8005a26 <UART_SetConfig+0xa36>
 80059c8:	e031      	b.n	8005a2e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059ca:	f7fd fc69 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 80059ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059d0:	e033      	b.n	8005a3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059d2:	f7fd fc7b 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 80059d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059d8:	e02f      	b.n	8005a3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fe feaa 	bl	8004738 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059e8:	e027      	b.n	8005a3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059ea:	f107 0318 	add.w	r3, r7, #24
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe fff6 	bl	80049e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059f8:	e01f      	b.n	8005a3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059fa:	4b2d      	ldr	r3, [pc, #180]	; (8005ab0 <UART_SetConfig+0xac0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a06:	4b2a      	ldr	r3, [pc, #168]	; (8005ab0 <UART_SetConfig+0xac0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	08db      	lsrs	r3, r3, #3
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	4a28      	ldr	r2, [pc, #160]	; (8005ab4 <UART_SetConfig+0xac4>)
 8005a12:	fa22 f303 	lsr.w	r3, r2, r3
 8005a16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a18:	e00f      	b.n	8005a3a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005a1a:	4b26      	ldr	r3, [pc, #152]	; (8005ab4 <UART_SetConfig+0xac4>)
 8005a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a1e:	e00c      	b.n	8005a3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a20:	4b25      	ldr	r3, [pc, #148]	; (8005ab8 <UART_SetConfig+0xac8>)
 8005a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a24:	e009      	b.n	8005a3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a2c:	e005      	b.n	8005a3a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a38:	bf00      	nop
    }

    if (pclk != 0U)
 8005a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d021      	beq.n	8005a84 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	4a1d      	ldr	r2, [pc, #116]	; (8005abc <UART_SetConfig+0xacc>)
 8005a46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	085b      	lsrs	r3, r3, #1
 8005a58:	441a      	add	r2, r3
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a62:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	2b0f      	cmp	r3, #15
 8005a68:	d909      	bls.n	8005a7e <UART_SetConfig+0xa8e>
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a70:	d205      	bcs.n	8005a7e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	60da      	str	r2, [r3, #12]
 8005a7c:	e002      	b.n	8005a84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2200      	movs	r2, #0
 8005a98:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005aa0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3748      	adds	r7, #72	; 0x48
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aae:	bf00      	nop
 8005ab0:	58024400 	.word	0x58024400
 8005ab4:	03d09000 	.word	0x03d09000
 8005ab8:	003d0900 	.word	0x003d0900
 8005abc:	08006790 	.word	0x08006790

08005ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00a      	beq.n	8005aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00a      	beq.n	8005b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01a      	beq.n	8005bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bbe:	d10a      	bne.n	8005bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	605a      	str	r2, [r3, #4]
  }
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b098      	sub	sp, #96	; 0x60
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c14:	f7fb fa66 	bl	80010e4 <HAL_GetTick>
 8005c18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d12f      	bne.n	8005c88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c30:	2200      	movs	r2, #0
 8005c32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f88e 	bl	8005d58 <UART_WaitOnFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d022      	beq.n	8005c88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c56:	653b      	str	r3, [r7, #80]	; 0x50
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c60:	647b      	str	r3, [r7, #68]	; 0x44
 8005c62:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e6      	bne.n	8005c42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e063      	b.n	8005d50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0304 	and.w	r3, r3, #4
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d149      	bne.n	8005d2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f857 	bl	8005d58 <UART_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d03c      	beq.n	8005d2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	623b      	str	r3, [r7, #32]
   return(result);
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cce:	633b      	str	r3, [r7, #48]	; 0x30
 8005cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e6      	bne.n	8005cb0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f023 0301 	bic.w	r3, r3, #1
 8005cf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3308      	adds	r3, #8
 8005d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d02:	61fa      	str	r2, [r7, #28]
 8005d04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	69b9      	ldr	r1, [r7, #24]
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e5      	bne.n	8005ce2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e012      	b.n	8005d50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3758      	adds	r7, #88	; 0x58
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	4613      	mov	r3, r2
 8005d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d68:	e049      	b.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d70:	d045      	beq.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d72:	f7fb f9b7 	bl	80010e4 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d302      	bcc.n	8005d88 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e048      	b.n	8005e1e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d031      	beq.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d110      	bne.n	8005dca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2208      	movs	r2, #8
 8005dae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 f839 	bl	8005e28 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2208      	movs	r2, #8
 8005dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e029      	b.n	8005e1e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd8:	d111      	bne.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005de2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f81f 	bl	8005e28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e00f      	b.n	8005e1e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4013      	ands	r3, r2
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	bf0c      	ite	eq
 8005e0e:	2301      	moveq	r3, #1
 8005e10:	2300      	movne	r3, #0
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	79fb      	ldrb	r3, [r7, #7]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d0a6      	beq.n	8005d6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b095      	sub	sp, #84	; 0x54
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e6      	bne.n	8005e30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3308      	adds	r3, #8
 8005e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	4b1e      	ldr	r3, [pc, #120]	; (8005ef0 <UART_EndRxTransfer+0xc8>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e5      	bne.n	8005e62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d118      	bne.n	8005ed0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f023 0310 	bic.w	r3, r3, #16
 8005eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6979      	ldr	r1, [r7, #20]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e6      	bne.n	8005e9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005ee4:	bf00      	nop
 8005ee6:	3754      	adds	r7, #84	; 0x54
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	effffffe 	.word	0xeffffffe

08005ef4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_UARTEx_DisableFifoMode+0x16>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e027      	b.n	8005f5a <HAL_UARTEx_DisableFifoMode+0x66>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2224      	movs	r2, #36	; 0x24
 8005f16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0201 	bic.w	r2, r2, #1
 8005f30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d101      	bne.n	8005f7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e02d      	b.n	8005fda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2224      	movs	r2, #36	; 0x24
 8005f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 0201 	bic.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f850 	bl	8006060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e02d      	b.n	8006056 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2224      	movs	r2, #36	; 0x24
 8006006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0201 	bic.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f812 	bl	8006060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800606c:	2b00      	cmp	r3, #0
 800606e:	d108      	bne.n	8006082 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006080:	e031      	b.n	80060e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006082:	2310      	movs	r3, #16
 8006084:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006086:	2310      	movs	r3, #16
 8006088:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	0e5b      	lsrs	r3, r3, #25
 8006092:	b2db      	uxtb	r3, r3
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	0f5b      	lsrs	r3, r3, #29
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	7b3a      	ldrb	r2, [r7, #12]
 80060ae:	4911      	ldr	r1, [pc, #68]	; (80060f4 <UARTEx_SetNbDataToProcess+0x94>)
 80060b0:	5c8a      	ldrb	r2, [r1, r2]
 80060b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80060b6:	7b3a      	ldrb	r2, [r7, #12]
 80060b8:	490f      	ldr	r1, [pc, #60]	; (80060f8 <UARTEx_SetNbDataToProcess+0x98>)
 80060ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	7b7a      	ldrb	r2, [r7, #13]
 80060cc:	4909      	ldr	r1, [pc, #36]	; (80060f4 <UARTEx_SetNbDataToProcess+0x94>)
 80060ce:	5c8a      	ldrb	r2, [r1, r2]
 80060d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80060d4:	7b7a      	ldrb	r2, [r7, #13]
 80060d6:	4908      	ldr	r1, [pc, #32]	; (80060f8 <UARTEx_SetNbDataToProcess+0x98>)
 80060d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060da:	fb93 f3f2 	sdiv	r3, r3, r2
 80060de:	b29a      	uxth	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80060e6:	bf00      	nop
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	080067a8 	.word	0x080067a8
 80060f8:	080067b0 	.word	0x080067b0

080060fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060fc:	b084      	sub	sp, #16
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	f107 001c 	add.w	r0, r7, #28
 800610a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	2b01      	cmp	r3, #1
 8006112:	d120      	bne.n	8006156 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006118:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68da      	ldr	r2, [r3, #12]
 8006124:	4b2a      	ldr	r3, [pc, #168]	; (80061d0 <USB_CoreInit+0xd4>)
 8006126:	4013      	ands	r3, r2
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800613a:	2b01      	cmp	r3, #1
 800613c:	d105      	bne.n	800614a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 faac 	bl	80066a8 <USB_CoreReset>
 8006150:	4603      	mov	r3, r0
 8006152:	73fb      	strb	r3, [r7, #15]
 8006154:	e01a      	b.n	800618c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 faa0 	bl	80066a8 <USB_CoreReset>
 8006168:	4603      	mov	r3, r0
 800616a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800616c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	639a      	str	r2, [r3, #56]	; 0x38
 800617e:	e005      	b.n	800618c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	2b01      	cmp	r3, #1
 8006190:	d116      	bne.n	80061c0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006196:	b29a      	uxth	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061a0:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <USB_CoreInit+0xd8>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f043 0206 	orr.w	r2, r3, #6
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f043 0220 	orr.w	r2, r3, #32
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061cc:	b004      	add	sp, #16
 80061ce:	4770      	bx	lr
 80061d0:	ffbdffbf 	.word	0xffbdffbf
 80061d4:	03ee0000 	.word	0x03ee0000

080061d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f023 0201 	bic.w	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b084      	sub	sp, #16
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006216:	78fb      	ldrb	r3, [r7, #3]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d115      	bne.n	8006248 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006228:	2001      	movs	r0, #1
 800622a:	f7fa ff67 	bl	80010fc <HAL_Delay>
      ms++;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3301      	adds	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fa29 	bl	800668c <USB_GetMode>
 800623a:	4603      	mov	r3, r0
 800623c:	2b01      	cmp	r3, #1
 800623e:	d01e      	beq.n	800627e <USB_SetCurrentMode+0x84>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b31      	cmp	r3, #49	; 0x31
 8006244:	d9f0      	bls.n	8006228 <USB_SetCurrentMode+0x2e>
 8006246:	e01a      	b.n	800627e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d115      	bne.n	800627a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800625a:	2001      	movs	r0, #1
 800625c:	f7fa ff4e 	bl	80010fc <HAL_Delay>
      ms++;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3301      	adds	r3, #1
 8006264:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fa10 	bl	800668c <USB_GetMode>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d005      	beq.n	800627e <USB_SetCurrentMode+0x84>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b31      	cmp	r3, #49	; 0x31
 8006276:	d9f0      	bls.n	800625a <USB_SetCurrentMode+0x60>
 8006278:	e001      	b.n	800627e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e005      	b.n	800628a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b32      	cmp	r3, #50	; 0x32
 8006282:	d101      	bne.n	8006288 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e000      	b.n	800628a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006294:	b084      	sub	sp, #16
 8006296:	b580      	push	{r7, lr}
 8006298:	b086      	sub	sp, #24
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80062a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062ae:	2300      	movs	r3, #0
 80062b0:	613b      	str	r3, [r7, #16]
 80062b2:	e009      	b.n	80062c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	3340      	adds	r3, #64	; 0x40
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	2200      	movs	r2, #0
 80062c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	3301      	adds	r3, #1
 80062c6:	613b      	str	r3, [r7, #16]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b0e      	cmp	r3, #14
 80062cc:	d9f2      	bls.n	80062b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d11c      	bne.n	800630e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062e2:	f043 0302 	orr.w	r3, r3, #2
 80062e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	e005      	b.n	800631a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006320:	461a      	mov	r2, r3
 8006322:	2300      	movs	r3, #0
 8006324:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632c:	4619      	mov	r1, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006334:	461a      	mov	r2, r3
 8006336:	680b      	ldr	r3, [r1, #0]
 8006338:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	2b01      	cmp	r3, #1
 800633e:	d10c      	bne.n	800635a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006346:	2100      	movs	r1, #0
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f965 	bl	8006618 <USB_SetDevSpeed>
 800634e:	e008      	b.n	8006362 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006350:	2101      	movs	r1, #1
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f960 	bl	8006618 <USB_SetDevSpeed>
 8006358:	e003      	b.n	8006362 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800635a:	2103      	movs	r1, #3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f95b 	bl	8006618 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006362:	2110      	movs	r1, #16
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f8f3 	bl	8006550 <USB_FlushTxFifo>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f91f 	bl	80065b8 <USB_FlushRxFifo>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	461a      	mov	r2, r3
 800638c:	2300      	movs	r3, #0
 800638e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006396:	461a      	mov	r2, r3
 8006398:	2300      	movs	r3, #0
 800639a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a2:	461a      	mov	r2, r3
 80063a4:	2300      	movs	r3, #0
 80063a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063a8:	2300      	movs	r3, #0
 80063aa:	613b      	str	r3, [r7, #16]
 80063ac:	e043      	b.n	8006436 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063c4:	d118      	bne.n	80063f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d8:	461a      	mov	r2, r3
 80063da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	e013      	b.n	800640a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ee:	461a      	mov	r2, r3
 80063f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	e008      	b.n	800640a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006404:	461a      	mov	r2, r3
 8006406:	2300      	movs	r3, #0
 8006408:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006416:	461a      	mov	r2, r3
 8006418:	2300      	movs	r3, #0
 800641a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006428:	461a      	mov	r2, r3
 800642a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800642e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	3301      	adds	r3, #1
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	429a      	cmp	r2, r3
 800643c:	d3b7      	bcc.n	80063ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800643e:	2300      	movs	r3, #0
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	e043      	b.n	80064cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800645a:	d118      	bne.n	800648e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646e:	461a      	mov	r2, r3
 8006470:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	e013      	b.n	80064a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006484:	461a      	mov	r2, r3
 8006486:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800648a:	6013      	str	r3, [r2, #0]
 800648c:	e008      	b.n	80064a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649a:	461a      	mov	r2, r3
 800649c:	2300      	movs	r3, #0
 800649e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ac:	461a      	mov	r2, r3
 80064ae:	2300      	movs	r3, #0
 80064b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064be:	461a      	mov	r2, r3
 80064c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	3301      	adds	r3, #1
 80064ca:	613b      	str	r3, [r7, #16]
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d3b7      	bcc.n	8006444 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80064f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d105      	bne.n	8006508 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	f043 0210 	orr.w	r2, r3, #16
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699a      	ldr	r2, [r3, #24]
 800650c:	4b0e      	ldr	r3, [pc, #56]	; (8006548 <USB_DevInit+0x2b4>)
 800650e:	4313      	orrs	r3, r2
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006516:	2b00      	cmp	r3, #0
 8006518:	d005      	beq.n	8006526 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f043 0208 	orr.w	r2, r3, #8
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d105      	bne.n	8006538 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	699a      	ldr	r2, [r3, #24]
 8006530:	4b06      	ldr	r3, [pc, #24]	; (800654c <USB_DevInit+0x2b8>)
 8006532:	4313      	orrs	r3, r2
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006538:	7dfb      	ldrb	r3, [r7, #23]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006544:	b004      	add	sp, #16
 8006546:	4770      	bx	lr
 8006548:	803c3800 	.word	0x803c3800
 800654c:	40000004 	.word	0x40000004

08006550 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3301      	adds	r3, #1
 8006562:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4a13      	ldr	r2, [pc, #76]	; (80065b4 <USB_FlushTxFifo+0x64>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d901      	bls.n	8006570 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e01b      	b.n	80065a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	daf2      	bge.n	800655e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	019b      	lsls	r3, r3, #6
 8006580:	f043 0220 	orr.w	r2, r3, #32
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3301      	adds	r3, #1
 800658c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4a08      	ldr	r2, [pc, #32]	; (80065b4 <USB_FlushTxFifo+0x64>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d901      	bls.n	800659a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e006      	b.n	80065a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d0f0      	beq.n	8006588 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	00030d40 	.word	0x00030d40

080065b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3301      	adds	r3, #1
 80065c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4a11      	ldr	r2, [pc, #68]	; (8006614 <USB_FlushRxFifo+0x5c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d901      	bls.n	80065d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e018      	b.n	8006608 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	daf2      	bge.n	80065c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2210      	movs	r2, #16
 80065e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4a08      	ldr	r2, [pc, #32]	; (8006614 <USB_FlushRxFifo+0x5c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d901      	bls.n	80065fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e006      	b.n	8006608 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f003 0310 	and.w	r3, r3, #16
 8006602:	2b10      	cmp	r3, #16
 8006604:	d0f0      	beq.n	80065e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	00030d40 	.word	0x00030d40

08006618 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	68f9      	ldr	r1, [r7, #12]
 8006634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006638:	4313      	orrs	r3, r2
 800663a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800664a:	b480      	push	{r7}
 800664c:	b085      	sub	sp, #20
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006664:	f023 0303 	bic.w	r3, r3, #3
 8006668:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006678:	f043 0302 	orr.w	r3, r3, #2
 800667c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	f003 0301 	and.w	r3, r3, #1
}
 800669c:	4618      	mov	r0, r3
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3301      	adds	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4a13      	ldr	r2, [pc, #76]	; (800670c <USB_CoreReset+0x64>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d901      	bls.n	80066c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e01b      	b.n	80066fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	daf2      	bge.n	80066b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f043 0201 	orr.w	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3301      	adds	r3, #1
 80066e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4a09      	ldr	r2, [pc, #36]	; (800670c <USB_CoreReset+0x64>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d901      	bls.n	80066f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e006      	b.n	80066fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d0f0      	beq.n	80066de <USB_CoreReset+0x36>

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	00030d40 	.word	0x00030d40

08006710 <memset>:
 8006710:	4402      	add	r2, r0
 8006712:	4603      	mov	r3, r0
 8006714:	4293      	cmp	r3, r2
 8006716:	d100      	bne.n	800671a <memset+0xa>
 8006718:	4770      	bx	lr
 800671a:	f803 1b01 	strb.w	r1, [r3], #1
 800671e:	e7f9      	b.n	8006714 <memset+0x4>

08006720 <__libc_init_array>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	4d0d      	ldr	r5, [pc, #52]	; (8006758 <__libc_init_array+0x38>)
 8006724:	4c0d      	ldr	r4, [pc, #52]	; (800675c <__libc_init_array+0x3c>)
 8006726:	1b64      	subs	r4, r4, r5
 8006728:	10a4      	asrs	r4, r4, #2
 800672a:	2600      	movs	r6, #0
 800672c:	42a6      	cmp	r6, r4
 800672e:	d109      	bne.n	8006744 <__libc_init_array+0x24>
 8006730:	4d0b      	ldr	r5, [pc, #44]	; (8006760 <__libc_init_array+0x40>)
 8006732:	4c0c      	ldr	r4, [pc, #48]	; (8006764 <__libc_init_array+0x44>)
 8006734:	f000 f818 	bl	8006768 <_init>
 8006738:	1b64      	subs	r4, r4, r5
 800673a:	10a4      	asrs	r4, r4, #2
 800673c:	2600      	movs	r6, #0
 800673e:	42a6      	cmp	r6, r4
 8006740:	d105      	bne.n	800674e <__libc_init_array+0x2e>
 8006742:	bd70      	pop	{r4, r5, r6, pc}
 8006744:	f855 3b04 	ldr.w	r3, [r5], #4
 8006748:	4798      	blx	r3
 800674a:	3601      	adds	r6, #1
 800674c:	e7ee      	b.n	800672c <__libc_init_array+0xc>
 800674e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006752:	4798      	blx	r3
 8006754:	3601      	adds	r6, #1
 8006756:	e7f2      	b.n	800673e <__libc_init_array+0x1e>
 8006758:	080067c0 	.word	0x080067c0
 800675c:	080067c0 	.word	0x080067c0
 8006760:	080067c0 	.word	0x080067c0
 8006764:	080067c4 	.word	0x080067c4

08006768 <_init>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	bf00      	nop
 800676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676e:	bc08      	pop	{r3}
 8006770:	469e      	mov	lr, r3
 8006772:	4770      	bx	lr

08006774 <_fini>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	bf00      	nop
 8006778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677a:	bc08      	pop	{r3}
 800677c:	469e      	mov	lr, r3
 800677e:	4770      	bx	lr
