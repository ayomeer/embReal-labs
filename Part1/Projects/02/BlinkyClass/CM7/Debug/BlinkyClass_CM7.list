
BlinkyClass_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d0c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006fa4  08006fa4  00016fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fdc  08006fdc  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  08006fdc  08006fdc  00016fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe4  08006fe4  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  08006fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000060  0800704c  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000c0  080070ac  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000800  24000120  0800710c  00020120  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000920  0800710c  00020920  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 15 .debug_info   000235f0  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003e4e  00000000  00000000  00043781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001298  00000000  00000000  000475d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000e30  00000000  00000000  00048868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00041797  00000000  00000000  00049698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001c2a1  00000000  00000000  0008ae2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018de60  00000000  00000000  000a70d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005264  00000000  00000000  00234f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000084  00000000  00000000  0023a194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000120 	.word	0x24000120
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006f8c 	.word	0x08006f8c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000124 	.word	0x24000124
 80002d4:	08006f8c 	.word	0x08006f8c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <_ZN11BlinkingLed12setFrequencyEf>:

// setters
void BlinkingLed::setDutyCycle(const uint8_t dutyCycle){
	this->dutyCycle = dutyCycle;
}
void BlinkingLed::setFrequency(const float frequency){
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = frequency;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	611a      	str	r2, [r3, #16]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <_ZN11BlinkingLed15processBlinkingEv>:

void BlinkingLed::processBlinking(){
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	if(checkExpiration()){ // timer expired: do stuff
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3308      	adds	r3, #8
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f838 	bl	80007a2 <_ZN5myhal16NonBlockingDelay15checkExpirationEv>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	bf14      	ite	ne
 8000738:	2301      	movne	r3, #1
 800073a:	2300      	moveq	r3, #0
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d018      	beq.n	8000774 <_ZN11BlinkingLed15processBlinkingEv+0x54>
		initialize((uint32_t)(1/frequency*1000));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f103 0208 	add.w	r2, r3, #8
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	ed93 7a04 	vldr	s14, [r3, #16]
 800074e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000756:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800077c <_ZN11BlinkingLed15processBlinkingEv+0x5c>
 800075a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800075e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000762:	ee17 1a90 	vmov	r1, s15
 8000766:	4610      	mov	r0, r2
 8000768:	f000 f80a 	bl	8000780 <_ZN5myhal16NonBlockingDelay10initializeEm>
		toggleLED();
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f847 	bl	8000802 <_ZN5myhal10STM32H7Led9toggleLEDEv>
	}
	else { // not yet expired: do nothing

	}
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	447a0000 	.word	0x447a0000

08000780 <_ZN5myhal16NonBlockingDelay10initializeEm>:

NonBlockingDelay::NonBlockingDelay() {

}

void NonBlockingDelay::initialize(const uint32_t delay){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
	waitTime = delay;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	683a      	ldr	r2, [r7, #0]
 800078e:	601a      	str	r2, [r3, #0]
	tickstart = HAL_GetTick(); // "start timer" by setting reference point
 8000790:	f000 ff90 	bl	80016b4 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	605a      	str	r2, [r3, #4]
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <_ZN5myhal16NonBlockingDelay15checkExpirationEv>:

// returns 0 if not expired and 0xFF if expired or not yet set
uint8_t NonBlockingDelay::checkExpiration(){
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - tickstart) < waitTime){ // timer counting, not yet expired
 80007aa:	f000 ff83 	bl	80016b4 <HAL_GetTick>
 80007ae:	4602      	mov	r2, r0
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	1ad2      	subs	r2, r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	bf34      	ite	cc
 80007be:	2301      	movcc	r3, #1
 80007c0:	2300      	movcs	r3, #0
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <_ZN5myhal16NonBlockingDelay15checkExpirationEv+0x2a>
		return 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	e003      	b.n	80007d4 <_ZN5myhal16NonBlockingDelay15checkExpirationEv+0x32>
	}
	else{ // timer expired (or not set)
		waitTime = 0;// reset waitTime
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
		return 0xFF;
 80007d2:	23ff      	movs	r3, #255	; 0xff
	}
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <_ZN5myhal10STM32H7Led10setPortPinEP12GPIO_TypeDeft>:
STM32H7Led::STM32H7Led(GPIO_TypeDef* port, uint16_t pin) {
	this->port = port;
	this->pin = pin;
}

void STM32H7Led::setPortPin(GPIO_TypeDef* port, uint16_t pin){
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	4613      	mov	r3, r2
 80007e8:	80fb      	strh	r3, [r7, #6]
	this->port = port;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	601a      	str	r2, [r3, #0]
	this->pin = pin;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	88fa      	ldrh	r2, [r7, #6]
 80007f4:	809a      	strh	r2, [r3, #4]
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <_ZN5myhal10STM32H7Led9toggleLEDEv>:

void STM32H7Led::toggleLED(){
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(port, pin);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	889b      	ldrh	r3, [r3, #4]
 8000812:	4619      	mov	r1, r3
 8000814:	4610      	mov	r0, r2
 8000816:	f001 fe6e 	bl	80024f6 <HAL_GPIO_TogglePin>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <cppMain>:
#include "MemPool.h"
#include <memory> // for smart pointers

constexpr uint8_t NUMELEMENTS = 4;

void cppMain(){
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0

	// create MemPool on heap
	auto sptr_LedMemPool = std::make_unique<MemPool<BlinkingLed, NUMELEMENTS>>();
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f855 	bl	80008dc <_ZSt11make_uniqueI7MemPoolI11BlinkingLedLj4EEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>

	// allocate
	BlinkingLed* bl0 = sptr_LedMemPool->Allocate(); // first element problem!!!
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4618      	mov	r0, r3
 8000836:	f000 f865 	bl	8000904 <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEptEv>
 800083a:	4603      	mov	r3, r0
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f86d 	bl	800091c <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv>
 8000842:	6178      	str	r0, [r7, #20]

	BlinkingLed* bl1 = sptr_LedMemPool->Allocate();
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f85c 	bl	8000904 <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEptEv>
 800084c:	4603      	mov	r3, r0
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f864 	bl	800091c <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv>
 8000854:	6138      	str	r0, [r7, #16]
	bl1->setPortPin(LD1_GPIO_Port, LD1_Pin);
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	2201      	movs	r2, #1
 800085a:	491e      	ldr	r1, [pc, #120]	; (80008d4 <cppMain+0xb0>)
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ffbd 	bl	80007dc <_ZN5myhal10STM32H7Led10setPortPinEP12GPIO_TypeDeft>
	bl1->setFrequency(4);
 8000862:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8000866:	6938      	ldr	r0, [r7, #16]
 8000868:	f7ff ff4a 	bl	8000700 <_ZN11BlinkingLed12setFrequencyEf>

	BlinkingLed* bl2 = sptr_LedMemPool->Allocate();
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f848 	bl	8000904 <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEptEv>
 8000874:	4603      	mov	r3, r0
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f850 	bl	800091c <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv>
 800087c:	60f8      	str	r0, [r7, #12]
	bl2->setPortPin(LD2_GPIO_Port, LD2_Pin);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	2202      	movs	r2, #2
 8000882:	4915      	ldr	r1, [pc, #84]	; (80008d8 <cppMain+0xb4>)
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ffa9 	bl	80007dc <_ZN5myhal10STM32H7Led10setPortPinEP12GPIO_TypeDeft>
	bl2->setFrequency(2);
 800088a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f7ff ff36 	bl	8000700 <_ZN11BlinkingLed12setFrequencyEf>

	BlinkingLed* bl3 = sptr_LedMemPool->Allocate();
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f834 	bl	8000904 <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEptEv>
 800089c:	4603      	mov	r3, r0
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f83c 	bl	800091c <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv>
 80008a4:	60b8      	str	r0, [r7, #8]
	bl3->setPortPin(LD3_GPIO_Port, LD3_Pin);
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ac:	4909      	ldr	r1, [pc, #36]	; (80008d4 <cppMain+0xb0>)
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff94 	bl	80007dc <_ZN5myhal10STM32H7Led10setPortPinEP12GPIO_TypeDeft>
	bl3->setFrequency(1);
 80008b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80008b8:	68b8      	ldr	r0, [r7, #8]
 80008ba:	f7ff ff21 	bl	8000700 <_ZN11BlinkingLed12setFrequencyEf>

	while(1){
		bl1->processBlinking();
 80008be:	6938      	ldr	r0, [r7, #16]
 80008c0:	f7ff ff2e 	bl	8000720 <_ZN11BlinkingLed15processBlinkingEv>
		bl2->processBlinking();
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff ff2b 	bl	8000720 <_ZN11BlinkingLed15processBlinkingEv>
		bl3->processBlinking();
 80008ca:	68b8      	ldr	r0, [r7, #8]
 80008cc:	f7ff ff28 	bl	8000720 <_ZN11BlinkingLed15processBlinkingEv>
		bl1->processBlinking();
 80008d0:	e7f5      	b.n	80008be <cppMain+0x9a>
 80008d2:	bf00      	nop
 80008d4:	58020400 	.word	0x58020400
 80008d8:	58021000 	.word	0x58021000

080008dc <_ZSt11make_uniqueI7MemPoolI11BlinkingLedLj4EEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
  /// @endcond

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80008e4:	2078      	movs	r0, #120	; 0x78
 80008e6:	f006 f9f3 	bl	8006cd0 <_Znwj>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461c      	mov	r4, r3
 80008ee:	4620      	mov	r0, r4
 80008f0:	f000 f858 	bl	80009a4 <_ZN7MemPoolI11BlinkingLedLj4EEC1Ev>
 80008f4:	4621      	mov	r1, r4
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 f884 	bl	8000a04 <_ZNSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEC1IS4_vEEPS2_>
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	bd90      	pop	{r4, r7, pc}

08000904 <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEptEv>:
      operator->() const noexcept
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	return get();
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f000 f895 	bl	8000a3c <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE3getEv>
 8000912:	4603      	mov	r3, r0
      }
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv>:
    mem_beg_ = nullptr;
}


template<typename T, size_t NumCells>
T* MemPool<T, NumCells>::Allocate()
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
{
	if ( num_init_ < num_cells_ )
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68da      	ldr	r2, [r3, #12]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	429a      	cmp	r2, r3
 800092e:	d20f      	bcs.n	8000950 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv+0x34>
	{
		uint32_t* p = reinterpret_cast<uint32_t*>( AddrFromIndex( num_init_ ) );
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	4619      	mov	r1, r3
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f000 f88d 	bl	8000a56 <_ZNK7MemPoolI11BlinkingLedLj4EE13AddrFromIndexEm>
 800093c:	60b8      	str	r0, [r7, #8]
		*p = ++num_init_;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	68da      	ldr	r2, [r3, #12]
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	601a      	str	r2, [r3, #0]
	}

	T* res = nullptr;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
	if ( num_free_cells_ > 0 )
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d01e      	beq.n	800099a <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv+0x7e>
	{
		res = reinterpret_cast<T*>( next_ );
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000960:	60fb      	str	r3, [r7, #12]
		if ( --num_free_cells_ > 0 )
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	1e5a      	subs	r2, r3, #1
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf14      	ite	ne
 8000974:	2301      	movne	r3, #1
 8000976:	2300      	moveq	r3, #0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00a      	beq.n	8000994 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv+0x78>
		{
			next_ = AddrFromIndex( *reinterpret_cast<uint32_t*>( next_ ) );
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 f865 	bl	8000a56 <_ZNK7MemPoolI11BlinkingLedLj4EE13AddrFromIndexEm>
 800098c:	4602      	mov	r2, r0
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	675a      	str	r2, [r3, #116]	; 0x74
 8000992:	e002      	b.n	800099a <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv+0x7e>
		}
		else
		{
			next_ = nullptr;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	675a      	str	r2, [r3, #116]	; 0x74
		}
	}
	return res;
 800099a:	68fb      	ldr	r3, [r7, #12]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_ZN7MemPoolI11BlinkingLedLj4EEC1Ev>:
MemPool<T, NumCells>::MemPool()
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2218      	movs	r2, #24
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2204      	movs	r2, #4
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2204      	movs	r2, #4
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f103 0210 	add.w	r2, r3, #16
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	671a      	str	r2, [r3, #112]	; 0x70
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <_ZNSt15__uniq_ptr_dataI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEPS2_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 f841 	bl	8000a7c <_ZNSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEC1EPS2_>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_ZNSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEC1IS4_vEEPS2_>:
	unique_ptr(pointer __p) noexcept
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6839      	ldr	r1, [r7, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff ffe6 	bl	80009e4 <_ZNSt15__uniq_ptr_dataI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEPS2_>
        { }
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <_ZNSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f839 	bl	8000aa4 <_ZSt3getILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE3getEv>:
      get() const noexcept
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f839 	bl	8000abe <_ZNKSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE6_M_ptrEv>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_ZNK7MemPoolI11BlinkingLedLj4EE13AddrFromIndexEm>:
	next_ = static_cast<uint8_t*>( p );
	++num_free_cells_;
}

template<typename T, size_t NumCells>
uint8_t* MemPool<T,NumCells>::AddrFromIndex( uint32_t i ) const
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
{
	return mem_beg_ + ( i * cell_size_ );
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6839      	ldr	r1, [r7, #0]
 8000a6a:	fb01 f303 	mul.w	r3, r1, r3
 8000a6e:	4413      	add	r3, r2
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <_ZNSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEC1EPS2_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f826 	bl	8000ada <_ZNSt5tupleIJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>
 8000a8e:	683c      	ldr	r4, [r7, #0]
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ffc6 	bl	8000a22 <_ZNSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE6_M_ptrEv>
 8000a96:	4603      	mov	r3, r0
 8000a98:	601c      	str	r4, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd90      	pop	{r4, r7, pc}

08000aa4 <_ZSt3getILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f820 	bl	8000af4 <_ZSt12__get_helperILj0EP7MemPoolI11BlinkingLedLj4EEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <_ZNKSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 f81f 	bl	8000b0c <_ZSt3getILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <_ZNSt5tupleIJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>:
	tuple()
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f81e 	bl	8000b26 <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEEC1Ev>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_ZSt12__get_helperILj0EP7MemPoolI11BlinkingLedLj4EEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 f822 	bl	8000b46 <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEE7_M_headERS6_>
 8000b02:	4603      	mov	r3, r0
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_ZSt3getILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f822 	bl	8000b60 <_ZSt12__get_helperILj0EP7MemPoolI11BlinkingLedLj4EEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEEC1Ev>:
      constexpr _Tuple_impl()
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 f822 	bl	8000b78 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7MemPoolI11BlinkingLedLj4EEEEEC1Ev>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f82a 	bl	8000b90 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EEC1Ev>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f82b 	bl	8000bac <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EE7_M_headERS4_>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <_ZSt12__get_helperILj0EP7MemPoolI11BlinkingLedLj4EEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 f82a 	bl	8000bc2 <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEE7_M_headERKS6_>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7MemPoolI11BlinkingLedLj4EEEEEC1Ev>:
      _Tuple_impl()
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 f82b 	bl	8000bdc <_ZNSt10_Head_baseILj1ESt14default_deleteI7MemPoolI11BlinkingLedLj4EEELb1EEC1Ev>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EEC1Ev>:
      constexpr _Head_base()
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f810 	bl	8000bf2 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EE7_M_headERKS4_>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <_ZNSt10_Head_baseILj1ESt14default_deleteI7MemPoolI11BlinkingLedLj4EEELb1EEC1Ev>:
      constexpr _Head_base()
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4618      	mov	r0, r3
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EE7_M_headERKS4_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c12:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c14:	bf00      	nop
 8000c16:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <main+0xa0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d004      	beq.n	8000c2c <main+0x24>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	1e5a      	subs	r2, r3, #1
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	dcf4      	bgt.n	8000c16 <main+0xe>
  if ( timeout < 0 )
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	da01      	bge.n	8000c36 <main+0x2e>
  {
  Error_Handler();
 8000c32:	f000 fa29 	bl	8001088 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c36:	f000 fcb7 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3a:	f000 f837 	bl	8000cac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <main+0xa0>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <main+0xa0>)
 8000c46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <main+0xa0>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f001 fc65 	bl	800252c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c62:	2100      	movs	r1, #0
 8000c64:	2000      	movs	r0, #0
 8000c66:	f001 fc7b 	bl	8002560 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c6e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c70:	bf00      	nop
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <main+0xa0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d104      	bne.n	8000c88 <main+0x80>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	dcf4      	bgt.n	8000c72 <main+0x6a>
if ( timeout < 0 )
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	da01      	bge.n	8000c92 <main+0x8a>
{
Error_Handler();
 8000c8e:	f000 f9fb 	bl	8001088 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c92:	f000 f953 	bl	8000f3c <MX_GPIO_Init>
  MX_ETH_Init();
 8000c96:	f000 f887 	bl	8000da8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000c9a:	f000 f8d1 	bl	8000e40 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c9e:	f000 f91b 	bl	8000ed8 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    cppMain();
 8000ca2:	f7ff fdbf 	bl	8000824 <cppMain>
 8000ca6:	e7fc      	b.n	8000ca2 <main+0x9a>
 8000ca8:	58024400 	.word	0x58024400

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b09c      	sub	sp, #112	; 0x70
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	224c      	movs	r2, #76	; 0x4c
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f006 f8de 	bl	8006e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2220      	movs	r2, #32
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f006 f8d8 	bl	8006e7c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ccc:	2004      	movs	r0, #4
 8000cce:	f001 fda3 	bl	8002818 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b32      	ldr	r3, [pc, #200]	; (8000da0 <SystemClock_Config+0xf4>)
 8000cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cda:	4a31      	ldr	r2, [pc, #196]	; (8000da0 <SystemClock_Config+0xf4>)
 8000cdc:	f023 0301 	bic.w	r3, r3, #1
 8000ce0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <SystemClock_Config+0xf4>)
 8000ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <SystemClock_Config+0xf8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cf4:	4a2b      	ldr	r2, [pc, #172]	; (8000da4 <SystemClock_Config+0xf8>)
 8000cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <SystemClock_Config+0xf8>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d08:	bf00      	nop
 8000d0a:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <SystemClock_Config+0xf8>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d16:	d1f8      	bne.n	8000d0a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d1c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d22:	2302      	movs	r3, #2
 8000d24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d26:	2302      	movs	r3, #2
 8000d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000d2e:	2312      	movs	r3, #18
 8000d30:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d32:	2302      	movs	r3, #2
 8000d34:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d36:	2302      	movs	r3, #2
 8000d38:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d3e:	230c      	movs	r3, #12
 8000d40:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d42:	2302      	movs	r3, #2
 8000d44:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000d46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fdcb 	bl	80028ec <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d5c:	f000 f994 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d60:	233f      	movs	r3, #63	; 0x3f
 8000d62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d64:	2303      	movs	r3, #3
 8000d66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d70:	2340      	movs	r3, #64	; 0x40
 8000d72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d74:	2340      	movs	r3, #64	; 0x40
 8000d76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d7e:	2340      	movs	r3, #64	; 0x40
 8000d80:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2101      	movs	r1, #1
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 fa0a 	bl	80031a0 <HAL_RCC_ClockConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000d92:	f000 f979 	bl	8001088 <Error_Handler>
  }
}
 8000d96:	bf00      	nop
 8000d98:	3770      	adds	r7, #112	; 0x70
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	58000400 	.word	0x58000400
 8000da4:	58024800 	.word	0x58024800

08000da8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <MX_ETH_Init+0x80>)
 8000dae:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <MX_ETH_Init+0x84>)
 8000db0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <MX_ETH_Init+0x88>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_ETH_Init+0x88>)
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <MX_ETH_Init+0x88>)
 8000dc0:	22e1      	movs	r2, #225	; 0xe1
 8000dc2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <MX_ETH_Init+0x88>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_ETH_Init+0x88>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <MX_ETH_Init+0x88>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_ETH_Init+0x80>)
 8000dd8:	4a15      	ldr	r2, [pc, #84]	; (8000e30 <MX_ETH_Init+0x88>)
 8000dda:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_ETH_Init+0x80>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_ETH_Init+0x80>)
 8000de4:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <MX_ETH_Init+0x8c>)
 8000de6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_ETH_Init+0x80>)
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <MX_ETH_Init+0x90>)
 8000dec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_ETH_Init+0x80>)
 8000df0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000df4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000df6:	480c      	ldr	r0, [pc, #48]	; (8000e28 <MX_ETH_Init+0x80>)
 8000df8:	f000 fd90 	bl	800191c <HAL_ETH_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000e02:	f000 f941 	bl	8001088 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e06:	2238      	movs	r2, #56	; 0x38
 8000e08:	2100      	movs	r1, #0
 8000e0a:	480c      	ldr	r0, [pc, #48]	; (8000e3c <MX_ETH_Init+0x94>)
 8000e0c:	f006 f836 	bl	8006e7c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <MX_ETH_Init+0x94>)
 8000e12:	2221      	movs	r2, #33	; 0x21
 8000e14:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_ETH_Init+0x94>)
 8000e18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e1c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <MX_ETH_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	24000174 	.word	0x24000174
 8000e2c:	40028000 	.word	0x40028000
 8000e30:	240007c4 	.word	0x240007c4
 8000e34:	240000c0 	.word	0x240000c0
 8000e38:	24000060 	.word	0x24000060
 8000e3c:	2400013c 	.word	0x2400013c

08000e40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e46:	4a23      	ldr	r2, [pc, #140]	; (8000ed4 <MX_USART3_UART_Init+0x94>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e88:	4811      	ldr	r0, [pc, #68]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e8a:	f004 fb41 	bl	8005510 <HAL_UART_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e94:	f000 f8f8 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000e9c:	f005 fb43 	bl	8006526 <HAL_UARTEx_SetTxFifoThreshold>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ea6:	f000 f8ef 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000eae:	f005 fb78 	bl	80065a2 <HAL_UARTEx_SetRxFifoThreshold>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000eb8:	f000 f8e6 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_USART3_UART_Init+0x90>)
 8000ebe:	f005 faf9 	bl	80064b4 <HAL_UARTEx_DisableFifoMode>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ec8:	f000 f8de 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	24000224 	.word	0x24000224
 8000ed4:	40004800 	.word	0x40004800

08000ed8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ede:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ee4:	2209      	movs	r2, #9
 8000ee6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eea:	2202      	movs	r2, #2
 8000eec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f20:	f001 fb32 	bl	8002588 <HAL_PCD_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f2a:	f000 f8ad 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	240002b8 	.word	0x240002b8
 8000f38:	40080000 	.word	0x40080000

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	4b4a      	ldr	r3, [pc, #296]	; (800107c <MX_GPIO_Init+0x140>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	4a48      	ldr	r2, [pc, #288]	; (800107c <MX_GPIO_Init+0x140>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f62:	4b46      	ldr	r3, [pc, #280]	; (800107c <MX_GPIO_Init+0x140>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f70:	4b42      	ldr	r3, [pc, #264]	; (800107c <MX_GPIO_Init+0x140>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	4a41      	ldr	r2, [pc, #260]	; (800107c <MX_GPIO_Init+0x140>)
 8000f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f80:	4b3e      	ldr	r3, [pc, #248]	; (800107c <MX_GPIO_Init+0x140>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <MX_GPIO_Init+0x140>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	4a39      	ldr	r2, [pc, #228]	; (800107c <MX_GPIO_Init+0x140>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <MX_GPIO_Init+0x140>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	4b33      	ldr	r3, [pc, #204]	; (800107c <MX_GPIO_Init+0x140>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	4a32      	ldr	r2, [pc, #200]	; (800107c <MX_GPIO_Init+0x140>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <MX_GPIO_Init+0x140>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <MX_GPIO_Init+0x140>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd0:	4a2a      	ldr	r2, [pc, #168]	; (800107c <MX_GPIO_Init+0x140>)
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fda:	4b28      	ldr	r3, [pc, #160]	; (800107c <MX_GPIO_Init+0x140>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe8:	4b24      	ldr	r3, [pc, #144]	; (800107c <MX_GPIO_Init+0x140>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fee:	4a23      	ldr	r2, [pc, #140]	; (800107c <MX_GPIO_Init+0x140>)
 8000ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <MX_GPIO_Init+0x140>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <MX_GPIO_Init+0x140>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100c:	4a1b      	ldr	r2, [pc, #108]	; (800107c <MX_GPIO_Init+0x140>)
 800100e:	f043 0310 	orr.w	r3, r3, #16
 8001012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <MX_GPIO_Init+0x140>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f244 0101 	movw	r1, #16385	; 0x4001
 800102a:	4815      	ldr	r0, [pc, #84]	; (8001080 <MX_GPIO_Init+0x144>)
 800102c:	f001 fa4a 	bl	80024c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	2102      	movs	r1, #2
 8001034:	4813      	ldr	r0, [pc, #76]	; (8001084 <MX_GPIO_Init+0x148>)
 8001036:	f001 fa45 	bl	80024c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800103a:	f244 0301 	movw	r3, #16385	; 0x4001
 800103e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4619      	mov	r1, r3
 8001052:	480b      	ldr	r0, [pc, #44]	; (8001080 <MX_GPIO_Init+0x144>)
 8001054:	f001 f886 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001058:	2302      	movs	r3, #2
 800105a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_GPIO_Init+0x148>)
 8001070:	f001 f878 	bl	8002164 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001074:	bf00      	nop
 8001076:	3730      	adds	r7, #48	; 0x30
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	58024400 	.word	0x58024400
 8001080:	58020400 	.word	0x58020400
 8001084:	58021000 	.word	0x58021000

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>
	...

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_MspInit+0x30>)
 800109c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010a0:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_MspInit+0x30>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_MspInit+0x30>)
 80010ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	58024400 	.word	0x58024400

080010c8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	; 0x38
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a59      	ldr	r2, [pc, #356]	; (800124c <HAL_ETH_MspInit+0x184>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	f040 80ab 	bne.w	8001242 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80010ec:	4b58      	ldr	r3, [pc, #352]	; (8001250 <HAL_ETH_MspInit+0x188>)
 80010ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010f2:	4a57      	ldr	r2, [pc, #348]	; (8001250 <HAL_ETH_MspInit+0x188>)
 80010f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010fc:	4b54      	ldr	r3, [pc, #336]	; (8001250 <HAL_ETH_MspInit+0x188>)
 80010fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001106:	623b      	str	r3, [r7, #32]
 8001108:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800110a:	4b51      	ldr	r3, [pc, #324]	; (8001250 <HAL_ETH_MspInit+0x188>)
 800110c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001110:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <HAL_ETH_MspInit+0x188>)
 8001112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001116:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800111a:	4b4d      	ldr	r3, [pc, #308]	; (8001250 <HAL_ETH_MspInit+0x188>)
 800111c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001128:	4b49      	ldr	r3, [pc, #292]	; (8001250 <HAL_ETH_MspInit+0x188>)
 800112a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800112e:	4a48      	ldr	r2, [pc, #288]	; (8001250 <HAL_ETH_MspInit+0x188>)
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001138:	4b45      	ldr	r3, [pc, #276]	; (8001250 <HAL_ETH_MspInit+0x188>)
 800113a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	4b42      	ldr	r3, [pc, #264]	; (8001250 <HAL_ETH_MspInit+0x188>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	4a40      	ldr	r2, [pc, #256]	; (8001250 <HAL_ETH_MspInit+0x188>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001156:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <HAL_ETH_MspInit+0x188>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <HAL_ETH_MspInit+0x188>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	4a39      	ldr	r2, [pc, #228]	; (8001250 <HAL_ETH_MspInit+0x188>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <HAL_ETH_MspInit+0x188>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	4b33      	ldr	r3, [pc, #204]	; (8001250 <HAL_ETH_MspInit+0x188>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	4a31      	ldr	r2, [pc, #196]	; (8001250 <HAL_ETH_MspInit+0x188>)
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001192:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <HAL_ETH_MspInit+0x188>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011a0:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <HAL_ETH_MspInit+0x188>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a6:	4a2a      	ldr	r2, [pc, #168]	; (8001250 <HAL_ETH_MspInit+0x188>)
 80011a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_ETH_MspInit+0x188>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80011be:	2332      	movs	r3, #50	; 0x32
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ce:	230b      	movs	r3, #11
 80011d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	481e      	ldr	r0, [pc, #120]	; (8001254 <HAL_ETH_MspInit+0x18c>)
 80011da:	f000 ffc3 	bl	8002164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80011de:	2386      	movs	r3, #134	; 0x86
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ee:	230b      	movs	r3, #11
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	4817      	ldr	r0, [pc, #92]	; (8001258 <HAL_ETH_MspInit+0x190>)
 80011fa:	f000 ffb3 	bl	8002164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001210:	230b      	movs	r3, #11
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	4810      	ldr	r0, [pc, #64]	; (800125c <HAL_ETH_MspInit+0x194>)
 800121c:	f000 ffa2 	bl	8002164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001220:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001232:	230b      	movs	r3, #11
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123a:	4619      	mov	r1, r3
 800123c:	4808      	ldr	r0, [pc, #32]	; (8001260 <HAL_ETH_MspInit+0x198>)
 800123e:	f000 ff91 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	3738      	adds	r7, #56	; 0x38
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40028000 	.word	0x40028000
 8001250:	58024400 	.word	0x58024400
 8001254:	58020800 	.word	0x58020800
 8001258:	58020000 	.word	0x58020000
 800125c:	58020400 	.word	0x58020400
 8001260:	58021800 	.word	0x58021800

08001264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b0ba      	sub	sp, #232	; 0xe8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	22c0      	movs	r2, #192	; 0xc0
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f005 fdf9 	bl	8006e7c <memset>
  if(huart->Instance==USART3)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a27      	ldr	r2, [pc, #156]	; (800132c <HAL_UART_MspInit+0xc8>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d146      	bne.n	8001322 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001294:	f04f 0202 	mov.w	r2, #2
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fb04 	bl	80038b8 <HAL_RCCEx_PeriphCLKConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012b6:	f7ff fee7 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <HAL_UART_MspInit+0xcc>)
 80012bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012c0:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <HAL_UART_MspInit+0xcc>)
 80012c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_UART_MspInit+0xcc>)
 80012cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_UART_MspInit+0xcc>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	4a14      	ldr	r2, [pc, #80]	; (8001330 <HAL_UART_MspInit+0xcc>)
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_UART_MspInit+0xcc>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001310:	2307      	movs	r3, #7
 8001312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001316:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <HAL_UART_MspInit+0xd0>)
 800131e:	f000 ff21 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001322:	bf00      	nop
 8001324:	37e8      	adds	r7, #232	; 0xe8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40004800 	.word	0x40004800
 8001330:	58024400 	.word	0x58024400
 8001334:	58020c00 	.word	0x58020c00

08001338 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b0ba      	sub	sp, #232	; 0xe8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	22c0      	movs	r2, #192	; 0xc0
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f005 fd8f 	bl	8006e7c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a38      	ldr	r2, [pc, #224]	; (8001444 <HAL_PCD_MspInit+0x10c>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d169      	bne.n	800143c <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001368:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001374:	2301      	movs	r3, #1
 8001376:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001378:	2312      	movs	r3, #18
 800137a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800137c:	2302      	movs	r3, #2
 800137e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001380:	2303      	movs	r3, #3
 8001382:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001384:	2302      	movs	r3, #2
 8001386:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001388:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800138c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 800138e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001392:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001394:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 fa89 	bl	80038b8 <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 80013ac:	f7ff fe6c 	bl	8001088 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013b0:	f001 fa8c 	bl	80028cc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b24      	ldr	r3, [pc, #144]	; (8001448 <HAL_PCD_MspInit+0x110>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ba:	4a23      	ldr	r2, [pc, #140]	; (8001448 <HAL_PCD_MspInit+0x110>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <HAL_PCD_MspInit+0x110>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013d2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80013d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013ec:	230a      	movs	r3, #10
 80013ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013f6:	4619      	mov	r1, r3
 80013f8:	4814      	ldr	r0, [pc, #80]	; (800144c <HAL_PCD_MspInit+0x114>)
 80013fa:	f000 feb3 	bl	8002164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001416:	4619      	mov	r1, r3
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <HAL_PCD_MspInit+0x114>)
 800141a:	f000 fea3 	bl	8002164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_PCD_MspInit+0x110>)
 8001420:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001424:	4a08      	ldr	r2, [pc, #32]	; (8001448 <HAL_PCD_MspInit+0x110>)
 8001426:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800142a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_PCD_MspInit+0x110>)
 8001430:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800143c:	bf00      	nop
 800143e:	37e8      	adds	r7, #232	; 0xe8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40080000 	.word	0x40080000
 8001448:	58024400 	.word	0x58024400
 800144c:	58020000 	.word	0x58020000

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <NMI_Handler+0x4>

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149c:	f000 f8f6 	bl	800168c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_kill>:

int _kill(int pid, int sig)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014be:	f005 fd39 	bl	8006f34 <__errno>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2216      	movs	r2, #22
 80014c6:	601a      	str	r2, [r3, #0]
  return -1;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_exit>:

void _exit (int status)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ffe7 	bl	80014b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014e6:	e7fe      	b.n	80014e6 <_exit+0x12>

080014e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f0:	4a14      	ldr	r2, [pc, #80]	; (8001544 <_sbrk+0x5c>)
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <_sbrk+0x60>)
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <_sbrk+0x64>)
 8001506:	4a12      	ldr	r2, [pc, #72]	; (8001550 <_sbrk+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	429a      	cmp	r2, r3
 8001516:	d207      	bcs.n	8001528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001518:	f005 fd0c 	bl	8006f34 <__errno>
 800151c:	4603      	mov	r3, r0
 800151e:	220c      	movs	r2, #12
 8001520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	e009      	b.n	800153c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <_sbrk+0x64>)
 8001538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	24080000 	.word	0x24080000
 8001548:	00000400 	.word	0x00000400
 800154c:	240007cc 	.word	0x240007cc
 8001550:	24000920 	.word	0x24000920

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800158c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001558:	f7ff f83c 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800155e:	490d      	ldr	r1, [pc, #52]	; (8001594 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001574:	4c0a      	ldr	r4, [pc, #40]	; (80015a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001582:	f005 fcdd 	bl	8006f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff fb3f 	bl	8000c08 <main>
  bx  lr
 800158a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800158c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001590:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001594:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001598:	08006fec 	.word	0x08006fec
  ldr r2, =_sbss
 800159c:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 80015a0:	24000920 	.word	0x24000920

080015a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC3_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ae:	2003      	movs	r0, #3
 80015b0:	f000 f982 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015b4:	f001 ffaa 	bl	800350c <HAL_RCC_GetSysClockFreq>
 80015b8:	4602      	mov	r2, r0
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_Init+0x68>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	0a1b      	lsrs	r3, r3, #8
 80015c0:	f003 030f 	and.w	r3, r3, #15
 80015c4:	4913      	ldr	r1, [pc, #76]	; (8001614 <HAL_Init+0x6c>)
 80015c6:	5ccb      	ldrb	r3, [r1, r3]
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_Init+0x68>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <HAL_Init+0x6c>)
 80015dc:	5cd3      	ldrb	r3, [r2, r3]
 80015de:	f003 031f 	and.w	r3, r3, #31
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	fa22 f303 	lsr.w	r3, r2, r3
 80015e8:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <HAL_Init+0x70>)
 80015ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015ec:	4a0b      	ldr	r2, [pc, #44]	; (800161c <HAL_Init+0x74>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015f2:	2000      	movs	r0, #0
 80015f4:	f000 f814 	bl	8001620 <HAL_InitTick>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e002      	b.n	8001608 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001602:	f7ff fd47 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	58024400 	.word	0x58024400
 8001614:	08006fa4 	.word	0x08006fa4
 8001618:	24000004 	.word	0x24000004
 800161c:	24000000 	.word	0x24000000

08001620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_InitTick+0x60>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e021      	b.n	8001678 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <HAL_InitTick+0x64>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_InitTick+0x60>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001642:	fbb3 f3f1 	udiv	r3, r3, r1
 8001646:	fbb2 f3f3 	udiv	r3, r2, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f959 	bl	8001902 <HAL_SYSTICK_Config>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e00e      	b.n	8001678 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d80a      	bhi.n	8001676 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001660:	2200      	movs	r2, #0
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f000 f931 	bl	80018ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800166c:	4a06      	ldr	r2, [pc, #24]	; (8001688 <HAL_InitTick+0x68>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	e000      	b.n	8001678 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	2400000c 	.word	0x2400000c
 8001684:	24000000 	.word	0x24000000
 8001688:	24000008 	.word	0x24000008

0800168c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x20>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_IncTick+0x24>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <HAL_IncTick+0x24>)
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	2400000c 	.word	0x2400000c
 80016b0:	240007d0 	.word	0x240007d0

080016b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return uwTick;
 80016b8:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <HAL_GetTick+0x14>)
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	240007d0 	.word	0x240007d0

080016cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff ffee 	bl	80016b4 <HAL_GetTick>
 80016d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e4:	d005      	beq.n	80016f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_Delay+0x44>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016f2:	bf00      	nop
 80016f4:	f7ff ffde 	bl	80016b4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d8f7      	bhi.n	80016f4 <HAL_Delay+0x28>
  {
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2400000c 	.word	0x2400000c

08001714 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_GetREVID+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	0c1b      	lsrs	r3, r3, #16
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	5c001000 	.word	0x5c001000

0800172c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800173c:	4904      	ldr	r1, [pc, #16]	; (8001750 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	58000400 	.word	0x58000400

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <__NVIC_SetPriorityGrouping+0x40>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	4313      	orrs	r3, r2
 8001780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <__NVIC_SetPriorityGrouping+0x40>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60d3      	str	r3, [r2, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00
 8001798:	05fa0000 	.word	0x05fa0000

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	; (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	; (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
         );
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff8e 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff47 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018dc:	f7ff ff5e 	bl	800179c <__NVIC_GetPriorityGrouping>
 80018e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	6978      	ldr	r0, [r7, #20]
 80018e8:	f7ff ff90 	bl	800180c <NVIC_EncodePriority>
 80018ec:	4602      	mov	r2, r0
 80018ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff5f 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffb2 	bl	8001874 <SysTick_Config>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0cf      	b.n	8001ace <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001934:	2b00      	cmp	r3, #0
 8001936:	d106      	bne.n	8001946 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2223      	movs	r2, #35	; 0x23
 800193c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fbc1 	bl	80010c8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	4b64      	ldr	r3, [pc, #400]	; (8001ad8 <HAL_ETH_Init+0x1bc>)
 8001948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800194c:	4a62      	ldr	r2, [pc, #392]	; (8001ad8 <HAL_ETH_Init+0x1bc>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001956:	4b60      	ldr	r3, [pc, #384]	; (8001ad8 <HAL_ETH_Init+0x1bc>)
 8001958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7a1b      	ldrb	r3, [r3, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d103      	bne.n	8001974 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800196c:	2000      	movs	r0, #0
 800196e:	f7ff fedd 	bl	800172c <HAL_SYSCFG_ETHInterfaceSelect>
 8001972:	e003      	b.n	800197c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001974:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001978:	f7ff fed8 	bl	800172c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800197c:	4b57      	ldr	r3, [pc, #348]	; (8001adc <HAL_ETH_Init+0x1c0>)
 800197e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001996:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001998:	f7ff fe8c 	bl	80016b4 <HAL_GetTick>
 800199c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800199e:	e011      	b.n	80019c4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019a0:	f7ff fe88 	bl	80016b4 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019ae:	d909      	bls.n	80019c4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2204      	movs	r2, #4
 80019b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	22e0      	movs	r2, #224	; 0xe0
 80019bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e084      	b.n	8001ace <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1e4      	bne.n	80019a0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f886 	bl	8001ae8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80019dc:	f001 ff10 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a3f      	ldr	r2, [pc, #252]	; (8001ae0 <HAL_ETH_Init+0x1c4>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	0c9a      	lsrs	r2, r3, #18
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	3a01      	subs	r2, #1
 80019f0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fa71 	bl	8001edc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a02:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001a06:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a16:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	22e0      	movs	r2, #224	; 0xe0
 8001a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e049      	b.n	8001ace <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a42:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001a46:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_ETH_Init+0x1c8>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6952      	ldr	r2, [r2, #20]
 8001a4e:	0051      	lsls	r1, r2, #1
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a5a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fad9 	bl	8002016 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 fb1f 	bl	80020a8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	3305      	adds	r3, #5
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	021a      	lsls	r2, r3, #8
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	3303      	adds	r3, #3
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	061a      	lsls	r2, r3, #24
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	3302      	adds	r3, #2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	041b      	lsls	r3, r3, #16
 8001a9c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001aa8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ab6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ab8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	58024400 	.word	0x58024400
 8001adc:	58000400 	.word	0x58000400
 8001ae0:	431bde83 	.word	0x431bde83
 8001ae4:	ffff8001 	.word	0xffff8001

08001ae8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b02:	f001 fe7d 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8001b06:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d908      	bls.n	8001b22 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d804      	bhi.n	8001b22 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	e027      	b.n	8001b72 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d908      	bls.n	8001b3c <HAL_ETH_SetMDIOClockRange+0x54>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d204      	bcs.n	8001b3c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	e01a      	b.n	8001b72 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d303      	bcc.n	8001b4c <HAL_ETH_SetMDIOClockRange+0x64>
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d911      	bls.n	8001b70 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d908      	bls.n	8001b66 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d804      	bhi.n	8001b66 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e005      	b.n	8001b72 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e000      	b.n	8001b72 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001b70:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	01312cff 	.word	0x01312cff
 8001b88:	02160ebf 	.word	0x02160ebf
 8001b8c:	03938700 	.word	0x03938700
 8001b90:	05f5e0ff 	.word	0x05f5e0ff
 8001b94:	08f0d17f 	.word	0x08f0d17f

08001b98 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001baa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	791b      	ldrb	r3, [r3, #4]
 8001bb0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001bb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	7b1b      	ldrb	r3, [r3, #12]
 8001bb8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001bba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	7b5b      	ldrb	r3, [r3, #13]
 8001bc0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001bc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	7b9b      	ldrb	r3, [r3, #14]
 8001bc8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001bca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	7bdb      	ldrb	r3, [r3, #15]
 8001bd0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001bd2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	7c12      	ldrb	r2, [r2, #16]
 8001bd8:	2a00      	cmp	r2, #0
 8001bda:	d102      	bne.n	8001be2 <ETH_SetMACConfig+0x4a>
 8001bdc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001be0:	e000      	b.n	8001be4 <ETH_SetMACConfig+0x4c>
 8001be2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001be4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	7c52      	ldrb	r2, [r2, #17]
 8001bea:	2a00      	cmp	r2, #0
 8001bec:	d102      	bne.n	8001bf4 <ETH_SetMACConfig+0x5c>
 8001bee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bf2:	e000      	b.n	8001bf6 <ETH_SetMACConfig+0x5e>
 8001bf4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bf6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	7c9b      	ldrb	r3, [r3, #18]
 8001bfc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bfe:	431a      	orrs	r2, r3
               macconf->Speed |
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001c04:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001c0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	7f1b      	ldrb	r3, [r3, #28]
 8001c10:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001c12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	7f5b      	ldrb	r3, [r3, #29]
 8001c18:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001c1a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	7f92      	ldrb	r2, [r2, #30]
 8001c20:	2a00      	cmp	r2, #0
 8001c22:	d102      	bne.n	8001c2a <ETH_SetMACConfig+0x92>
 8001c24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c28:	e000      	b.n	8001c2c <ETH_SetMACConfig+0x94>
 8001c2a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001c2c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	7fdb      	ldrb	r3, [r3, #31]
 8001c32:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001c34:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d102      	bne.n	8001c46 <ETH_SetMACConfig+0xae>
 8001c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c44:	e000      	b.n	8001c48 <ETH_SetMACConfig+0xb0>
 8001c46:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001c48:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001c4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c56:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001c58:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <ETH_SetMACConfig+0x22c>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	68f9      	ldr	r1, [r7, #12]
 8001c72:	430b      	orrs	r3, r1
 8001c74:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c82:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c84:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c8c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001c8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c96:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001c98:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001ca0:	2a00      	cmp	r2, #0
 8001ca2:	d102      	bne.n	8001caa <ETH_SetMACConfig+0x112>
 8001ca4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ca8:	e000      	b.n	8001cac <ETH_SetMACConfig+0x114>
 8001caa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001cac:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4b42      	ldr	r3, [pc, #264]	; (8001dc8 <ETH_SetMACConfig+0x230>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cd0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	4b3a      	ldr	r3, [pc, #232]	; (8001dcc <ETH_SetMACConfig+0x234>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	68f9      	ldr	r1, [r7, #12]
 8001cea:	430b      	orrs	r3, r1
 8001cec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cf4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cfa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d02:	2a00      	cmp	r2, #0
 8001d04:	d101      	bne.n	8001d0a <ETH_SetMACConfig+0x172>
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	e000      	b.n	8001d0c <ETH_SetMACConfig+0x174>
 8001d0a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001d0c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d12:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d1e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001d22:	4013      	ands	r3, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	68f9      	ldr	r1, [r7, #12]
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001d34:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001d3c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	f023 0103 	bic.w	r1, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001d62:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001d7e:	2a00      	cmp	r2, #0
 8001d80:	d101      	bne.n	8001d86 <ETH_SetMACConfig+0x1ee>
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	e000      	b.n	8001d88 <ETH_SetMACConfig+0x1f0>
 8001d86:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d88:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001d90:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001d9a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001da8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	00048083 	.word	0x00048083
 8001dc8:	c0f88000 	.word	0xc0f88000
 8001dcc:	fffffef0 	.word	0xfffffef0

08001dd0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <ETH_SetDMAConfig+0xf8>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	6811      	ldr	r1, [r2, #0]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	430b      	orrs	r3, r1
 8001df2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001df6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	791b      	ldrb	r3, [r3, #4]
 8001dfc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e02:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	7b1b      	ldrb	r3, [r3, #12]
 8001e08:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4b2c      	ldr	r3, [pc, #176]	; (8001ecc <ETH_SetDMAConfig+0xfc>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	68f9      	ldr	r1, [r7, #12]
 8001e22:	430b      	orrs	r3, r1
 8001e24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e28:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	7b5b      	ldrb	r3, [r3, #13]
 8001e2e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e40:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <ETH_SetDMAConfig+0x100>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	68f9      	ldr	r1, [r7, #12]
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e54:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	7d1b      	ldrb	r3, [r3, #20]
 8001e60:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e62:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	7f5b      	ldrb	r3, [r3, #29]
 8001e68:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e76:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <ETH_SetDMAConfig+0x104>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	68f9      	ldr	r1, [r7, #12]
 8001e84:	430b      	orrs	r3, r1
 8001e86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e8a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	7f1b      	ldrb	r3, [r3, #28]
 8001e92:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <ETH_SetDMAConfig+0x108>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	68f9      	ldr	r1, [r7, #12]
 8001eb2:	430b      	orrs	r3, r1
 8001eb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eb8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	ffff87fd 	.word	0xffff87fd
 8001ecc:	ffff2ffe 	.word	0xffff2ffe
 8001ed0:	fffec000 	.word	0xfffec000
 8001ed4:	ffc0efef 	.word	0xffc0efef
 8001ed8:	7fc0ffff 	.word	0x7fc0ffff

08001edc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0a4      	sub	sp, #144	; 0x90
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001eea:	2300      	movs	r3, #0
 8001eec:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001f00:	2301      	movs	r3, #1
 8001f02:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001f12:	2301      	movs	r3, #1
 8001f14:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001f34:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001f38:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001f40:	2300      	movs	r3, #0
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001f44:	2301      	movs	r3, #1
 8001f46:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001f56:	2300      	movs	r3, #0
 8001f58:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f74:	2320      	movs	r3, #32
 8001f76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001f86:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f90:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fde6 	bl	8001b98 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fe6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ff0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ff4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001ffc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002002:	f107 0308 	add.w	r3, r7, #8
 8002006:	4619      	mov	r1, r3
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fee1 	bl	8001dd0 <ETH_SetDMAConfig>
}
 800200e:	bf00      	nop
 8002010:	3790      	adds	r7, #144	; 0x90
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	e01d      	b.n	8002060 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68d9      	ldr	r1, [r3, #12]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	440b      	add	r3, r1
 8002034:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2200      	movs	r2, #0
 8002040:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800204e:	68b9      	ldr	r1, [r7, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	3206      	adds	r2, #6
 8002056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3301      	adds	r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d9de      	bls.n	8002024 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002074:	461a      	mov	r2, r3
 8002076:	2303      	movs	r3, #3
 8002078:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002088:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002098:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e023      	b.n	80020fe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6919      	ldr	r1, [r3, #16]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2200      	movs	r2, #0
 80020d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2200      	movs	r2, #0
 80020de:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2200      	movs	r2, #0
 80020e4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2200      	movs	r2, #0
 80020ea:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	3212      	adds	r2, #18
 80020f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3301      	adds	r3, #1
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d9d8      	bls.n	80020b6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212a:	461a      	mov	r2, r3
 800212c:	2303      	movs	r3, #3
 800212e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800213e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002152:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002172:	4b89      	ldr	r3, [pc, #548]	; (8002398 <HAL_GPIO_Init+0x234>)
 8002174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002176:	e194      	b.n	80024a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2101      	movs	r1, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8186 	beq.w	800249c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d005      	beq.n	80021a8 <HAL_GPIO_Init+0x44>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d130      	bne.n	800220a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021de:	2201      	movs	r2, #1
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	f003 0201 	and.w	r2, r3, #1
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b03      	cmp	r3, #3
 8002214:	d017      	beq.n	8002246 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d123      	bne.n	800229a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	08da      	lsrs	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3208      	adds	r2, #8
 800225a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	08da      	lsrs	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3208      	adds	r2, #8
 8002294:	69b9      	ldr	r1, [r7, #24]
 8002296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	2203      	movs	r2, #3
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0203 	and.w	r2, r3, #3
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80e0 	beq.w	800249c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022dc:	4b2f      	ldr	r3, [pc, #188]	; (800239c <HAL_GPIO_Init+0x238>)
 80022de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022e2:	4a2e      	ldr	r2, [pc, #184]	; (800239c <HAL_GPIO_Init+0x238>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022ec:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_GPIO_Init+0x238>)
 80022ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fa:	4a29      	ldr	r2, [pc, #164]	; (80023a0 <HAL_GPIO_Init+0x23c>)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	3302      	adds	r3, #2
 8002302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a20      	ldr	r2, [pc, #128]	; (80023a4 <HAL_GPIO_Init+0x240>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d052      	beq.n	80023cc <HAL_GPIO_Init+0x268>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a1f      	ldr	r2, [pc, #124]	; (80023a8 <HAL_GPIO_Init+0x244>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d031      	beq.n	8002392 <HAL_GPIO_Init+0x22e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1e      	ldr	r2, [pc, #120]	; (80023ac <HAL_GPIO_Init+0x248>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d02b      	beq.n	800238e <HAL_GPIO_Init+0x22a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a1d      	ldr	r2, [pc, #116]	; (80023b0 <HAL_GPIO_Init+0x24c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d025      	beq.n	800238a <HAL_GPIO_Init+0x226>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <HAL_GPIO_Init+0x250>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01f      	beq.n	8002386 <HAL_GPIO_Init+0x222>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_GPIO_Init+0x254>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d019      	beq.n	8002382 <HAL_GPIO_Init+0x21e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <HAL_GPIO_Init+0x258>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <HAL_GPIO_Init+0x21a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <HAL_GPIO_Init+0x25c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00d      	beq.n	800237a <HAL_GPIO_Init+0x216>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <HAL_GPIO_Init+0x260>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d007      	beq.n	8002376 <HAL_GPIO_Init+0x212>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <HAL_GPIO_Init+0x264>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d101      	bne.n	8002372 <HAL_GPIO_Init+0x20e>
 800236e:	2309      	movs	r3, #9
 8002370:	e02d      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 8002372:	230a      	movs	r3, #10
 8002374:	e02b      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 8002376:	2308      	movs	r3, #8
 8002378:	e029      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 800237a:	2307      	movs	r3, #7
 800237c:	e027      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 800237e:	2306      	movs	r3, #6
 8002380:	e025      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 8002382:	2305      	movs	r3, #5
 8002384:	e023      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 8002386:	2304      	movs	r3, #4
 8002388:	e021      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 800238a:	2303      	movs	r3, #3
 800238c:	e01f      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 800238e:	2302      	movs	r3, #2
 8002390:	e01d      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 8002392:	2301      	movs	r3, #1
 8002394:	e01b      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 8002396:	bf00      	nop
 8002398:	58000080 	.word	0x58000080
 800239c:	58024400 	.word	0x58024400
 80023a0:	58000400 	.word	0x58000400
 80023a4:	58020000 	.word	0x58020000
 80023a8:	58020400 	.word	0x58020400
 80023ac:	58020800 	.word	0x58020800
 80023b0:	58020c00 	.word	0x58020c00
 80023b4:	58021000 	.word	0x58021000
 80023b8:	58021400 	.word	0x58021400
 80023bc:	58021800 	.word	0x58021800
 80023c0:	58021c00 	.word	0x58021c00
 80023c4:	58022000 	.word	0x58022000
 80023c8:	58022400 	.word	0x58022400
 80023cc:	2300      	movs	r3, #0
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	f002 0203 	and.w	r2, r2, #3
 80023d4:	0092      	lsls	r2, r2, #2
 80023d6:	4093      	lsls	r3, r2
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023de:	4938      	ldr	r1, [pc, #224]	; (80024c0 <HAL_GPIO_Init+0x35c>)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800241a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002440:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	3301      	adds	r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f47f ae63 	bne.w	8002178 <HAL_GPIO_Init+0x14>
  }
}
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
 80024b6:	3724      	adds	r7, #36	; 0x24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	58000400 	.word	0x58000400

080024c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]
 80024d0:	4613      	mov	r3, r2
 80024d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d4:	787b      	ldrb	r3, [r7, #1]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80024e0:	e003      	b.n	80024ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024e2:	887b      	ldrh	r3, [r7, #2]
 80024e4:	041a      	lsls	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	619a      	str	r2, [r3, #24]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	460b      	mov	r3, r1
 8002500:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002508:	887a      	ldrh	r2, [r7, #2]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4013      	ands	r3, r2
 800250e:	041a      	lsls	r2, r3, #16
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	43d9      	mvns	r1, r3
 8002514:	887b      	ldrh	r3, [r7, #2]
 8002516:	400b      	ands	r3, r1
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	619a      	str	r2, [r3, #24]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002534:	4a08      	ldr	r2, [pc, #32]	; (8002558 <HAL_HSEM_FastTake+0x2c>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3320      	adds	r3, #32
 800253a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253e:	4a07      	ldr	r2, [pc, #28]	; (800255c <HAL_HSEM_FastTake+0x30>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d101      	bne.n	8002548 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	e000      	b.n	800254a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	58026400 	.word	0x58026400
 800255c:	80000300 	.word	0x80000300

08002560 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800256a:	4906      	ldr	r1, [pc, #24]	; (8002584 <HAL_HSEM_Release+0x24>)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	58026400 	.word	0x58026400

08002588 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800258a:	b08f      	sub	sp, #60	; 0x3c
 800258c:	af0a      	add	r7, sp, #40	; 0x28
 800258e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e116      	b.n	80027c8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7fe febf 	bl	8001338 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2203      	movs	r2, #3
 80025be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f004 f8dd 	bl	8006798 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	687e      	ldr	r6, [r7, #4]
 80025e6:	466d      	mov	r5, sp
 80025e8:	f106 0410 	add.w	r4, r6, #16
 80025ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80025fc:	1d33      	adds	r3, r6, #4
 80025fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002600:	6838      	ldr	r0, [r7, #0]
 8002602:	f004 f85b 	bl	80066bc <USB_CoreInit>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0d7      	b.n	80027c8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f004 f8cb 	bl	80067ba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e04a      	b.n	80026c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	333d      	adds	r3, #61	; 0x3d
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	333c      	adds	r3, #60	; 0x3c
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002652:	7bfa      	ldrb	r2, [r7, #15]
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	b298      	uxth	r0, r3
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	3356      	adds	r3, #86	; 0x56
 8002666:	4602      	mov	r2, r0
 8002668:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	3340      	adds	r3, #64	; 0x40
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	3344      	adds	r3, #68	; 0x44
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	3348      	adds	r3, #72	; 0x48
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	334c      	adds	r3, #76	; 0x4c
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	3301      	adds	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	7bfa      	ldrb	r2, [r7, #15]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d3af      	bcc.n	800262a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e044      	b.n	800275a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	3301      	adds	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	429a      	cmp	r2, r3
 8002762:	d3b5      	bcc.n	80026d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	687e      	ldr	r6, [r7, #4]
 800276c:	466d      	mov	r5, sp
 800276e:	f106 0410 	add.w	r4, r6, #16
 8002772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800277a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800277e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002782:	1d33      	adds	r3, r6, #4
 8002784:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002786:	6838      	ldr	r0, [r7, #0]
 8002788:	f004 f864 	bl	8006854 <USB_DevInit>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e014      	b.n	80027c8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d102      	bne.n	80027bc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f80a 	bl	80027d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f004 fa22 	bl	8006c0a <USB_DevDisconnect>

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_PCDEx_ActivateLPM+0x44>)
 8002800:	4313      	orrs	r3, r2
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	10000003 	.word	0x10000003

08002818 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002820:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	2b06      	cmp	r3, #6
 800282a:	d00a      	beq.n	8002842 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800282c:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	429a      	cmp	r2, r3
 8002838:	d001      	beq.n	800283e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e040      	b.n	80028c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	e03e      	b.n	80028c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002842:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800284a:	491f      	ldr	r1, [pc, #124]	; (80028c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4313      	orrs	r3, r2
 8002850:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002852:	f7fe ff2f 	bl	80016b4 <HAL_GetTick>
 8002856:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002858:	e009      	b.n	800286e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800285a:	f7fe ff2b 	bl	80016b4 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002868:	d901      	bls.n	800286e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e028      	b.n	80028c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800286e:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287a:	d1ee      	bne.n	800285a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b1e      	cmp	r3, #30
 8002880:	d008      	beq.n	8002894 <HAL_PWREx_ConfigSupply+0x7c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b2e      	cmp	r3, #46	; 0x2e
 8002886:	d005      	beq.n	8002894 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b1d      	cmp	r3, #29
 800288c:	d002      	beq.n	8002894 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b2d      	cmp	r3, #45	; 0x2d
 8002892:	d114      	bne.n	80028be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002894:	f7fe ff0e 	bl	80016b4 <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800289a:	e009      	b.n	80028b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800289c:	f7fe ff0a 	bl	80016b4 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028aa:	d901      	bls.n	80028b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e007      	b.n	80028c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028bc:	d1ee      	bne.n	800289c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	58024800 	.word	0x58024800

080028cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	58024800 	.word	0x58024800

080028ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08c      	sub	sp, #48	; 0x30
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	f000 bc48 	b.w	8003190 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8088 	beq.w	8002a1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290e:	4b99      	ldr	r3, [pc, #612]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002918:	4b96      	ldr	r3, [pc, #600]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002920:	2b10      	cmp	r3, #16
 8002922:	d007      	beq.n	8002934 <HAL_RCC_OscConfig+0x48>
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002926:	2b18      	cmp	r3, #24
 8002928:	d111      	bne.n	800294e <HAL_RCC_OscConfig+0x62>
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d10c      	bne.n	800294e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	4b8f      	ldr	r3, [pc, #572]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d06d      	beq.n	8002a1c <HAL_RCC_OscConfig+0x130>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d169      	bne.n	8002a1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f000 bc21 	b.w	8003190 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x7a>
 8002958:	4b86      	ldr	r3, [pc, #536]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a85      	ldr	r2, [pc, #532]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 800295e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	e02e      	b.n	80029c4 <HAL_RCC_OscConfig+0xd8>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x9c>
 800296e:	4b81      	ldr	r3, [pc, #516]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a80      	ldr	r2, [pc, #512]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b7e      	ldr	r3, [pc, #504]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a7d      	ldr	r2, [pc, #500]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002980:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e01d      	b.n	80029c4 <HAL_RCC_OscConfig+0xd8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0xc0>
 8002992:	4b78      	ldr	r3, [pc, #480]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a77      	ldr	r2, [pc, #476]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b75      	ldr	r3, [pc, #468]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a74      	ldr	r2, [pc, #464]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e00b      	b.n	80029c4 <HAL_RCC_OscConfig+0xd8>
 80029ac:	4b71      	ldr	r3, [pc, #452]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a70      	ldr	r2, [pc, #448]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 80029b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4b6e      	ldr	r3, [pc, #440]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a6d      	ldr	r2, [pc, #436]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 80029be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d013      	beq.n	80029f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7fe fe72 	bl	80016b4 <HAL_GetTick>
 80029d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d4:	f7fe fe6e 	bl	80016b4 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e3d4      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029e6:	4b63      	ldr	r3, [pc, #396]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0xe8>
 80029f2:	e014      	b.n	8002a1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fe5e 	bl	80016b4 <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fc:	f7fe fe5a 	bl	80016b4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e3c0      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a0e:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x110>
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80ca 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2c:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a34:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a36:	4b4f      	ldr	r3, [pc, #316]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <HAL_RCC_OscConfig+0x166>
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	2b18      	cmp	r3, #24
 8002a46:	d156      	bne.n	8002af6 <HAL_RCC_OscConfig+0x20a>
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d151      	bne.n	8002af6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a52:	4b48      	ldr	r3, [pc, #288]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <HAL_RCC_OscConfig+0x17e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e392      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a6a:	4b42      	ldr	r3, [pc, #264]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 0219 	bic.w	r2, r3, #25
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	493f      	ldr	r1, [pc, #252]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fe1a 	bl	80016b4 <HAL_GetTick>
 8002a80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a84:	f7fe fe16 	bl	80016b4 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e37c      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a96:	4b37      	ldr	r3, [pc, #220]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	f7fe fe37 	bl	8001714 <HAL_GetREVID>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d817      	bhi.n	8002ae0 <HAL_RCC_OscConfig+0x1f4>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b40      	cmp	r3, #64	; 0x40
 8002ab6:	d108      	bne.n	8002aca <HAL_RCC_OscConfig+0x1de>
 8002ab8:	4b2e      	ldr	r3, [pc, #184]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ac0:	4a2c      	ldr	r2, [pc, #176]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac8:	e07a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aca:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	031b      	lsls	r3, r3, #12
 8002ad8:	4926      	ldr	r1, [pc, #152]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ade:	e06f      	b.n	8002bc0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae0:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	4921      	ldr	r1, [pc, #132]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af4:	e064      	b.n	8002bc0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d047      	beq.n	8002b8e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 0219 	bic.w	r2, r3, #25
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	491a      	ldr	r1, [pc, #104]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fdd0 	bl	80016b4 <HAL_GetTick>
 8002b14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b18:	f7fe fdcc 	bl	80016b4 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e332      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b36:	f7fe fded 	bl	8001714 <HAL_GetREVID>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d819      	bhi.n	8002b78 <HAL_RCC_OscConfig+0x28c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b40      	cmp	r3, #64	; 0x40
 8002b4a:	d108      	bne.n	8002b5e <HAL_RCC_OscConfig+0x272>
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b54:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5a:	6053      	str	r3, [r2, #4]
 8002b5c:	e030      	b.n	8002bc0 <HAL_RCC_OscConfig+0x2d4>
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	031b      	lsls	r3, r3, #12
 8002b6c:	4901      	ldr	r1, [pc, #4]	; (8002b74 <HAL_RCC_OscConfig+0x288>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
 8002b72:	e025      	b.n	8002bc0 <HAL_RCC_OscConfig+0x2d4>
 8002b74:	58024400 	.word	0x58024400
 8002b78:	4b9a      	ldr	r3, [pc, #616]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	4997      	ldr	r1, [pc, #604]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
 8002b8c:	e018      	b.n	8002bc0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8e:	4b95      	ldr	r3, [pc, #596]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a94      	ldr	r2, [pc, #592]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fd8b 	bl	80016b4 <HAL_GetTick>
 8002b9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba2:	f7fe fd87 	bl	80016b4 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e2ed      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bb4:	4b8b      	ldr	r3, [pc, #556]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80a9 	beq.w	8002d20 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bce:	4b85      	ldr	r3, [pc, #532]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bd6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bd8:	4b82      	ldr	r3, [pc, #520]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d007      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x308>
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b18      	cmp	r3, #24
 8002be8:	d13a      	bne.n	8002c60 <HAL_RCC_OscConfig+0x374>
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d135      	bne.n	8002c60 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bf4:	4b7b      	ldr	r3, [pc, #492]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_OscConfig+0x320>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2b80      	cmp	r3, #128	; 0x80
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e2c1      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c0c:	f7fe fd82 	bl	8001714 <HAL_GetREVID>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d817      	bhi.n	8002c4a <HAL_RCC_OscConfig+0x35e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d108      	bne.n	8002c34 <HAL_RCC_OscConfig+0x348>
 8002c22:	4b70      	ldr	r3, [pc, #448]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c2a:	4a6e      	ldr	r2, [pc, #440]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c30:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c32:	e075      	b.n	8002d20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c34:	4b6b      	ldr	r3, [pc, #428]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	069b      	lsls	r3, r3, #26
 8002c42:	4968      	ldr	r1, [pc, #416]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c48:	e06a      	b.n	8002d20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c4a:	4b66      	ldr	r3, [pc, #408]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	061b      	lsls	r3, r3, #24
 8002c58:	4962      	ldr	r1, [pc, #392]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c5e:	e05f      	b.n	8002d20 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d042      	beq.n	8002cee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c68:	4b5e      	ldr	r3, [pc, #376]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a5d      	ldr	r2, [pc, #372]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe fd1e 	bl	80016b4 <HAL_GetTick>
 8002c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fd1a 	bl	80016b4 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e280      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c8e:	4b55      	ldr	r3, [pc, #340]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c9a:	f7fe fd3b 	bl	8001714 <HAL_GetREVID>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d817      	bhi.n	8002cd8 <HAL_RCC_OscConfig+0x3ec>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d108      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x3d6>
 8002cb0:	4b4c      	ldr	r3, [pc, #304]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cb8:	4a4a      	ldr	r2, [pc, #296]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cbe:	6053      	str	r3, [r2, #4]
 8002cc0:	e02e      	b.n	8002d20 <HAL_RCC_OscConfig+0x434>
 8002cc2:	4b48      	ldr	r3, [pc, #288]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	069b      	lsls	r3, r3, #26
 8002cd0:	4944      	ldr	r1, [pc, #272]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
 8002cd6:	e023      	b.n	8002d20 <HAL_RCC_OscConfig+0x434>
 8002cd8:	4b42      	ldr	r3, [pc, #264]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	061b      	lsls	r3, r3, #24
 8002ce6:	493f      	ldr	r1, [pc, #252]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60cb      	str	r3, [r1, #12]
 8002cec:	e018      	b.n	8002d20 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cee:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a3c      	ldr	r2, [pc, #240]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fcdb 	bl	80016b4 <HAL_GetTick>
 8002cfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d02:	f7fe fcd7 	bl	80016b4 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e23d      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d14:	4b33      	ldr	r3, [pc, #204]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d036      	beq.n	8002d9a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d019      	beq.n	8002d68 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d34:	4b2b      	ldr	r3, [pc, #172]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d38:	4a2a      	ldr	r2, [pc, #168]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7fe fcb8 	bl	80016b4 <HAL_GetTick>
 8002d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d48:	f7fe fcb4 	bl	80016b4 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e21a      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d5a:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x45c>
 8002d66:	e018      	b.n	8002d9a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d68:	4b1e      	ldr	r3, [pc, #120]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6c:	4a1d      	ldr	r2, [pc, #116]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fe fc9e 	bl	80016b4 <HAL_GetTick>
 8002d78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d7c:	f7fe fc9a 	bl	80016b4 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e200      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d039      	beq.n	8002e1a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a0c      	ldr	r2, [pc, #48]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002db8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dba:	f7fe fc7b 	bl	80016b4 <HAL_GetTick>
 8002dbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dc2:	f7fe fc77 	bl	80016b4 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1dd      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_RCC_OscConfig+0x4f8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x4d6>
 8002de0:	e01b      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
 8002de2:	bf00      	nop
 8002de4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002de8:	4b9b      	ldr	r3, [pc, #620]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a9a      	ldr	r2, [pc, #616]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002dee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002df2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002df4:	f7fe fc5e 	bl	80016b4 <HAL_GetTick>
 8002df8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dfc:	f7fe fc5a 	bl	80016b4 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e1c0      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e0e:	4b92      	ldr	r3, [pc, #584]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8081 	beq.w	8002f2a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e28:	4b8c      	ldr	r3, [pc, #560]	; (800305c <HAL_RCC_OscConfig+0x770>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a8b      	ldr	r2, [pc, #556]	; (800305c <HAL_RCC_OscConfig+0x770>)
 8002e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e34:	f7fe fc3e 	bl	80016b4 <HAL_GetTick>
 8002e38:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3c:	f7fe fc3a 	bl	80016b4 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	; 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e1a0      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e4e:	4b83      	ldr	r3, [pc, #524]	; (800305c <HAL_RCC_OscConfig+0x770>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d106      	bne.n	8002e70 <HAL_RCC_OscConfig+0x584>
 8002e62:	4b7d      	ldr	r3, [pc, #500]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a7c      	ldr	r2, [pc, #496]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6e:	e02d      	b.n	8002ecc <HAL_RCC_OscConfig+0x5e0>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10c      	bne.n	8002e92 <HAL_RCC_OscConfig+0x5a6>
 8002e78:	4b77      	ldr	r3, [pc, #476]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	4a76      	ldr	r2, [pc, #472]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	6713      	str	r3, [r2, #112]	; 0x70
 8002e84:	4b74      	ldr	r3, [pc, #464]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a73      	ldr	r2, [pc, #460]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002e8a:	f023 0304 	bic.w	r3, r3, #4
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e90:	e01c      	b.n	8002ecc <HAL_RCC_OscConfig+0x5e0>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b05      	cmp	r3, #5
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x5c8>
 8002e9a:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	4a6e      	ldr	r2, [pc, #440]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002ea0:	f043 0304 	orr.w	r3, r3, #4
 8002ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea6:	4b6c      	ldr	r3, [pc, #432]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	4a6b      	ldr	r2, [pc, #428]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0x5e0>
 8002eb4:	4b68      	ldr	r3, [pc, #416]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4a67      	ldr	r2, [pc, #412]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002eba:	f023 0301 	bic.w	r3, r3, #1
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec0:	4b65      	ldr	r3, [pc, #404]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	4a64      	ldr	r2, [pc, #400]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002ec6:	f023 0304 	bic.w	r3, r3, #4
 8002eca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d015      	beq.n	8002f00 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7fe fbee 	bl	80016b4 <HAL_GetTick>
 8002ed8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002edc:	f7fe fbea 	bl	80016b4 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e14e      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ef2:	4b59      	ldr	r3, [pc, #356]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0ee      	beq.n	8002edc <HAL_RCC_OscConfig+0x5f0>
 8002efe:	e014      	b.n	8002f2a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe fbd8 	bl	80016b4 <HAL_GetTick>
 8002f04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fe fbd4 	bl	80016b4 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e138      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f1e:	4b4e      	ldr	r3, [pc, #312]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1ee      	bne.n	8002f08 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 812d 	beq.w	800318e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f34:	4b48      	ldr	r3, [pc, #288]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f3c:	2b18      	cmp	r3, #24
 8002f3e:	f000 80bd 	beq.w	80030bc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	f040 809e 	bne.w	8003088 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4c:	4b42      	ldr	r3, [pc, #264]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a41      	ldr	r2, [pc, #260]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe fbac 	bl	80016b4 <HAL_GetTick>
 8002f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fe fba8 	bl	80016b4 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e10e      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f72:	4b39      	ldr	r3, [pc, #228]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f7e:	4b36      	ldr	r3, [pc, #216]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f82:	4b37      	ldr	r3, [pc, #220]	; (8003060 <HAL_RCC_OscConfig+0x774>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f8e:	0112      	lsls	r2, r2, #4
 8002f90:	430a      	orrs	r2, r1
 8002f92:	4931      	ldr	r1, [pc, #196]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	628b      	str	r3, [r1, #40]	; 0x28
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	025b      	lsls	r3, r3, #9
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	041b      	lsls	r3, r3, #16
 8002fb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	061b      	lsls	r3, r3, #24
 8002fc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fc8:	4923      	ldr	r1, [pc, #140]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002fce:	4b22      	ldr	r3, [pc, #136]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	4a21      	ldr	r2, [pc, #132]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fda:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fde:	4b21      	ldr	r3, [pc, #132]	; (8003064 <HAL_RCC_OscConfig+0x778>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fe6:	00d2      	lsls	r2, r2, #3
 8002fe8:	491b      	ldr	r1, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	f023 020c 	bic.w	r2, r3, #12
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	4917      	ldr	r1, [pc, #92]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	f023 0202 	bic.w	r2, r3, #2
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300c:	4912      	ldr	r1, [pc, #72]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 800300e:	4313      	orrs	r3, r2
 8003010:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	4a10      	ldr	r2, [pc, #64]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	4a0d      	ldr	r2, [pc, #52]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8003024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003028:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8003030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003034:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	4a07      	ldr	r2, [pc, #28]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a04      	ldr	r2, [pc, #16]	; (8003058 <HAL_RCC_OscConfig+0x76c>)
 8003048:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fe fb31 	bl	80016b4 <HAL_GetTick>
 8003052:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003054:	e011      	b.n	800307a <HAL_RCC_OscConfig+0x78e>
 8003056:	bf00      	nop
 8003058:	58024400 	.word	0x58024400
 800305c:	58024800 	.word	0x58024800
 8003060:	fffffc0c 	.word	0xfffffc0c
 8003064:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe fb24 	bl	80016b4 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e08a      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800307a:	4b47      	ldr	r3, [pc, #284]	; (8003198 <HAL_RCC_OscConfig+0x8ac>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x77c>
 8003086:	e082      	b.n	800318e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003088:	4b43      	ldr	r3, [pc, #268]	; (8003198 <HAL_RCC_OscConfig+0x8ac>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a42      	ldr	r2, [pc, #264]	; (8003198 <HAL_RCC_OscConfig+0x8ac>)
 800308e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe fb0e 	bl	80016b4 <HAL_GetTick>
 8003098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309c:	f7fe fb0a 	bl	80016b4 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e070      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ae:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <HAL_RCC_OscConfig+0x8ac>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x7b0>
 80030ba:	e068      	b.n	800318e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030bc:	4b36      	ldr	r3, [pc, #216]	; (8003198 <HAL_RCC_OscConfig+0x8ac>)
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030c2:	4b35      	ldr	r3, [pc, #212]	; (8003198 <HAL_RCC_OscConfig+0x8ac>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d031      	beq.n	8003134 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f003 0203 	and.w	r2, r3, #3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d12a      	bne.n	8003134 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d122      	bne.n	8003134 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d11a      	bne.n	8003134 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	0a5b      	lsrs	r3, r3, #9
 8003102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d111      	bne.n	8003134 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	0c1b      	lsrs	r3, r3, #16
 8003114:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d108      	bne.n	8003134 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	0e1b      	lsrs	r3, r3, #24
 8003126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003130:	429a      	cmp	r2, r3
 8003132:	d001      	beq.n	8003138 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e02b      	b.n	8003190 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003138:	4b17      	ldr	r3, [pc, #92]	; (8003198 <HAL_RCC_OscConfig+0x8ac>)
 800313a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313c:	08db      	lsrs	r3, r3, #3
 800313e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003142:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	429a      	cmp	r2, r3
 800314c:	d01f      	beq.n	800318e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800314e:	4b12      	ldr	r3, [pc, #72]	; (8003198 <HAL_RCC_OscConfig+0x8ac>)
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	4a11      	ldr	r2, [pc, #68]	; (8003198 <HAL_RCC_OscConfig+0x8ac>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800315a:	f7fe faab 	bl	80016b4 <HAL_GetTick>
 800315e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003160:	bf00      	nop
 8003162:	f7fe faa7 	bl	80016b4 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	4293      	cmp	r3, r2
 800316c:	d0f9      	beq.n	8003162 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <HAL_RCC_OscConfig+0x8ac>)
 8003170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_RCC_OscConfig+0x8b0>)
 8003174:	4013      	ands	r3, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800317a:	00d2      	lsls	r2, r2, #3
 800317c:	4906      	ldr	r1, [pc, #24]	; (8003198 <HAL_RCC_OscConfig+0x8ac>)
 800317e:	4313      	orrs	r3, r2
 8003180:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_RCC_OscConfig+0x8ac>)
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	4a04      	ldr	r2, [pc, #16]	; (8003198 <HAL_RCC_OscConfig+0x8ac>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3730      	adds	r7, #48	; 0x30
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	58024400 	.word	0x58024400
 800319c:	ffff0007 	.word	0xffff0007

080031a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e19c      	b.n	80034ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031b4:	4b8a      	ldr	r3, [pc, #552]	; (80033e0 <HAL_RCC_ClockConfig+0x240>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d910      	bls.n	80031e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b87      	ldr	r3, [pc, #540]	; (80033e0 <HAL_RCC_ClockConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 020f 	bic.w	r2, r3, #15
 80031ca:	4985      	ldr	r1, [pc, #532]	; (80033e0 <HAL_RCC_ClockConfig+0x240>)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d2:	4b83      	ldr	r3, [pc, #524]	; (80033e0 <HAL_RCC_ClockConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e184      	b.n	80034ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d010      	beq.n	8003212 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	4b7b      	ldr	r3, [pc, #492]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d908      	bls.n	8003212 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003200:	4b78      	ldr	r3, [pc, #480]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	4975      	ldr	r1, [pc, #468]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 800320e:	4313      	orrs	r3, r2
 8003210:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d010      	beq.n	8003240 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	4b70      	ldr	r3, [pc, #448]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800322a:	429a      	cmp	r2, r3
 800322c:	d908      	bls.n	8003240 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800322e:	4b6d      	ldr	r3, [pc, #436]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	496a      	ldr	r1, [pc, #424]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 800323c:	4313      	orrs	r3, r2
 800323e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	2b00      	cmp	r3, #0
 800324a:	d010      	beq.n	800326e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699a      	ldr	r2, [r3, #24]
 8003250:	4b64      	ldr	r3, [pc, #400]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003258:	429a      	cmp	r2, r3
 800325a:	d908      	bls.n	800326e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800325c:	4b61      	ldr	r3, [pc, #388]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	495e      	ldr	r1, [pc, #376]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 800326a:	4313      	orrs	r3, r2
 800326c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	2b00      	cmp	r3, #0
 8003278:	d010      	beq.n	800329c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	4b59      	ldr	r3, [pc, #356]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003286:	429a      	cmp	r2, r3
 8003288:	d908      	bls.n	800329c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800328a:	4b56      	ldr	r3, [pc, #344]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	4953      	ldr	r1, [pc, #332]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 8003298:	4313      	orrs	r3, r2
 800329a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d010      	beq.n	80032ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	4b4d      	ldr	r3, [pc, #308]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d908      	bls.n	80032ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b4a      	ldr	r3, [pc, #296]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f023 020f 	bic.w	r2, r3, #15
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4947      	ldr	r1, [pc, #284]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d055      	beq.n	8003382 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80032d6:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	4940      	ldr	r1, [pc, #256]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032f0:	4b3c      	ldr	r3, [pc, #240]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d121      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0f6      	b.n	80034ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d107      	bne.n	8003318 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003308:	4b36      	ldr	r3, [pc, #216]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d115      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0ea      	b.n	80034ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d107      	bne.n	8003330 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003320:	4b30      	ldr	r3, [pc, #192]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d109      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0de      	b.n	80034ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003330:	4b2c      	ldr	r3, [pc, #176]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0d6      	b.n	80034ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003340:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f023 0207 	bic.w	r2, r3, #7
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4925      	ldr	r1, [pc, #148]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 800334e:	4313      	orrs	r3, r2
 8003350:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003352:	f7fe f9af 	bl	80016b4 <HAL_GetTick>
 8003356:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003358:	e00a      	b.n	8003370 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335a:	f7fe f9ab 	bl	80016b4 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	; 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e0be      	b.n	80034ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003370:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	429a      	cmp	r2, r3
 8003380:	d1eb      	bne.n	800335a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d010      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	429a      	cmp	r2, r3
 800339c:	d208      	bcs.n	80033b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339e:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f023 020f 	bic.w	r2, r3, #15
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	490e      	ldr	r1, [pc, #56]	; (80033e4 <HAL_RCC_ClockConfig+0x244>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_ClockConfig+0x240>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d214      	bcs.n	80033e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <HAL_RCC_ClockConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 020f 	bic.w	r2, r3, #15
 80033c6:	4906      	ldr	r1, [pc, #24]	; (80033e0 <HAL_RCC_ClockConfig+0x240>)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <HAL_RCC_ClockConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e086      	b.n	80034ee <HAL_RCC_ClockConfig+0x34e>
 80033e0:	52002000 	.word	0x52002000
 80033e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d010      	beq.n	8003416 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	4b3f      	ldr	r3, [pc, #252]	; (80034f8 <HAL_RCC_ClockConfig+0x358>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003400:	429a      	cmp	r2, r3
 8003402:	d208      	bcs.n	8003416 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003404:	4b3c      	ldr	r3, [pc, #240]	; (80034f8 <HAL_RCC_ClockConfig+0x358>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	4939      	ldr	r1, [pc, #228]	; (80034f8 <HAL_RCC_ClockConfig+0x358>)
 8003412:	4313      	orrs	r3, r2
 8003414:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d010      	beq.n	8003444 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	4b34      	ldr	r3, [pc, #208]	; (80034f8 <HAL_RCC_ClockConfig+0x358>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800342e:	429a      	cmp	r2, r3
 8003430:	d208      	bcs.n	8003444 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003432:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <HAL_RCC_ClockConfig+0x358>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	492e      	ldr	r1, [pc, #184]	; (80034f8 <HAL_RCC_ClockConfig+0x358>)
 8003440:	4313      	orrs	r3, r2
 8003442:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	d010      	beq.n	8003472 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699a      	ldr	r2, [r3, #24]
 8003454:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <HAL_RCC_ClockConfig+0x358>)
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800345c:	429a      	cmp	r2, r3
 800345e:	d208      	bcs.n	8003472 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003460:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <HAL_RCC_ClockConfig+0x358>)
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	4922      	ldr	r1, [pc, #136]	; (80034f8 <HAL_RCC_ClockConfig+0x358>)
 800346e:	4313      	orrs	r3, r2
 8003470:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d010      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <HAL_RCC_ClockConfig+0x358>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800348a:	429a      	cmp	r2, r3
 800348c:	d208      	bcs.n	80034a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <HAL_RCC_ClockConfig+0x358>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	4917      	ldr	r1, [pc, #92]	; (80034f8 <HAL_RCC_ClockConfig+0x358>)
 800349c:	4313      	orrs	r3, r2
 800349e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034a0:	f000 f834 	bl	800350c <HAL_RCC_GetSysClockFreq>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <HAL_RCC_ClockConfig+0x358>)
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	4912      	ldr	r1, [pc, #72]	; (80034fc <HAL_RCC_ClockConfig+0x35c>)
 80034b2:	5ccb      	ldrb	r3, [r1, r3]
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
 80034bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034be:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <HAL_RCC_ClockConfig+0x358>)
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <HAL_RCC_ClockConfig+0x35c>)
 80034c8:	5cd3      	ldrb	r3, [r2, r3]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
 80034d4:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <HAL_RCC_ClockConfig+0x360>)
 80034d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034d8:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <HAL_RCC_ClockConfig+0x364>)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <HAL_RCC_ClockConfig+0x368>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe f89c 	bl	8001620 <HAL_InitTick>
 80034e8:	4603      	mov	r3, r0
 80034ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	58024400 	.word	0x58024400
 80034fc:	08006fa4 	.word	0x08006fa4
 8003500:	24000004 	.word	0x24000004
 8003504:	24000000 	.word	0x24000000
 8003508:	24000008 	.word	0x24000008

0800350c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800350c:	b480      	push	{r7}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003512:	4bb3      	ldr	r3, [pc, #716]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800351a:	2b18      	cmp	r3, #24
 800351c:	f200 8155 	bhi.w	80037ca <HAL_RCC_GetSysClockFreq+0x2be>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	0800358d 	.word	0x0800358d
 800352c:	080037cb 	.word	0x080037cb
 8003530:	080037cb 	.word	0x080037cb
 8003534:	080037cb 	.word	0x080037cb
 8003538:	080037cb 	.word	0x080037cb
 800353c:	080037cb 	.word	0x080037cb
 8003540:	080037cb 	.word	0x080037cb
 8003544:	080037cb 	.word	0x080037cb
 8003548:	080035b3 	.word	0x080035b3
 800354c:	080037cb 	.word	0x080037cb
 8003550:	080037cb 	.word	0x080037cb
 8003554:	080037cb 	.word	0x080037cb
 8003558:	080037cb 	.word	0x080037cb
 800355c:	080037cb 	.word	0x080037cb
 8003560:	080037cb 	.word	0x080037cb
 8003564:	080037cb 	.word	0x080037cb
 8003568:	080035b9 	.word	0x080035b9
 800356c:	080037cb 	.word	0x080037cb
 8003570:	080037cb 	.word	0x080037cb
 8003574:	080037cb 	.word	0x080037cb
 8003578:	080037cb 	.word	0x080037cb
 800357c:	080037cb 	.word	0x080037cb
 8003580:	080037cb 	.word	0x080037cb
 8003584:	080037cb 	.word	0x080037cb
 8003588:	080035bf 	.word	0x080035bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800358c:	4b94      	ldr	r3, [pc, #592]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003598:	4b91      	ldr	r3, [pc, #580]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	08db      	lsrs	r3, r3, #3
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	4a90      	ldr	r2, [pc, #576]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
 80035a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80035aa:	e111      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035ac:	4b8d      	ldr	r3, [pc, #564]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035ae:	61bb      	str	r3, [r7, #24]
      break;
 80035b0:	e10e      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80035b2:	4b8d      	ldr	r3, [pc, #564]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035b4:	61bb      	str	r3, [r7, #24]
      break;
 80035b6:	e10b      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80035b8:	4b8c      	ldr	r3, [pc, #560]	; (80037ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80035ba:	61bb      	str	r3, [r7, #24]
      break;
 80035bc:	e108      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035be:	4b88      	ldr	r3, [pc, #544]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80035c8:	4b85      	ldr	r3, [pc, #532]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035d4:	4b82      	ldr	r3, [pc, #520]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80035de:	4b80      	ldr	r3, [pc, #512]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e2:	08db      	lsrs	r3, r3, #3
 80035e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	fb02 f303 	mul.w	r3, r2, r3
 80035ee:	ee07 3a90 	vmov	s15, r3
 80035f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80e1 	beq.w	80037c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b02      	cmp	r3, #2
 8003606:	f000 8083 	beq.w	8003710 <HAL_RCC_GetSysClockFreq+0x204>
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b02      	cmp	r3, #2
 800360e:	f200 80a1 	bhi.w	8003754 <HAL_RCC_GetSysClockFreq+0x248>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x114>
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d056      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800361e:	e099      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003620:	4b6f      	ldr	r3, [pc, #444]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d02d      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800362c:	4b6c      	ldr	r3, [pc, #432]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	08db      	lsrs	r3, r3, #3
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	4a6b      	ldr	r2, [pc, #428]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
 800363c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	ee07 3a90 	vmov	s15, r3
 8003644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003656:	4b62      	ldr	r3, [pc, #392]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003666:	ed97 6a02 	vldr	s12, [r7, #8]
 800366a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80037f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800366e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800367a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800367e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003682:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003686:	e087      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003692:	eddf 6a58 	vldr	s13, [pc, #352]	; 80037f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800369a:	4b51      	ldr	r3, [pc, #324]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 80037f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036ca:	e065      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80037f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036de:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80036f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80037f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800370e:	e043      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80037fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800371e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003722:	4b2f      	ldr	r3, [pc, #188]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372a:	ee07 3a90 	vmov	s15, r3
 800372e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003732:	ed97 6a02 	vldr	s12, [r7, #8]
 8003736:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80037f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800373a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800373e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800374a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003752:	e021      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80037f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003766:	4b1e      	ldr	r3, [pc, #120]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003776:	ed97 6a02 	vldr	s12, [r7, #8]
 800377a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80037f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800377e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800378a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800378e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003792:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003796:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	0a5b      	lsrs	r3, r3, #9
 800379e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a2:	3301      	adds	r3, #1
 80037a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	ee07 3a90 	vmov	s15, r3
 80037ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80037b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037bc:	ee17 3a90 	vmov	r3, s15
 80037c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80037c2:	e005      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61bb      	str	r3, [r7, #24]
      break;
 80037c8:	e002      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037cc:	61bb      	str	r3, [r7, #24]
      break;
 80037ce:	bf00      	nop
  }

  return sysclockfreq;
 80037d0:	69bb      	ldr	r3, [r7, #24]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3724      	adds	r7, #36	; 0x24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	58024400 	.word	0x58024400
 80037e4:	03d09000 	.word	0x03d09000
 80037e8:	003d0900 	.word	0x003d0900
 80037ec:	007a1200 	.word	0x007a1200
 80037f0:	46000000 	.word	0x46000000
 80037f4:	4c742400 	.word	0x4c742400
 80037f8:	4a742400 	.word	0x4a742400
 80037fc:	4af42400 	.word	0x4af42400

08003800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003806:	f7ff fe81 	bl	800350c <HAL_RCC_GetSysClockFreq>
 800380a:	4602      	mov	r2, r0
 800380c:	4b10      	ldr	r3, [pc, #64]	; (8003850 <HAL_RCC_GetHCLKFreq+0x50>)
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	490f      	ldr	r1, [pc, #60]	; (8003854 <HAL_RCC_GetHCLKFreq+0x54>)
 8003818:	5ccb      	ldrb	r3, [r1, r3]
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_RCC_GetHCLKFreq+0x50>)
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	4a09      	ldr	r2, [pc, #36]	; (8003854 <HAL_RCC_GetHCLKFreq+0x54>)
 800382e:	5cd3      	ldrb	r3, [r2, r3]
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	fa22 f303 	lsr.w	r3, r2, r3
 800383a:	4a07      	ldr	r2, [pc, #28]	; (8003858 <HAL_RCC_GetHCLKFreq+0x58>)
 800383c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800383e:	4a07      	ldr	r2, [pc, #28]	; (800385c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003844:	4b04      	ldr	r3, [pc, #16]	; (8003858 <HAL_RCC_GetHCLKFreq+0x58>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	58024400 	.word	0x58024400
 8003854:	08006fa4 	.word	0x08006fa4
 8003858:	24000004 	.word	0x24000004
 800385c:	24000000 	.word	0x24000000

08003860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003864:	f7ff ffcc 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_RCC_GetPCLK1Freq+0x24>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	4904      	ldr	r1, [pc, #16]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003876:	5ccb      	ldrb	r3, [r1, r3]
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003880:	4618      	mov	r0, r3
 8003882:	bd80      	pop	{r7, pc}
 8003884:	58024400 	.word	0x58024400
 8003888:	08006fa4 	.word	0x08006fa4

0800388c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003890:	f7ff ffb6 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4904      	ldr	r1, [pc, #16]	; (80038b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	58024400 	.word	0x58024400
 80038b4:	08006fa4 	.word	0x08006fa4

080038b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038bc:	b0ca      	sub	sp, #296	; 0x128
 80038be:	af00      	add	r7, sp, #0
 80038c0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038c4:	2300      	movs	r3, #0
 80038c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038ca:	2300      	movs	r3, #0
 80038cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80038dc:	2500      	movs	r5, #0
 80038de:	ea54 0305 	orrs.w	r3, r4, r5
 80038e2:	d049      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038ee:	d02f      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80038f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038f4:	d828      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80038f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038fa:	d01a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80038fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003900:	d822      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800390a:	d007      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800390c:	e01c      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800390e:	4bb8      	ldr	r3, [pc, #736]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	4ab7      	ldr	r2, [pc, #732]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003918:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800391a:	e01a      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800391c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003920:	3308      	adds	r3, #8
 8003922:	2102      	movs	r1, #2
 8003924:	4618      	mov	r0, r3
 8003926:	f001 fc8f 	bl	8005248 <RCCEx_PLL2_Config>
 800392a:	4603      	mov	r3, r0
 800392c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003930:	e00f      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003936:	3328      	adds	r3, #40	; 0x28
 8003938:	2102      	movs	r1, #2
 800393a:	4618      	mov	r0, r3
 800393c:	f001 fd36 	bl	80053ac <RCCEx_PLL3_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003946:	e004      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800394e:	e000      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10a      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800395a:	4ba5      	ldr	r3, [pc, #660]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800395c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003968:	4aa1      	ldr	r2, [pc, #644]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800396a:	430b      	orrs	r3, r1
 800396c:	6513      	str	r3, [r2, #80]	; 0x50
 800396e:	e003      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003974:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003984:	f04f 0900 	mov.w	r9, #0
 8003988:	ea58 0309 	orrs.w	r3, r8, r9
 800398c:	d047      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	2b04      	cmp	r3, #4
 8003996:	d82a      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003998:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800399a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399e:	bf00      	nop
 80039a0:	080039b5 	.word	0x080039b5
 80039a4:	080039c3 	.word	0x080039c3
 80039a8:	080039d9 	.word	0x080039d9
 80039ac:	080039f7 	.word	0x080039f7
 80039b0:	080039f7 	.word	0x080039f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b4:	4b8e      	ldr	r3, [pc, #568]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	4a8d      	ldr	r2, [pc, #564]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039c0:	e01a      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c6:	3308      	adds	r3, #8
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 fc3c 	bl	8005248 <RCCEx_PLL2_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039d6:	e00f      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039dc:	3328      	adds	r3, #40	; 0x28
 80039de:	2100      	movs	r1, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 fce3 	bl	80053ac <RCCEx_PLL3_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039ec:	e004      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039f4:	e000      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80039f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a00:	4b7b      	ldr	r3, [pc, #492]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a04:	f023 0107 	bic.w	r1, r3, #7
 8003a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0e:	4a78      	ldr	r2, [pc, #480]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a10:	430b      	orrs	r3, r1
 8003a12:	6513      	str	r3, [r2, #80]	; 0x50
 8003a14:	e003      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a26:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003a2a:	f04f 0b00 	mov.w	fp, #0
 8003a2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a32:	d04c      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3e:	d030      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a44:	d829      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a46:	2bc0      	cmp	r3, #192	; 0xc0
 8003a48:	d02d      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003a4a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a4c:	d825      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a4e:	2b80      	cmp	r3, #128	; 0x80
 8003a50:	d018      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003a52:	2b80      	cmp	r3, #128	; 0x80
 8003a54:	d821      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003a5a:	2b40      	cmp	r3, #64	; 0x40
 8003a5c:	d007      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003a5e:	e01c      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a60:	4b63      	ldr	r3, [pc, #396]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	4a62      	ldr	r2, [pc, #392]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a6c:	e01c      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a72:	3308      	adds	r3, #8
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 fbe6 	bl	8005248 <RCCEx_PLL2_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a82:	e011      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a88:	3328      	adds	r3, #40	; 0x28
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 fc8d 	bl	80053ac <RCCEx_PLL3_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a98:	e006      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003aa0:	e002      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003aa2:	bf00      	nop
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003ab0:	4b4f      	ldr	r3, [pc, #316]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	4a4c      	ldr	r2, [pc, #304]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6513      	str	r3, [r2, #80]	; 0x50
 8003ac4:	e003      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003ada:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003ae4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4313      	orrs	r3, r2
 8003aec:	d053      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003af6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003afa:	d035      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003afc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b00:	d82e      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b06:	d031      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003b08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b0c:	d828      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b12:	d01a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b18:	d822      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003b1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b22:	d007      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003b24:	e01c      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b26:	4b32      	ldr	r3, [pc, #200]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	4a31      	ldr	r2, [pc, #196]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b32:	e01c      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b38:	3308      	adds	r3, #8
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 fb83 	bl	8005248 <RCCEx_PLL2_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b48:	e011      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b4e:	3328      	adds	r3, #40	; 0x28
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 fc2a 	bl	80053ac <RCCEx_PLL3_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b5e:	e006      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b66:	e002      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003b68:	bf00      	nop
 8003b6a:	e000      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10b      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b76:	4b1e      	ldr	r3, [pc, #120]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b86:	4a1a      	ldr	r2, [pc, #104]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b8c:	e003      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003ba2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003bac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	d056      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bc2:	d038      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003bc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bc8:	d831      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003bca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bce:	d034      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003bd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bd4:	d82b      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bda:	d01d      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003be0:	d825      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d006      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003be6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003bec:	e01f      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003bee:	bf00      	nop
 8003bf0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf4:	4ba2      	ldr	r3, [pc, #648]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	4aa1      	ldr	r2, [pc, #644]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c00:	e01c      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c06:	3308      	adds	r3, #8
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f001 fb1c 	bl	8005248 <RCCEx_PLL2_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c16:	e011      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c1c:	3328      	adds	r3, #40	; 0x28
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 fbc3 	bl	80053ac <RCCEx_PLL3_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c2c:	e006      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c34:	e002      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c44:	4b8e      	ldr	r3, [pc, #568]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c48:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c54:	4a8a      	ldr	r2, [pc, #552]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c56:	430b      	orrs	r3, r1
 8003c58:	6593      	str	r3, [r2, #88]	; 0x58
 8003c5a:	e003      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003c70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c74:	2300      	movs	r3, #0
 8003c76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c7a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4313      	orrs	r3, r2
 8003c82:	d03a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8a:	2b30      	cmp	r3, #48	; 0x30
 8003c8c:	d01f      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003c8e:	2b30      	cmp	r3, #48	; 0x30
 8003c90:	d819      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d00c      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	d815      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d019      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003c9e:	2b10      	cmp	r3, #16
 8003ca0:	d111      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca2:	4b77      	ldr	r3, [pc, #476]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	4a76      	ldr	r2, [pc, #472]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003cae:	e011      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb4:	3308      	adds	r3, #8
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f001 fac5 	bl	8005248 <RCCEx_PLL2_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003cc4:	e006      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ccc:	e002      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003cce:	bf00      	nop
 8003cd0:	e000      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003cdc:	4b68      	ldr	r3, [pc, #416]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cea:	4a65      	ldr	r2, [pc, #404]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cec:	430b      	orrs	r3, r1
 8003cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cf0:	e003      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003d06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d10:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4313      	orrs	r3, r2
 8003d18:	d051      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d24:	d035      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003d26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d2a:	d82e      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d30:	d031      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003d32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d36:	d828      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3c:	d01a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d42:	d822      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d007      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003d4e:	e01c      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d50:	4b4b      	ldr	r3, [pc, #300]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	4a4a      	ldr	r2, [pc, #296]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d5c:	e01c      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d62:	3308      	adds	r3, #8
 8003d64:	2100      	movs	r1, #0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 fa6e 	bl	8005248 <RCCEx_PLL2_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d72:	e011      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d78:	3328      	adds	r3, #40	; 0x28
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 fb15 	bl	80053ac <RCCEx_PLL3_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d88:	e006      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d90:	e002      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003d92:	bf00      	nop
 8003d94:	e000      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003da0:	4b37      	ldr	r3, [pc, #220]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dae:	4a34      	ldr	r2, [pc, #208]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6513      	str	r3, [r2, #80]	; 0x50
 8003db4:	e003      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003dca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003dd4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	d056      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de8:	d033      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003dea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dee:	d82c      	bhi.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003df0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003df4:	d02f      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003df6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dfa:	d826      	bhi.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003dfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e00:	d02b      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003e02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e06:	d820      	bhi.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e0c:	d012      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003e0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e12:	d81a      	bhi.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d022      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d115      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e22:	3308      	adds	r3, #8
 8003e24:	2101      	movs	r1, #1
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 fa0e 	bl	8005248 <RCCEx_PLL2_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e32:	e015      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e38:	3328      	adds	r3, #40	; 0x28
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f001 fab5 	bl	80053ac <RCCEx_PLL3_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e48:	e00a      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e50:	e006      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e52:	bf00      	nop
 8003e54:	e004      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e56:	bf00      	nop
 8003e58:	e002      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e5a:	bf00      	nop
 8003e5c:	e000      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10d      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e76:	4a02      	ldr	r2, [pc, #8]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	6513      	str	r3, [r2, #80]	; 0x50
 8003e7c:	e006      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003e7e:	bf00      	nop
 8003e80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e94:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ea2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	d055      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb8:	d033      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ebe:	d82c      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec4:	d02f      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eca:	d826      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ecc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ed0:	d02b      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003ed2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ed6:	d820      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003edc:	d012      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee2:	d81a      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d022      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003ee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eec:	d115      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 f9a6 	bl	8005248 <RCCEx_PLL2_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f02:	e015      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f08:	3328      	adds	r3, #40	; 0x28
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f001 fa4d 	bl	80053ac <RCCEx_PLL3_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f18:	e00a      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f20:	e006      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f22:	bf00      	nop
 8003f24:	e004      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f26:	bf00      	nop
 8003f28:	e002      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f2a:	bf00      	nop
 8003f2c:	e000      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10b      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f38:	4ba3      	ldr	r3, [pc, #652]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f48:	4a9f      	ldr	r2, [pc, #636]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f4a:	430b      	orrs	r3, r1
 8003f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f4e:	e003      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003f64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003f6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f72:	460b      	mov	r3, r1
 8003f74:	4313      	orrs	r3, r2
 8003f76:	d037      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f82:	d00e      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f88:	d816      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d018      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f92:	d111      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f94:	4b8c      	ldr	r3, [pc, #560]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	4a8b      	ldr	r2, [pc, #556]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fa0:	e00f      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	2101      	movs	r1, #1
 8003faa:	4618      	mov	r0, r3
 8003fac:	f001 f94c 	bl	8005248 <RCCEx_PLL2_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fb6:	e004      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10a      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fca:	4b7f      	ldr	r3, [pc, #508]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	4a7b      	ldr	r2, [pc, #492]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	6513      	str	r3, [r2, #80]	; 0x50
 8003fde:	e003      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003ffe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004002:	460b      	mov	r3, r1
 8004004:	4313      	orrs	r3, r2
 8004006:	d039      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400e:	2b03      	cmp	r3, #3
 8004010:	d81c      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004012:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004018:	08004055 	.word	0x08004055
 800401c:	08004029 	.word	0x08004029
 8004020:	08004037 	.word	0x08004037
 8004024:	08004055 	.word	0x08004055
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004028:	4b67      	ldr	r3, [pc, #412]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	4a66      	ldr	r2, [pc, #408]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800402e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004034:	e00f      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800403a:	3308      	adds	r3, #8
 800403c:	2102      	movs	r1, #2
 800403e:	4618      	mov	r0, r3
 8004040:	f001 f902 	bl	8005248 <RCCEx_PLL2_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800404a:	e004      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004052:	e000      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004056:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800405e:	4b5a      	ldr	r3, [pc, #360]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004062:	f023 0103 	bic.w	r1, r3, #3
 8004066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406c:	4a56      	ldr	r2, [pc, #344]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800406e:	430b      	orrs	r3, r1
 8004070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004072:	e003      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004074:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004078:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800407c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004088:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004092:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004096:	460b      	mov	r3, r1
 8004098:	4313      	orrs	r3, r2
 800409a:	f000 809f 	beq.w	80041dc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800409e:	4b4b      	ldr	r3, [pc, #300]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a4a      	ldr	r2, [pc, #296]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80040a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040aa:	f7fd fb03 	bl	80016b4 <HAL_GetTick>
 80040ae:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040b2:	e00b      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b4:	f7fd fafe 	bl	80016b4 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b64      	cmp	r3, #100	; 0x64
 80040c2:	d903      	bls.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040ca:	e005      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040cc:	4b3f      	ldr	r3, [pc, #252]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0ed      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80040d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d179      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80040e0:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040ec:	4053      	eors	r3, r2
 80040ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d015      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040f6:	4b34      	ldr	r3, [pc, #208]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004102:	4b31      	ldr	r3, [pc, #196]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004106:	4a30      	ldr	r2, [pc, #192]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800410c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800410e:	4b2e      	ldr	r3, [pc, #184]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	4a2d      	ldr	r2, [pc, #180]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004118:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800411a:	4a2b      	ldr	r2, [pc, #172]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800411c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004120:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004126:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800412a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412e:	d118      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fd fac0 	bl	80016b4 <HAL_GetTick>
 8004134:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004138:	e00d      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fd fabb 	bl	80016b4 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004144:	1ad2      	subs	r2, r2, r3
 8004146:	f241 3388 	movw	r3, #5000	; 0x1388
 800414a:	429a      	cmp	r2, r3
 800414c:	d903      	bls.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004154:	e005      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004156:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0eb      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004166:	2b00      	cmp	r3, #0
 8004168:	d129      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800417a:	d10e      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800417c:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004188:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800418c:	091a      	lsrs	r2, r3, #4
 800418e:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004190:	4013      	ands	r3, r2
 8004192:	4a0d      	ldr	r2, [pc, #52]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004194:	430b      	orrs	r3, r1
 8004196:	6113      	str	r3, [r2, #16]
 8004198:	e005      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800419a:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	4a0a      	ldr	r2, [pc, #40]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041a4:	6113      	str	r3, [r2, #16]
 80041a6:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b6:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b8:	430b      	orrs	r3, r1
 80041ba:	6713      	str	r3, [r2, #112]	; 0x70
 80041bc:	e00e      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80041c6:	e009      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80041c8:	58024400 	.word	0x58024400
 80041cc:	58024800 	.word	0x58024800
 80041d0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f002 0301 	and.w	r3, r2, #1
 80041e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f000 8089 	beq.w	8004310 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80041fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004204:	2b28      	cmp	r3, #40	; 0x28
 8004206:	d86b      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004208:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800420a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420e:	bf00      	nop
 8004210:	080042e9 	.word	0x080042e9
 8004214:	080042e1 	.word	0x080042e1
 8004218:	080042e1 	.word	0x080042e1
 800421c:	080042e1 	.word	0x080042e1
 8004220:	080042e1 	.word	0x080042e1
 8004224:	080042e1 	.word	0x080042e1
 8004228:	080042e1 	.word	0x080042e1
 800422c:	080042e1 	.word	0x080042e1
 8004230:	080042b5 	.word	0x080042b5
 8004234:	080042e1 	.word	0x080042e1
 8004238:	080042e1 	.word	0x080042e1
 800423c:	080042e1 	.word	0x080042e1
 8004240:	080042e1 	.word	0x080042e1
 8004244:	080042e1 	.word	0x080042e1
 8004248:	080042e1 	.word	0x080042e1
 800424c:	080042e1 	.word	0x080042e1
 8004250:	080042cb 	.word	0x080042cb
 8004254:	080042e1 	.word	0x080042e1
 8004258:	080042e1 	.word	0x080042e1
 800425c:	080042e1 	.word	0x080042e1
 8004260:	080042e1 	.word	0x080042e1
 8004264:	080042e1 	.word	0x080042e1
 8004268:	080042e1 	.word	0x080042e1
 800426c:	080042e1 	.word	0x080042e1
 8004270:	080042e9 	.word	0x080042e9
 8004274:	080042e1 	.word	0x080042e1
 8004278:	080042e1 	.word	0x080042e1
 800427c:	080042e1 	.word	0x080042e1
 8004280:	080042e1 	.word	0x080042e1
 8004284:	080042e1 	.word	0x080042e1
 8004288:	080042e1 	.word	0x080042e1
 800428c:	080042e1 	.word	0x080042e1
 8004290:	080042e9 	.word	0x080042e9
 8004294:	080042e1 	.word	0x080042e1
 8004298:	080042e1 	.word	0x080042e1
 800429c:	080042e1 	.word	0x080042e1
 80042a0:	080042e1 	.word	0x080042e1
 80042a4:	080042e1 	.word	0x080042e1
 80042a8:	080042e1 	.word	0x080042e1
 80042ac:	080042e1 	.word	0x080042e1
 80042b0:	080042e9 	.word	0x080042e9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b8:	3308      	adds	r3, #8
 80042ba:	2101      	movs	r1, #1
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 ffc3 	bl	8005248 <RCCEx_PLL2_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80042c8:	e00f      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ce:	3328      	adds	r3, #40	; 0x28
 80042d0:	2101      	movs	r1, #1
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 f86a 	bl	80053ac <RCCEx_PLL3_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80042de:	e004      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042e6:	e000      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80042e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80042f2:	4bbf      	ldr	r3, [pc, #764]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004300:	4abb      	ldr	r2, [pc, #748]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004302:	430b      	orrs	r3, r1
 8004304:	6553      	str	r3, [r2, #84]	; 0x54
 8004306:	e003      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004308:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800430c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004318:	f002 0302 	and.w	r3, r2, #2
 800431c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004320:	2300      	movs	r3, #0
 8004322:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004326:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800432a:	460b      	mov	r3, r1
 800432c:	4313      	orrs	r3, r2
 800432e:	d041      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004336:	2b05      	cmp	r3, #5
 8004338:	d824      	bhi.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800433a:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800433c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004340:	0800438d 	.word	0x0800438d
 8004344:	08004359 	.word	0x08004359
 8004348:	0800436f 	.word	0x0800436f
 800434c:	0800438d 	.word	0x0800438d
 8004350:	0800438d 	.word	0x0800438d
 8004354:	0800438d 	.word	0x0800438d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435c:	3308      	adds	r3, #8
 800435e:	2101      	movs	r1, #1
 8004360:	4618      	mov	r0, r3
 8004362:	f000 ff71 	bl	8005248 <RCCEx_PLL2_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800436c:	e00f      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004372:	3328      	adds	r3, #40	; 0x28
 8004374:	2101      	movs	r1, #1
 8004376:	4618      	mov	r0, r3
 8004378:	f001 f818 	bl	80053ac <RCCEx_PLL3_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004382:	e004      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800438a:	e000      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800438c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800438e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10a      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004396:	4b96      	ldr	r3, [pc, #600]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	f023 0107 	bic.w	r1, r3, #7
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a4:	4a92      	ldr	r2, [pc, #584]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043a6:	430b      	orrs	r3, r1
 80043a8:	6553      	str	r3, [r2, #84]	; 0x54
 80043aa:	e003      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043bc:	f002 0304 	and.w	r3, r2, #4
 80043c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043c4:	2300      	movs	r3, #0
 80043c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4313      	orrs	r3, r2
 80043d2:	d044      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043dc:	2b05      	cmp	r3, #5
 80043de:	d825      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80043e0:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	08004435 	.word	0x08004435
 80043ec:	08004401 	.word	0x08004401
 80043f0:	08004417 	.word	0x08004417
 80043f4:	08004435 	.word	0x08004435
 80043f8:	08004435 	.word	0x08004435
 80043fc:	08004435 	.word	0x08004435
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004404:	3308      	adds	r3, #8
 8004406:	2101      	movs	r1, #1
 8004408:	4618      	mov	r0, r3
 800440a:	f000 ff1d 	bl	8005248 <RCCEx_PLL2_Config>
 800440e:	4603      	mov	r3, r0
 8004410:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004414:	e00f      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800441a:	3328      	adds	r3, #40	; 0x28
 800441c:	2101      	movs	r1, #1
 800441e:	4618      	mov	r0, r3
 8004420:	f000 ffc4 	bl	80053ac <RCCEx_PLL3_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800442a:	e004      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004432:	e000      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10b      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800443e:	4b6c      	ldr	r3, [pc, #432]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004442:	f023 0107 	bic.w	r1, r3, #7
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800444a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800444e:	4a68      	ldr	r2, [pc, #416]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004450:	430b      	orrs	r3, r1
 8004452:	6593      	str	r3, [r2, #88]	; 0x58
 8004454:	e003      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800445a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	f002 0320 	and.w	r3, r2, #32
 800446a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800446e:	2300      	movs	r3, #0
 8004470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004474:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004478:	460b      	mov	r3, r1
 800447a:	4313      	orrs	r3, r2
 800447c:	d055      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004486:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800448a:	d033      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800448c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004490:	d82c      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004496:	d02f      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449c:	d826      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800449e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044a2:	d02b      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80044a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044a8:	d820      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80044aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ae:	d012      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80044b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044b4:	d81a      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d022      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80044ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044be:	d115      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c4:	3308      	adds	r3, #8
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 febd 	bl	8005248 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80044d4:	e015      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044da:	3328      	adds	r3, #40	; 0x28
 80044dc:	2102      	movs	r1, #2
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 ff64 	bl	80053ac <RCCEx_PLL3_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80044ea:	e00a      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044f2:	e006      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044f4:	bf00      	nop
 80044f6:	e004      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044f8:	bf00      	nop
 80044fa:	e002      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044fc:	bf00      	nop
 80044fe:	e000      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800450a:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	4a35      	ldr	r2, [pc, #212]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800451c:	430b      	orrs	r3, r1
 800451e:	6553      	str	r3, [r2, #84]	; 0x54
 8004520:	e003      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004526:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800452a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004532:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800453a:	2300      	movs	r3, #0
 800453c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004540:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004544:	460b      	mov	r3, r1
 8004546:	4313      	orrs	r3, r2
 8004548:	d058      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800454e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004552:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004556:	d033      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004558:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800455c:	d82c      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004562:	d02f      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004568:	d826      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800456a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800456e:	d02b      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004570:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004574:	d820      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457a:	d012      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800457c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004580:	d81a      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d022      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800458a:	d115      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800458c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004590:	3308      	adds	r3, #8
 8004592:	2100      	movs	r1, #0
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fe57 	bl	8005248 <RCCEx_PLL2_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045a0:	e015      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a6:	3328      	adds	r3, #40	; 0x28
 80045a8:	2102      	movs	r1, #2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fefe 	bl	80053ac <RCCEx_PLL3_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045b6:	e00a      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045be:	e006      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80045c0:	bf00      	nop
 80045c2:	e004      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80045c4:	bf00      	nop
 80045c6:	e002      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80045c8:	bf00      	nop
 80045ca:	e000      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80045cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10e      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045da:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045e6:	4a02      	ldr	r2, [pc, #8]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045e8:	430b      	orrs	r3, r1
 80045ea:	6593      	str	r3, [r2, #88]	; 0x58
 80045ec:	e006      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80045ee:	bf00      	nop
 80045f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80045fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800460c:	2300      	movs	r3, #0
 800460e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004612:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004616:	460b      	mov	r3, r1
 8004618:	4313      	orrs	r3, r2
 800461a:	d055      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800461c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004620:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004624:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004628:	d033      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800462a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800462e:	d82c      	bhi.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004634:	d02f      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800463a:	d826      	bhi.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800463c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004640:	d02b      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004642:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004646:	d820      	bhi.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800464c:	d012      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800464e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004652:	d81a      	bhi.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004654:	2b00      	cmp	r3, #0
 8004656:	d022      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800465c:	d115      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004662:	3308      	adds	r3, #8
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fdee 	bl	8005248 <RCCEx_PLL2_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004672:	e015      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004678:	3328      	adds	r3, #40	; 0x28
 800467a:	2102      	movs	r1, #2
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fe95 	bl	80053ac <RCCEx_PLL3_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004688:	e00a      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004690:	e006      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004692:	bf00      	nop
 8004694:	e004      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004696:	bf00      	nop
 8004698:	e002      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800469e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10b      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80046a8:	4ba1      	ldr	r3, [pc, #644]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ac:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046b8:	4a9d      	ldr	r2, [pc, #628]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ba:	430b      	orrs	r3, r1
 80046bc:	6593      	str	r3, [r2, #88]	; 0x58
 80046be:	e003      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80046c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	f002 0308 	and.w	r3, r2, #8
 80046d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046d8:	2300      	movs	r3, #0
 80046da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80046de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80046e2:	460b      	mov	r3, r1
 80046e4:	4313      	orrs	r3, r2
 80046e6:	d01e      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f4:	d10c      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fa:	3328      	adds	r3, #40	; 0x28
 80046fc:	2102      	movs	r1, #2
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fe54 	bl	80053ac <RCCEx_PLL3_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004710:	4b87      	ldr	r3, [pc, #540]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004714:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800471c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004720:	4a83      	ldr	r2, [pc, #524]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004722:	430b      	orrs	r3, r1
 8004724:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	f002 0310 	and.w	r3, r2, #16
 8004732:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004736:	2300      	movs	r3, #0
 8004738:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800473c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004740:	460b      	mov	r3, r1
 8004742:	4313      	orrs	r3, r2
 8004744:	d01e      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800474a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800474e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004752:	d10c      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004758:	3328      	adds	r3, #40	; 0x28
 800475a:	2102      	movs	r1, #2
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fe25 	bl	80053ac <RCCEx_PLL3_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800476e:	4b70      	ldr	r3, [pc, #448]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004772:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800477a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800477e:	4a6c      	ldr	r2, [pc, #432]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004780:	430b      	orrs	r3, r1
 8004782:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004794:	2300      	movs	r3, #0
 8004796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800479a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800479e:	460b      	mov	r3, r1
 80047a0:	4313      	orrs	r3, r2
 80047a2:	d03e      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047b0:	d022      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80047b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047b6:	d81b      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80047bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c0:	d00b      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80047c2:	e015      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c8:	3308      	adds	r3, #8
 80047ca:	2100      	movs	r1, #0
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fd3b 	bl	8005248 <RCCEx_PLL2_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80047d8:	e00f      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047de:	3328      	adds	r3, #40	; 0x28
 80047e0:	2102      	movs	r1, #2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fde2 	bl	80053ac <RCCEx_PLL3_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80047ee:	e004      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047f6:	e000      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80047f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10b      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004802:	4b4b      	ldr	r3, [pc, #300]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800480e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004812:	4a47      	ldr	r2, [pc, #284]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004814:	430b      	orrs	r3, r1
 8004816:	6593      	str	r3, [r2, #88]	; 0x58
 8004818:	e003      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800481e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800482e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004830:	2300      	movs	r3, #0
 8004832:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004834:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004838:	460b      	mov	r3, r1
 800483a:	4313      	orrs	r3, r2
 800483c:	d03b      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800483e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004846:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800484a:	d01f      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800484c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004850:	d818      	bhi.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004856:	d003      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004858:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800485c:	d007      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800485e:	e011      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004860:	4b33      	ldr	r3, [pc, #204]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	4a32      	ldr	r2, [pc, #200]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800486a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800486c:	e00f      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004872:	3328      	adds	r3, #40	; 0x28
 8004874:	2101      	movs	r1, #1
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fd98 	bl	80053ac <RCCEx_PLL3_Config>
 800487c:	4603      	mov	r3, r0
 800487e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004882:	e004      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800488a:	e000      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800488c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800488e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10b      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004896:	4b26      	ldr	r3, [pc, #152]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800489e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	4a22      	ldr	r2, [pc, #136]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048a8:	430b      	orrs	r3, r1
 80048aa:	6553      	str	r3, [r2, #84]	; 0x54
 80048ac:	e003      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80048c2:	673b      	str	r3, [r7, #112]	; 0x70
 80048c4:	2300      	movs	r3, #0
 80048c6:	677b      	str	r3, [r7, #116]	; 0x74
 80048c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80048cc:	460b      	mov	r3, r1
 80048ce:	4313      	orrs	r3, r2
 80048d0:	d034      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80048d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e0:	d007      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80048e2:	e011      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e4:	4b12      	ldr	r3, [pc, #72]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	4a11      	ldr	r2, [pc, #68]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80048f0:	e00e      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f6:	3308      	adds	r3, #8
 80048f8:	2102      	movs	r1, #2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fca4 	bl	8005248 <RCCEx_PLL2_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004906:	e003      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800490e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004910:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10d      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800491a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004926:	4a02      	ldr	r2, [pc, #8]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004928:	430b      	orrs	r3, r1
 800492a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800492c:	e006      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800492e:	bf00      	nop
 8004930:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004934:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004938:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800493c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004948:	66bb      	str	r3, [r7, #104]	; 0x68
 800494a:	2300      	movs	r3, #0
 800494c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800494e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004952:	460b      	mov	r3, r1
 8004954:	4313      	orrs	r3, r2
 8004956:	d00c      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800495c:	3328      	adds	r3, #40	; 0x28
 800495e:	2102      	movs	r1, #2
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fd23 	bl	80053ac <RCCEx_PLL3_Config>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800497e:	663b      	str	r3, [r7, #96]	; 0x60
 8004980:	2300      	movs	r3, #0
 8004982:	667b      	str	r3, [r7, #100]	; 0x64
 8004984:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004988:	460b      	mov	r3, r1
 800498a:	4313      	orrs	r3, r2
 800498c:	d038      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800498e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800499a:	d018      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800499c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049a0:	d811      	bhi.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80049a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a6:	d014      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80049a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ac:	d80b      	bhi.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d011      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80049b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b6:	d106      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b8:	4bc3      	ldr	r3, [pc, #780]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	4ac2      	ldr	r2, [pc, #776]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80049c4:	e008      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049cc:	e004      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80049ce:	bf00      	nop
 80049d0:	e002      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80049d2:	bf00      	nop
 80049d4:	e000      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80049d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10b      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049e0:	4bb9      	ldr	r3, [pc, #740]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049f0:	4ab5      	ldr	r2, [pc, #724]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049f2:	430b      	orrs	r3, r1
 80049f4:	6553      	str	r3, [r2, #84]	; 0x54
 80049f6:	e003      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004a0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a0e:	2300      	movs	r3, #0
 8004a10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a12:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004a16:	460b      	mov	r3, r1
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	d009      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a1c:	4baa      	ldr	r3, [pc, #680]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a2a:	4aa7      	ldr	r2, [pc, #668]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8004a3e:	2300      	movs	r3, #0
 8004a40:	657b      	str	r3, [r7, #84]	; 0x54
 8004a42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004a46:	460b      	mov	r3, r1
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	d00a      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a4c:	4b9e      	ldr	r3, [pc, #632]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a5c:	4a9a      	ldr	r2, [pc, #616]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a70:	2300      	movs	r3, #0
 8004a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a74:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	d009      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a7e:	4b92      	ldr	r3, [pc, #584]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a82:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8c:	4a8e      	ldr	r2, [pc, #568]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004a9e:	643b      	str	r3, [r7, #64]	; 0x40
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8004aa4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	d00e      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004aae:	4b86      	ldr	r3, [pc, #536]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	4a85      	ldr	r2, [pc, #532]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ab4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ab8:	6113      	str	r3, [r2, #16]
 8004aba:	4b83      	ldr	r3, [pc, #524]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004abc:	6919      	ldr	r1, [r3, #16]
 8004abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ac6:	4a80      	ldr	r2, [pc, #512]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ada:	2300      	movs	r3, #0
 8004adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ade:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	d009      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ae8:	4b77      	ldr	r3, [pc, #476]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aec:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	4a74      	ldr	r2, [pc, #464]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004af8:	430b      	orrs	r3, r1
 8004afa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b04:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004b08:	633b      	str	r3, [r7, #48]	; 0x30
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b0e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004b12:	460b      	mov	r3, r1
 8004b14:	4313      	orrs	r3, r2
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b18:	4b6b      	ldr	r3, [pc, #428]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b28:	4a67      	ldr	r2, [pc, #412]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	2100      	movs	r1, #0
 8004b38:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b40:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004b44:	460b      	mov	r3, r1
 8004b46:	4313      	orrs	r3, r2
 8004b48:	d011      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b4e:	3308      	adds	r3, #8
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fb78 	bl	8005248 <RCCEx_PLL2_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	2100      	movs	r1, #0
 8004b78:	6239      	str	r1, [r7, #32]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b80:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b84:	460b      	mov	r3, r1
 8004b86:	4313      	orrs	r3, r2
 8004b88:	d011      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b8e:	3308      	adds	r3, #8
 8004b90:	2101      	movs	r1, #1
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fb58 	bl	8005248 <RCCEx_PLL2_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004baa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	61b9      	str	r1, [r7, #24]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	d011      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bce:	3308      	adds	r3, #8
 8004bd0:	2102      	movs	r1, #2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fb38 	bl	8005248 <RCCEx_PLL2_Config>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004bde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	6139      	str	r1, [r7, #16]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c04:	460b      	mov	r3, r1
 8004c06:	4313      	orrs	r3, r2
 8004c08:	d011      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c0e:	3328      	adds	r3, #40	; 0x28
 8004c10:	2100      	movs	r1, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fbca 	bl	80053ac <RCCEx_PLL3_Config>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	2100      	movs	r1, #0
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	f003 0310 	and.w	r3, r3, #16
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c44:	460b      	mov	r3, r1
 8004c46:	4313      	orrs	r3, r2
 8004c48:	d011      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c4e:	3328      	adds	r3, #40	; 0x28
 8004c50:	2101      	movs	r1, #1
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fbaa 	bl	80053ac <RCCEx_PLL3_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	2100      	movs	r1, #0
 8004c78:	6039      	str	r1, [r7, #0]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	607b      	str	r3, [r7, #4]
 8004c80:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c84:	460b      	mov	r3, r1
 8004c86:	4313      	orrs	r3, r2
 8004c88:	d011      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c8e:	3328      	adds	r3, #40	; 0x28
 8004c90:	2102      	movs	r1, #2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fb8a 	bl	80053ac <RCCEx_PLL3_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004caa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004cae:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e000      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cc8:	58024400 	.word	0x58024400

08004ccc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004cd0:	f7fe fd96 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	091b      	lsrs	r3, r3, #4
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	4904      	ldr	r1, [pc, #16]	; (8004cf4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ce2:	5ccb      	ldrb	r3, [r1, r3]
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	58024400 	.word	0x58024400
 8004cf4:	08006fa4 	.word	0x08006fa4

08004cf8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b089      	sub	sp, #36	; 0x24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d00:	4ba1      	ldr	r3, [pc, #644]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004d0a:	4b9f      	ldr	r3, [pc, #636]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0e:	0b1b      	lsrs	r3, r3, #12
 8004d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d16:	4b9c      	ldr	r3, [pc, #624]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004d22:	4b99      	ldr	r3, [pc, #612]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d26:	08db      	lsrs	r3, r3, #3
 8004d28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8111 	beq.w	8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	f000 8083 	beq.w	8004e54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	f200 80a1 	bhi.w	8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d056      	beq.n	8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004d62:	e099      	b.n	8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d64:	4b88      	ldr	r3, [pc, #544]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d02d      	beq.n	8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d70:	4b85      	ldr	r3, [pc, #532]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	08db      	lsrs	r3, r3, #3
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	4a84      	ldr	r2, [pc, #528]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d80:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	ee07 3a90 	vmov	s15, r3
 8004d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9a:	4b7b      	ldr	r3, [pc, #492]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da2:	ee07 3a90 	vmov	s15, r3
 8004da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004dca:	e087      	b.n	8004edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dde:	4b6a      	ldr	r3, [pc, #424]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de6:	ee07 3a90 	vmov	s15, r3
 8004dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004df2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e0e:	e065      	b.n	8004edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e22:	4b59      	ldr	r3, [pc, #356]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e52:	e043      	b.n	8004edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e66:	4b48      	ldr	r3, [pc, #288]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e96:	e021      	b.n	8004edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eaa:	4b37      	ldr	r3, [pc, #220]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ebe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004edc:	4b2a      	ldr	r3, [pc, #168]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	0a5b      	lsrs	r3, r3, #9
 8004ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f02:	ee17 2a90 	vmov	r2, s15
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004f0a:	4b1f      	ldr	r3, [pc, #124]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	0c1b      	lsrs	r3, r3, #16
 8004f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f24:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f30:	ee17 2a90 	vmov	r2, s15
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	0e1b      	lsrs	r3, r3, #24
 8004f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f5e:	ee17 2a90 	vmov	r2, s15
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f66:	e008      	b.n	8004f7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	609a      	str	r2, [r3, #8]
}
 8004f7a:	bf00      	nop
 8004f7c:	3724      	adds	r7, #36	; 0x24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	58024400 	.word	0x58024400
 8004f8c:	03d09000 	.word	0x03d09000
 8004f90:	46000000 	.word	0x46000000
 8004f94:	4c742400 	.word	0x4c742400
 8004f98:	4a742400 	.word	0x4a742400
 8004f9c:	4af42400 	.word	0x4af42400

08004fa0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b089      	sub	sp, #36	; 0x24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fa8:	4ba1      	ldr	r3, [pc, #644]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004fb2:	4b9f      	ldr	r3, [pc, #636]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	0d1b      	lsrs	r3, r3, #20
 8004fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fbc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004fbe:	4b9c      	ldr	r3, [pc, #624]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004fca:	4b99      	ldr	r3, [pc, #612]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	08db      	lsrs	r3, r3, #3
 8004fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	fb02 f303 	mul.w	r3, r2, r3
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 8111 	beq.w	8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	f000 8083 	beq.w	80050fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	f200 80a1 	bhi.w	8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d056      	beq.n	80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800500a:	e099      	b.n	8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800500c:	4b88      	ldr	r3, [pc, #544]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d02d      	beq.n	8005074 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005018:	4b85      	ldr	r3, [pc, #532]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	08db      	lsrs	r3, r3, #3
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	4a84      	ldr	r2, [pc, #528]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
 8005028:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	ee07 3a90 	vmov	s15, r3
 8005030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	ee07 3a90 	vmov	s15, r3
 800503a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005042:	4b7b      	ldr	r3, [pc, #492]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005052:	ed97 6a03 	vldr	s12, [r7, #12]
 8005056:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800505a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800505e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800506a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005072:	e087      	b.n	8005184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800523c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005086:	4b6a      	ldr	r3, [pc, #424]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005096:	ed97 6a03 	vldr	s12, [r7, #12]
 800509a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800509e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050b6:	e065      	b.n	8005184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005240 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80050c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ca:	4b59      	ldr	r3, [pc, #356]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050da:	ed97 6a03 	vldr	s12, [r7, #12]
 80050de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050fa:	e043      	b.n	8005184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005106:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005244 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800510a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510e:	4b48      	ldr	r3, [pc, #288]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005122:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800513e:	e021      	b.n	8005184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005240 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800514e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005152:	4b37      	ldr	r3, [pc, #220]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005162:	ed97 6a03 	vldr	s12, [r7, #12]
 8005166:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800516a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005182:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005184:	4b2a      	ldr	r3, [pc, #168]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	0a5b      	lsrs	r3, r3, #9
 800518a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800519a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800519e:	edd7 6a07 	vldr	s13, [r7, #28]
 80051a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051aa:	ee17 2a90 	vmov	r2, s15
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80051b2:	4b1f      	ldr	r3, [pc, #124]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	0c1b      	lsrs	r3, r3, #16
 80051b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051bc:	ee07 3a90 	vmov	s15, r3
 80051c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80051d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d8:	ee17 2a90 	vmov	r2, s15
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80051e0:	4b13      	ldr	r3, [pc, #76]	; (8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	0e1b      	lsrs	r3, r3, #24
 80051e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80051fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005206:	ee17 2a90 	vmov	r2, s15
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800520e:	e008      	b.n	8005222 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	609a      	str	r2, [r3, #8]
}
 8005222:	bf00      	nop
 8005224:	3724      	adds	r7, #36	; 0x24
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	58024400 	.word	0x58024400
 8005234:	03d09000 	.word	0x03d09000
 8005238:	46000000 	.word	0x46000000
 800523c:	4c742400 	.word	0x4c742400
 8005240:	4a742400 	.word	0x4a742400
 8005244:	4af42400 	.word	0x4af42400

08005248 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005256:	4b53      	ldr	r3, [pc, #332]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b03      	cmp	r3, #3
 8005260:	d101      	bne.n	8005266 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e099      	b.n	800539a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005266:	4b4f      	ldr	r3, [pc, #316]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a4e      	ldr	r2, [pc, #312]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800526c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005272:	f7fc fa1f 	bl	80016b4 <HAL_GetTick>
 8005276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005278:	e008      	b.n	800528c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800527a:	f7fc fa1b 	bl	80016b4 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e086      	b.n	800539a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800528c:	4b45      	ldr	r3, [pc, #276]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f0      	bne.n	800527a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005298:	4b42      	ldr	r3, [pc, #264]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	031b      	lsls	r3, r3, #12
 80052a6:	493f      	ldr	r1, [pc, #252]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	628b      	str	r3, [r1, #40]	; 0x28
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	025b      	lsls	r3, r3, #9
 80052be:	b29b      	uxth	r3, r3
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	041b      	lsls	r3, r3, #16
 80052ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	061b      	lsls	r3, r3, #24
 80052d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052dc:	4931      	ldr	r1, [pc, #196]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80052e2:	4b30      	ldr	r3, [pc, #192]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	492d      	ldr	r1, [pc, #180]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80052f4:	4b2b      	ldr	r3, [pc, #172]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	f023 0220 	bic.w	r2, r3, #32
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	4928      	ldr	r1, [pc, #160]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005302:	4313      	orrs	r3, r2
 8005304:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	4a26      	ldr	r2, [pc, #152]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800530c:	f023 0310 	bic.w	r3, r3, #16
 8005310:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005312:	4b24      	ldr	r3, [pc, #144]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005316:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <RCCEx_PLL2_Config+0x160>)
 8005318:	4013      	ands	r3, r2
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	69d2      	ldr	r2, [r2, #28]
 800531e:	00d2      	lsls	r2, r2, #3
 8005320:	4920      	ldr	r1, [pc, #128]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005322:	4313      	orrs	r3, r2
 8005324:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005326:	4b1f      	ldr	r3, [pc, #124]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	4a1e      	ldr	r2, [pc, #120]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800532c:	f043 0310 	orr.w	r3, r3, #16
 8005330:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d106      	bne.n	8005346 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005338:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	4a19      	ldr	r2, [pc, #100]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800533e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005342:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005344:	e00f      	b.n	8005366 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d106      	bne.n	800535a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800534c:	4b15      	ldr	r3, [pc, #84]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	4a14      	ldr	r2, [pc, #80]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005356:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005358:	e005      	b.n	8005366 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800535a:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	4a11      	ldr	r2, [pc, #68]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005364:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005366:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a0e      	ldr	r2, [pc, #56]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800536c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005372:	f7fc f99f 	bl	80016b4 <HAL_GetTick>
 8005376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005378:	e008      	b.n	800538c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800537a:	f7fc f99b 	bl	80016b4 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e006      	b.n	800539a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0f0      	beq.n	800537a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005398:	7bfb      	ldrb	r3, [r7, #15]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	58024400 	.word	0x58024400
 80053a8:	ffff0007 	.word	0xffff0007

080053ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053ba:	4b53      	ldr	r3, [pc, #332]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80053bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	d101      	bne.n	80053ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e099      	b.n	80054fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80053ca:	4b4f      	ldr	r3, [pc, #316]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a4e      	ldr	r2, [pc, #312]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80053d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d6:	f7fc f96d 	bl	80016b4 <HAL_GetTick>
 80053da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053dc:	e008      	b.n	80053f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053de:	f7fc f969 	bl	80016b4 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e086      	b.n	80054fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053f0:	4b45      	ldr	r3, [pc, #276]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f0      	bne.n	80053de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80053fc:	4b42      	ldr	r3, [pc, #264]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80053fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005400:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	051b      	lsls	r3, r3, #20
 800540a:	493f      	ldr	r1, [pc, #252]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 800540c:	4313      	orrs	r3, r2
 800540e:	628b      	str	r3, [r1, #40]	; 0x28
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	3b01      	subs	r3, #1
 8005416:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	3b01      	subs	r3, #1
 8005420:	025b      	lsls	r3, r3, #9
 8005422:	b29b      	uxth	r3, r3
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	3b01      	subs	r3, #1
 800542c:	041b      	lsls	r3, r3, #16
 800542e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	3b01      	subs	r3, #1
 800543a:	061b      	lsls	r3, r3, #24
 800543c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005440:	4931      	ldr	r1, [pc, #196]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005442:	4313      	orrs	r3, r2
 8005444:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005446:	4b30      	ldr	r3, [pc, #192]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	492d      	ldr	r1, [pc, #180]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005454:	4313      	orrs	r3, r2
 8005456:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005458:	4b2b      	ldr	r3, [pc, #172]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	4928      	ldr	r1, [pc, #160]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005466:	4313      	orrs	r3, r2
 8005468:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800546a:	4b27      	ldr	r3, [pc, #156]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	4a26      	ldr	r2, [pc, #152]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005474:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005476:	4b24      	ldr	r3, [pc, #144]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800547a:	4b24      	ldr	r3, [pc, #144]	; (800550c <RCCEx_PLL3_Config+0x160>)
 800547c:	4013      	ands	r3, r2
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	69d2      	ldr	r2, [r2, #28]
 8005482:	00d2      	lsls	r2, r2, #3
 8005484:	4920      	ldr	r1, [pc, #128]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005486:	4313      	orrs	r3, r2
 8005488:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800548a:	4b1f      	ldr	r3, [pc, #124]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	4a1e      	ldr	r2, [pc, #120]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005494:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d106      	bne.n	80054aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800549c:	4b1a      	ldr	r3, [pc, #104]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	4a19      	ldr	r2, [pc, #100]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054a8:	e00f      	b.n	80054ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d106      	bne.n	80054be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80054b0:	4b15      	ldr	r3, [pc, #84]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	4a14      	ldr	r2, [pc, #80]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054bc:	e005      	b.n	80054ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80054be:	4b12      	ldr	r3, [pc, #72]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	4a11      	ldr	r2, [pc, #68]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80054ca:	4b0f      	ldr	r3, [pc, #60]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a0e      	ldr	r2, [pc, #56]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d6:	f7fc f8ed 	bl	80016b4 <HAL_GetTick>
 80054da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054dc:	e008      	b.n	80054f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80054de:	f7fc f8e9 	bl	80016b4 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e006      	b.n	80054fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	58024400 	.word	0x58024400
 800550c:	ffff0007 	.word	0xffff0007

08005510 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e042      	b.n	80055a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005528:	2b00      	cmp	r3, #0
 800552a:	d106      	bne.n	800553a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7fb fe95 	bl	8001264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2224      	movs	r2, #36	; 0x24
 800553e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0201 	bic.w	r2, r2, #1
 8005550:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f82c 	bl	80055b0 <UART_SetConfig>
 8005558:	4603      	mov	r3, r0
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e022      	b.n	80055a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fd88 	bl	8006080 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800557e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800558e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fe0f 	bl	80061c4 <UART_CheckIdleState>
 80055a6:	4603      	mov	r3, r0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055b4:	b092      	sub	sp, #72	; 0x48
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	431a      	orrs	r2, r3
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	4bbe      	ldr	r3, [pc, #760]	; (80058d8 <UART_SetConfig+0x328>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055e8:	430b      	orrs	r3, r1
 80055ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4ab3      	ldr	r2, [pc, #716]	; (80058dc <UART_SetConfig+0x32c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d004      	beq.n	800561c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005618:	4313      	orrs	r3, r2
 800561a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	4baf      	ldr	r3, [pc, #700]	; (80058e0 <UART_SetConfig+0x330>)
 8005624:	4013      	ands	r3, r2
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800562c:	430b      	orrs	r3, r1
 800562e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	f023 010f 	bic.w	r1, r3, #15
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4aa6      	ldr	r2, [pc, #664]	; (80058e4 <UART_SetConfig+0x334>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d177      	bne.n	8005740 <UART_SetConfig+0x190>
 8005650:	4ba5      	ldr	r3, [pc, #660]	; (80058e8 <UART_SetConfig+0x338>)
 8005652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005654:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005658:	2b28      	cmp	r3, #40	; 0x28
 800565a:	d86d      	bhi.n	8005738 <UART_SetConfig+0x188>
 800565c:	a201      	add	r2, pc, #4	; (adr r2, 8005664 <UART_SetConfig+0xb4>)
 800565e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005662:	bf00      	nop
 8005664:	08005709 	.word	0x08005709
 8005668:	08005739 	.word	0x08005739
 800566c:	08005739 	.word	0x08005739
 8005670:	08005739 	.word	0x08005739
 8005674:	08005739 	.word	0x08005739
 8005678:	08005739 	.word	0x08005739
 800567c:	08005739 	.word	0x08005739
 8005680:	08005739 	.word	0x08005739
 8005684:	08005711 	.word	0x08005711
 8005688:	08005739 	.word	0x08005739
 800568c:	08005739 	.word	0x08005739
 8005690:	08005739 	.word	0x08005739
 8005694:	08005739 	.word	0x08005739
 8005698:	08005739 	.word	0x08005739
 800569c:	08005739 	.word	0x08005739
 80056a0:	08005739 	.word	0x08005739
 80056a4:	08005719 	.word	0x08005719
 80056a8:	08005739 	.word	0x08005739
 80056ac:	08005739 	.word	0x08005739
 80056b0:	08005739 	.word	0x08005739
 80056b4:	08005739 	.word	0x08005739
 80056b8:	08005739 	.word	0x08005739
 80056bc:	08005739 	.word	0x08005739
 80056c0:	08005739 	.word	0x08005739
 80056c4:	08005721 	.word	0x08005721
 80056c8:	08005739 	.word	0x08005739
 80056cc:	08005739 	.word	0x08005739
 80056d0:	08005739 	.word	0x08005739
 80056d4:	08005739 	.word	0x08005739
 80056d8:	08005739 	.word	0x08005739
 80056dc:	08005739 	.word	0x08005739
 80056e0:	08005739 	.word	0x08005739
 80056e4:	08005729 	.word	0x08005729
 80056e8:	08005739 	.word	0x08005739
 80056ec:	08005739 	.word	0x08005739
 80056f0:	08005739 	.word	0x08005739
 80056f4:	08005739 	.word	0x08005739
 80056f8:	08005739 	.word	0x08005739
 80056fc:	08005739 	.word	0x08005739
 8005700:	08005739 	.word	0x08005739
 8005704:	08005731 	.word	0x08005731
 8005708:	2301      	movs	r3, #1
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800570e:	e222      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005710:	2304      	movs	r3, #4
 8005712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005716:	e21e      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005718:	2308      	movs	r3, #8
 800571a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800571e:	e21a      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005720:	2310      	movs	r3, #16
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005726:	e216      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005728:	2320      	movs	r3, #32
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572e:	e212      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005730:	2340      	movs	r3, #64	; 0x40
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005736:	e20e      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573e:	e20a      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a69      	ldr	r2, [pc, #420]	; (80058ec <UART_SetConfig+0x33c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d130      	bne.n	80057ac <UART_SetConfig+0x1fc>
 800574a:	4b67      	ldr	r3, [pc, #412]	; (80058e8 <UART_SetConfig+0x338>)
 800574c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	2b05      	cmp	r3, #5
 8005754:	d826      	bhi.n	80057a4 <UART_SetConfig+0x1f4>
 8005756:	a201      	add	r2, pc, #4	; (adr r2, 800575c <UART_SetConfig+0x1ac>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	08005775 	.word	0x08005775
 8005760:	0800577d 	.word	0x0800577d
 8005764:	08005785 	.word	0x08005785
 8005768:	0800578d 	.word	0x0800578d
 800576c:	08005795 	.word	0x08005795
 8005770:	0800579d 	.word	0x0800579d
 8005774:	2300      	movs	r3, #0
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800577a:	e1ec      	b.n	8005b56 <UART_SetConfig+0x5a6>
 800577c:	2304      	movs	r3, #4
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005782:	e1e8      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005784:	2308      	movs	r3, #8
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578a:	e1e4      	b.n	8005b56 <UART_SetConfig+0x5a6>
 800578c:	2310      	movs	r3, #16
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005792:	e1e0      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005794:	2320      	movs	r3, #32
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579a:	e1dc      	b.n	8005b56 <UART_SetConfig+0x5a6>
 800579c:	2340      	movs	r3, #64	; 0x40
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a2:	e1d8      	b.n	8005b56 <UART_SetConfig+0x5a6>
 80057a4:	2380      	movs	r3, #128	; 0x80
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057aa:	e1d4      	b.n	8005b56 <UART_SetConfig+0x5a6>
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a4f      	ldr	r2, [pc, #316]	; (80058f0 <UART_SetConfig+0x340>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d130      	bne.n	8005818 <UART_SetConfig+0x268>
 80057b6:	4b4c      	ldr	r3, [pc, #304]	; (80058e8 <UART_SetConfig+0x338>)
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	2b05      	cmp	r3, #5
 80057c0:	d826      	bhi.n	8005810 <UART_SetConfig+0x260>
 80057c2:	a201      	add	r2, pc, #4	; (adr r2, 80057c8 <UART_SetConfig+0x218>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057e1 	.word	0x080057e1
 80057cc:	080057e9 	.word	0x080057e9
 80057d0:	080057f1 	.word	0x080057f1
 80057d4:	080057f9 	.word	0x080057f9
 80057d8:	08005801 	.word	0x08005801
 80057dc:	08005809 	.word	0x08005809
 80057e0:	2300      	movs	r3, #0
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057e6:	e1b6      	b.n	8005b56 <UART_SetConfig+0x5a6>
 80057e8:	2304      	movs	r3, #4
 80057ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ee:	e1b2      	b.n	8005b56 <UART_SetConfig+0x5a6>
 80057f0:	2308      	movs	r3, #8
 80057f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f6:	e1ae      	b.n	8005b56 <UART_SetConfig+0x5a6>
 80057f8:	2310      	movs	r3, #16
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fe:	e1aa      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005800:	2320      	movs	r3, #32
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005806:	e1a6      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005808:	2340      	movs	r3, #64	; 0x40
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580e:	e1a2      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005816:	e19e      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a35      	ldr	r2, [pc, #212]	; (80058f4 <UART_SetConfig+0x344>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d130      	bne.n	8005884 <UART_SetConfig+0x2d4>
 8005822:	4b31      	ldr	r3, [pc, #196]	; (80058e8 <UART_SetConfig+0x338>)
 8005824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	2b05      	cmp	r3, #5
 800582c:	d826      	bhi.n	800587c <UART_SetConfig+0x2cc>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <UART_SetConfig+0x284>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	0800584d 	.word	0x0800584d
 8005838:	08005855 	.word	0x08005855
 800583c:	0800585d 	.word	0x0800585d
 8005840:	08005865 	.word	0x08005865
 8005844:	0800586d 	.word	0x0800586d
 8005848:	08005875 	.word	0x08005875
 800584c:	2300      	movs	r3, #0
 800584e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005852:	e180      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005854:	2304      	movs	r3, #4
 8005856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585a:	e17c      	b.n	8005b56 <UART_SetConfig+0x5a6>
 800585c:	2308      	movs	r3, #8
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005862:	e178      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005864:	2310      	movs	r3, #16
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586a:	e174      	b.n	8005b56 <UART_SetConfig+0x5a6>
 800586c:	2320      	movs	r3, #32
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005872:	e170      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005874:	2340      	movs	r3, #64	; 0x40
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587a:	e16c      	b.n	8005b56 <UART_SetConfig+0x5a6>
 800587c:	2380      	movs	r3, #128	; 0x80
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005882:	e168      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1b      	ldr	r2, [pc, #108]	; (80058f8 <UART_SetConfig+0x348>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d142      	bne.n	8005914 <UART_SetConfig+0x364>
 800588e:	4b16      	ldr	r3, [pc, #88]	; (80058e8 <UART_SetConfig+0x338>)
 8005890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	2b05      	cmp	r3, #5
 8005898:	d838      	bhi.n	800590c <UART_SetConfig+0x35c>
 800589a:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <UART_SetConfig+0x2f0>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058b9 	.word	0x080058b9
 80058a4:	080058c1 	.word	0x080058c1
 80058a8:	080058c9 	.word	0x080058c9
 80058ac:	080058d1 	.word	0x080058d1
 80058b0:	080058fd 	.word	0x080058fd
 80058b4:	08005905 	.word	0x08005905
 80058b8:	2300      	movs	r3, #0
 80058ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058be:	e14a      	b.n	8005b56 <UART_SetConfig+0x5a6>
 80058c0:	2304      	movs	r3, #4
 80058c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c6:	e146      	b.n	8005b56 <UART_SetConfig+0x5a6>
 80058c8:	2308      	movs	r3, #8
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ce:	e142      	b.n	8005b56 <UART_SetConfig+0x5a6>
 80058d0:	2310      	movs	r3, #16
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d6:	e13e      	b.n	8005b56 <UART_SetConfig+0x5a6>
 80058d8:	cfff69f3 	.word	0xcfff69f3
 80058dc:	58000c00 	.word	0x58000c00
 80058e0:	11fff4ff 	.word	0x11fff4ff
 80058e4:	40011000 	.word	0x40011000
 80058e8:	58024400 	.word	0x58024400
 80058ec:	40004400 	.word	0x40004400
 80058f0:	40004800 	.word	0x40004800
 80058f4:	40004c00 	.word	0x40004c00
 80058f8:	40005000 	.word	0x40005000
 80058fc:	2320      	movs	r3, #32
 80058fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005902:	e128      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005904:	2340      	movs	r3, #64	; 0x40
 8005906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800590a:	e124      	b.n	8005b56 <UART_SetConfig+0x5a6>
 800590c:	2380      	movs	r3, #128	; 0x80
 800590e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005912:	e120      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4acb      	ldr	r2, [pc, #812]	; (8005c48 <UART_SetConfig+0x698>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d176      	bne.n	8005a0c <UART_SetConfig+0x45c>
 800591e:	4bcb      	ldr	r3, [pc, #812]	; (8005c4c <UART_SetConfig+0x69c>)
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005926:	2b28      	cmp	r3, #40	; 0x28
 8005928:	d86c      	bhi.n	8005a04 <UART_SetConfig+0x454>
 800592a:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <UART_SetConfig+0x380>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	080059d5 	.word	0x080059d5
 8005934:	08005a05 	.word	0x08005a05
 8005938:	08005a05 	.word	0x08005a05
 800593c:	08005a05 	.word	0x08005a05
 8005940:	08005a05 	.word	0x08005a05
 8005944:	08005a05 	.word	0x08005a05
 8005948:	08005a05 	.word	0x08005a05
 800594c:	08005a05 	.word	0x08005a05
 8005950:	080059dd 	.word	0x080059dd
 8005954:	08005a05 	.word	0x08005a05
 8005958:	08005a05 	.word	0x08005a05
 800595c:	08005a05 	.word	0x08005a05
 8005960:	08005a05 	.word	0x08005a05
 8005964:	08005a05 	.word	0x08005a05
 8005968:	08005a05 	.word	0x08005a05
 800596c:	08005a05 	.word	0x08005a05
 8005970:	080059e5 	.word	0x080059e5
 8005974:	08005a05 	.word	0x08005a05
 8005978:	08005a05 	.word	0x08005a05
 800597c:	08005a05 	.word	0x08005a05
 8005980:	08005a05 	.word	0x08005a05
 8005984:	08005a05 	.word	0x08005a05
 8005988:	08005a05 	.word	0x08005a05
 800598c:	08005a05 	.word	0x08005a05
 8005990:	080059ed 	.word	0x080059ed
 8005994:	08005a05 	.word	0x08005a05
 8005998:	08005a05 	.word	0x08005a05
 800599c:	08005a05 	.word	0x08005a05
 80059a0:	08005a05 	.word	0x08005a05
 80059a4:	08005a05 	.word	0x08005a05
 80059a8:	08005a05 	.word	0x08005a05
 80059ac:	08005a05 	.word	0x08005a05
 80059b0:	080059f5 	.word	0x080059f5
 80059b4:	08005a05 	.word	0x08005a05
 80059b8:	08005a05 	.word	0x08005a05
 80059bc:	08005a05 	.word	0x08005a05
 80059c0:	08005a05 	.word	0x08005a05
 80059c4:	08005a05 	.word	0x08005a05
 80059c8:	08005a05 	.word	0x08005a05
 80059cc:	08005a05 	.word	0x08005a05
 80059d0:	080059fd 	.word	0x080059fd
 80059d4:	2301      	movs	r3, #1
 80059d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059da:	e0bc      	b.n	8005b56 <UART_SetConfig+0x5a6>
 80059dc:	2304      	movs	r3, #4
 80059de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059e2:	e0b8      	b.n	8005b56 <UART_SetConfig+0x5a6>
 80059e4:	2308      	movs	r3, #8
 80059e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ea:	e0b4      	b.n	8005b56 <UART_SetConfig+0x5a6>
 80059ec:	2310      	movs	r3, #16
 80059ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059f2:	e0b0      	b.n	8005b56 <UART_SetConfig+0x5a6>
 80059f4:	2320      	movs	r3, #32
 80059f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059fa:	e0ac      	b.n	8005b56 <UART_SetConfig+0x5a6>
 80059fc:	2340      	movs	r3, #64	; 0x40
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a02:	e0a8      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a0a:	e0a4      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a8f      	ldr	r2, [pc, #572]	; (8005c50 <UART_SetConfig+0x6a0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d130      	bne.n	8005a78 <UART_SetConfig+0x4c8>
 8005a16:	4b8d      	ldr	r3, [pc, #564]	; (8005c4c <UART_SetConfig+0x69c>)
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	2b05      	cmp	r3, #5
 8005a20:	d826      	bhi.n	8005a70 <UART_SetConfig+0x4c0>
 8005a22:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <UART_SetConfig+0x478>)
 8005a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a28:	08005a41 	.word	0x08005a41
 8005a2c:	08005a49 	.word	0x08005a49
 8005a30:	08005a51 	.word	0x08005a51
 8005a34:	08005a59 	.word	0x08005a59
 8005a38:	08005a61 	.word	0x08005a61
 8005a3c:	08005a69 	.word	0x08005a69
 8005a40:	2300      	movs	r3, #0
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a46:	e086      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4e:	e082      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005a50:	2308      	movs	r3, #8
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a56:	e07e      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a5e:	e07a      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005a60:	2320      	movs	r3, #32
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a66:	e076      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005a68:	2340      	movs	r3, #64	; 0x40
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6e:	e072      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a76:	e06e      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a75      	ldr	r2, [pc, #468]	; (8005c54 <UART_SetConfig+0x6a4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d130      	bne.n	8005ae4 <UART_SetConfig+0x534>
 8005a82:	4b72      	ldr	r3, [pc, #456]	; (8005c4c <UART_SetConfig+0x69c>)
 8005a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	2b05      	cmp	r3, #5
 8005a8c:	d826      	bhi.n	8005adc <UART_SetConfig+0x52c>
 8005a8e:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <UART_SetConfig+0x4e4>)
 8005a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a94:	08005aad 	.word	0x08005aad
 8005a98:	08005ab5 	.word	0x08005ab5
 8005a9c:	08005abd 	.word	0x08005abd
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005acd 	.word	0x08005acd
 8005aa8:	08005ad5 	.word	0x08005ad5
 8005aac:	2300      	movs	r3, #0
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ab2:	e050      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aba:	e04c      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005abc:	2308      	movs	r3, #8
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ac2:	e048      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aca:	e044      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005acc:	2320      	movs	r3, #32
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ad2:	e040      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005ad4:	2340      	movs	r3, #64	; 0x40
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ada:	e03c      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005adc:	2380      	movs	r3, #128	; 0x80
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ae2:	e038      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a5b      	ldr	r2, [pc, #364]	; (8005c58 <UART_SetConfig+0x6a8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d130      	bne.n	8005b50 <UART_SetConfig+0x5a0>
 8005aee:	4b57      	ldr	r3, [pc, #348]	; (8005c4c <UART_SetConfig+0x69c>)
 8005af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	2b05      	cmp	r3, #5
 8005af8:	d826      	bhi.n	8005b48 <UART_SetConfig+0x598>
 8005afa:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <UART_SetConfig+0x550>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b19 	.word	0x08005b19
 8005b04:	08005b21 	.word	0x08005b21
 8005b08:	08005b29 	.word	0x08005b29
 8005b0c:	08005b31 	.word	0x08005b31
 8005b10:	08005b39 	.word	0x08005b39
 8005b14:	08005b41 	.word	0x08005b41
 8005b18:	2302      	movs	r3, #2
 8005b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1e:	e01a      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005b20:	2304      	movs	r3, #4
 8005b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b26:	e016      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005b28:	2308      	movs	r3, #8
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2e:	e012      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005b30:	2310      	movs	r3, #16
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b36:	e00e      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005b38:	2320      	movs	r3, #32
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3e:	e00a      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005b40:	2340      	movs	r3, #64	; 0x40
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b46:	e006      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005b48:	2380      	movs	r3, #128	; 0x80
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4e:	e002      	b.n	8005b56 <UART_SetConfig+0x5a6>
 8005b50:	2380      	movs	r3, #128	; 0x80
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a3f      	ldr	r2, [pc, #252]	; (8005c58 <UART_SetConfig+0x6a8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	f040 80f8 	bne.w	8005d52 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	dc46      	bgt.n	8005bf8 <UART_SetConfig+0x648>
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	f2c0 8082 	blt.w	8005c74 <UART_SetConfig+0x6c4>
 8005b70:	3b02      	subs	r3, #2
 8005b72:	2b1e      	cmp	r3, #30
 8005b74:	d87e      	bhi.n	8005c74 <UART_SetConfig+0x6c4>
 8005b76:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <UART_SetConfig+0x5cc>)
 8005b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7c:	08005bff 	.word	0x08005bff
 8005b80:	08005c75 	.word	0x08005c75
 8005b84:	08005c07 	.word	0x08005c07
 8005b88:	08005c75 	.word	0x08005c75
 8005b8c:	08005c75 	.word	0x08005c75
 8005b90:	08005c75 	.word	0x08005c75
 8005b94:	08005c17 	.word	0x08005c17
 8005b98:	08005c75 	.word	0x08005c75
 8005b9c:	08005c75 	.word	0x08005c75
 8005ba0:	08005c75 	.word	0x08005c75
 8005ba4:	08005c75 	.word	0x08005c75
 8005ba8:	08005c75 	.word	0x08005c75
 8005bac:	08005c75 	.word	0x08005c75
 8005bb0:	08005c75 	.word	0x08005c75
 8005bb4:	08005c27 	.word	0x08005c27
 8005bb8:	08005c75 	.word	0x08005c75
 8005bbc:	08005c75 	.word	0x08005c75
 8005bc0:	08005c75 	.word	0x08005c75
 8005bc4:	08005c75 	.word	0x08005c75
 8005bc8:	08005c75 	.word	0x08005c75
 8005bcc:	08005c75 	.word	0x08005c75
 8005bd0:	08005c75 	.word	0x08005c75
 8005bd4:	08005c75 	.word	0x08005c75
 8005bd8:	08005c75 	.word	0x08005c75
 8005bdc:	08005c75 	.word	0x08005c75
 8005be0:	08005c75 	.word	0x08005c75
 8005be4:	08005c75 	.word	0x08005c75
 8005be8:	08005c75 	.word	0x08005c75
 8005bec:	08005c75 	.word	0x08005c75
 8005bf0:	08005c75 	.word	0x08005c75
 8005bf4:	08005c67 	.word	0x08005c67
 8005bf8:	2b40      	cmp	r3, #64	; 0x40
 8005bfa:	d037      	beq.n	8005c6c <UART_SetConfig+0x6bc>
 8005bfc:	e03a      	b.n	8005c74 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005bfe:	f7ff f865 	bl	8004ccc <HAL_RCCEx_GetD3PCLK1Freq>
 8005c02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c04:	e03c      	b.n	8005c80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff f874 	bl	8004cf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c14:	e034      	b.n	8005c80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c16:	f107 0318 	add.w	r3, r7, #24
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff f9c0 	bl	8004fa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c24:	e02c      	b.n	8005c80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c26:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <UART_SetConfig+0x69c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d016      	beq.n	8005c60 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c32:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <UART_SetConfig+0x69c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	08db      	lsrs	r3, r3, #3
 8005c38:	f003 0303 	and.w	r3, r3, #3
 8005c3c:	4a07      	ldr	r2, [pc, #28]	; (8005c5c <UART_SetConfig+0x6ac>)
 8005c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c44:	e01c      	b.n	8005c80 <UART_SetConfig+0x6d0>
 8005c46:	bf00      	nop
 8005c48:	40011400 	.word	0x40011400
 8005c4c:	58024400 	.word	0x58024400
 8005c50:	40007800 	.word	0x40007800
 8005c54:	40007c00 	.word	0x40007c00
 8005c58:	58000c00 	.word	0x58000c00
 8005c5c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005c60:	4b9d      	ldr	r3, [pc, #628]	; (8005ed8 <UART_SetConfig+0x928>)
 8005c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c64:	e00c      	b.n	8005c80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c66:	4b9d      	ldr	r3, [pc, #628]	; (8005edc <UART_SetConfig+0x92c>)
 8005c68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c6a:	e009      	b.n	8005c80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c72:	e005      	b.n	8005c80 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005c7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 81de 	beq.w	8006044 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	4a94      	ldr	r2, [pc, #592]	; (8005ee0 <UART_SetConfig+0x930>)
 8005c8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c92:	461a      	mov	r2, r3
 8005c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c96:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c9a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	4413      	add	r3, r2
 8005ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d305      	bcc.n	8005cb8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d903      	bls.n	8005cc0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005cbe:	e1c1      	b.n	8006044 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	60bb      	str	r3, [r7, #8]
 8005cc6:	60fa      	str	r2, [r7, #12]
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	4a84      	ldr	r2, [pc, #528]	; (8005ee0 <UART_SetConfig+0x930>)
 8005cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	607a      	str	r2, [r7, #4]
 8005cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ce2:	f7fa faf9 	bl	80002d8 <__aeabi_uldivmod>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4610      	mov	r0, r2
 8005cec:	4619      	mov	r1, r3
 8005cee:	f04f 0200 	mov.w	r2, #0
 8005cf2:	f04f 0300 	mov.w	r3, #0
 8005cf6:	020b      	lsls	r3, r1, #8
 8005cf8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cfc:	0202      	lsls	r2, r0, #8
 8005cfe:	6979      	ldr	r1, [r7, #20]
 8005d00:	6849      	ldr	r1, [r1, #4]
 8005d02:	0849      	lsrs	r1, r1, #1
 8005d04:	2000      	movs	r0, #0
 8005d06:	460c      	mov	r4, r1
 8005d08:	4605      	mov	r5, r0
 8005d0a:	eb12 0804 	adds.w	r8, r2, r4
 8005d0e:	eb43 0905 	adc.w	r9, r3, r5
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	469a      	mov	sl, r3
 8005d1a:	4693      	mov	fp, r2
 8005d1c:	4652      	mov	r2, sl
 8005d1e:	465b      	mov	r3, fp
 8005d20:	4640      	mov	r0, r8
 8005d22:	4649      	mov	r1, r9
 8005d24:	f7fa fad8 	bl	80002d8 <__aeabi_uldivmod>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d36:	d308      	bcc.n	8005d4a <UART_SetConfig+0x79a>
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d3e:	d204      	bcs.n	8005d4a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d46:	60da      	str	r2, [r3, #12]
 8005d48:	e17c      	b.n	8006044 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d50:	e178      	b.n	8006044 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d5a:	f040 80c5 	bne.w	8005ee8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005d5e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	dc48      	bgt.n	8005df8 <UART_SetConfig+0x848>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	db7b      	blt.n	8005e62 <UART_SetConfig+0x8b2>
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	d879      	bhi.n	8005e62 <UART_SetConfig+0x8b2>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <UART_SetConfig+0x7c4>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005dff 	.word	0x08005dff
 8005d78:	08005e07 	.word	0x08005e07
 8005d7c:	08005e63 	.word	0x08005e63
 8005d80:	08005e63 	.word	0x08005e63
 8005d84:	08005e0f 	.word	0x08005e0f
 8005d88:	08005e63 	.word	0x08005e63
 8005d8c:	08005e63 	.word	0x08005e63
 8005d90:	08005e63 	.word	0x08005e63
 8005d94:	08005e1f 	.word	0x08005e1f
 8005d98:	08005e63 	.word	0x08005e63
 8005d9c:	08005e63 	.word	0x08005e63
 8005da0:	08005e63 	.word	0x08005e63
 8005da4:	08005e63 	.word	0x08005e63
 8005da8:	08005e63 	.word	0x08005e63
 8005dac:	08005e63 	.word	0x08005e63
 8005db0:	08005e63 	.word	0x08005e63
 8005db4:	08005e2f 	.word	0x08005e2f
 8005db8:	08005e63 	.word	0x08005e63
 8005dbc:	08005e63 	.word	0x08005e63
 8005dc0:	08005e63 	.word	0x08005e63
 8005dc4:	08005e63 	.word	0x08005e63
 8005dc8:	08005e63 	.word	0x08005e63
 8005dcc:	08005e63 	.word	0x08005e63
 8005dd0:	08005e63 	.word	0x08005e63
 8005dd4:	08005e63 	.word	0x08005e63
 8005dd8:	08005e63 	.word	0x08005e63
 8005ddc:	08005e63 	.word	0x08005e63
 8005de0:	08005e63 	.word	0x08005e63
 8005de4:	08005e63 	.word	0x08005e63
 8005de8:	08005e63 	.word	0x08005e63
 8005dec:	08005e63 	.word	0x08005e63
 8005df0:	08005e63 	.word	0x08005e63
 8005df4:	08005e55 	.word	0x08005e55
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	d02e      	beq.n	8005e5a <UART_SetConfig+0x8aa>
 8005dfc:	e031      	b.n	8005e62 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dfe:	f7fd fd2f 	bl	8003860 <HAL_RCC_GetPCLK1Freq>
 8005e02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e04:	e033      	b.n	8005e6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e06:	f7fd fd41 	bl	800388c <HAL_RCC_GetPCLK2Freq>
 8005e0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e0c:	e02f      	b.n	8005e6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe ff70 	bl	8004cf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e1c:	e027      	b.n	8005e6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e1e:	f107 0318 	add.w	r3, r7, #24
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff f8bc 	bl	8004fa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e2c:	e01f      	b.n	8005e6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e2e:	4b2d      	ldr	r3, [pc, #180]	; (8005ee4 <UART_SetConfig+0x934>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d009      	beq.n	8005e4e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e3a:	4b2a      	ldr	r3, [pc, #168]	; (8005ee4 <UART_SetConfig+0x934>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	08db      	lsrs	r3, r3, #3
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	4a24      	ldr	r2, [pc, #144]	; (8005ed8 <UART_SetConfig+0x928>)
 8005e46:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e4c:	e00f      	b.n	8005e6e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005e4e:	4b22      	ldr	r3, [pc, #136]	; (8005ed8 <UART_SetConfig+0x928>)
 8005e50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e52:	e00c      	b.n	8005e6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e54:	4b21      	ldr	r3, [pc, #132]	; (8005edc <UART_SetConfig+0x92c>)
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e58:	e009      	b.n	8005e6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e60:	e005      	b.n	8005e6e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005e6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 80e7 	beq.w	8006044 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	4a19      	ldr	r2, [pc, #100]	; (8005ee0 <UART_SetConfig+0x930>)
 8005e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e80:	461a      	mov	r2, r3
 8005e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e84:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e88:	005a      	lsls	r2, r3, #1
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	441a      	add	r2, r3
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9e:	2b0f      	cmp	r3, #15
 8005ea0:	d916      	bls.n	8005ed0 <UART_SetConfig+0x920>
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea8:	d212      	bcs.n	8005ed0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f023 030f 	bic.w	r3, r3, #15
 8005eb2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	085b      	lsrs	r3, r3, #1
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005ecc:	60da      	str	r2, [r3, #12]
 8005ece:	e0b9      	b.n	8006044 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ed6:	e0b5      	b.n	8006044 <UART_SetConfig+0xa94>
 8005ed8:	03d09000 	.word	0x03d09000
 8005edc:	003d0900 	.word	0x003d0900
 8005ee0:	08006fb4 	.word	0x08006fb4
 8005ee4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ee8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	dc49      	bgt.n	8005f84 <UART_SetConfig+0x9d4>
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	db7c      	blt.n	8005fee <UART_SetConfig+0xa3e>
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d87a      	bhi.n	8005fee <UART_SetConfig+0xa3e>
 8005ef8:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <UART_SetConfig+0x950>)
 8005efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efe:	bf00      	nop
 8005f00:	08005f8b 	.word	0x08005f8b
 8005f04:	08005f93 	.word	0x08005f93
 8005f08:	08005fef 	.word	0x08005fef
 8005f0c:	08005fef 	.word	0x08005fef
 8005f10:	08005f9b 	.word	0x08005f9b
 8005f14:	08005fef 	.word	0x08005fef
 8005f18:	08005fef 	.word	0x08005fef
 8005f1c:	08005fef 	.word	0x08005fef
 8005f20:	08005fab 	.word	0x08005fab
 8005f24:	08005fef 	.word	0x08005fef
 8005f28:	08005fef 	.word	0x08005fef
 8005f2c:	08005fef 	.word	0x08005fef
 8005f30:	08005fef 	.word	0x08005fef
 8005f34:	08005fef 	.word	0x08005fef
 8005f38:	08005fef 	.word	0x08005fef
 8005f3c:	08005fef 	.word	0x08005fef
 8005f40:	08005fbb 	.word	0x08005fbb
 8005f44:	08005fef 	.word	0x08005fef
 8005f48:	08005fef 	.word	0x08005fef
 8005f4c:	08005fef 	.word	0x08005fef
 8005f50:	08005fef 	.word	0x08005fef
 8005f54:	08005fef 	.word	0x08005fef
 8005f58:	08005fef 	.word	0x08005fef
 8005f5c:	08005fef 	.word	0x08005fef
 8005f60:	08005fef 	.word	0x08005fef
 8005f64:	08005fef 	.word	0x08005fef
 8005f68:	08005fef 	.word	0x08005fef
 8005f6c:	08005fef 	.word	0x08005fef
 8005f70:	08005fef 	.word	0x08005fef
 8005f74:	08005fef 	.word	0x08005fef
 8005f78:	08005fef 	.word	0x08005fef
 8005f7c:	08005fef 	.word	0x08005fef
 8005f80:	08005fe1 	.word	0x08005fe1
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	d02e      	beq.n	8005fe6 <UART_SetConfig+0xa36>
 8005f88:	e031      	b.n	8005fee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f8a:	f7fd fc69 	bl	8003860 <HAL_RCC_GetPCLK1Freq>
 8005f8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f90:	e033      	b.n	8005ffa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f92:	f7fd fc7b 	bl	800388c <HAL_RCC_GetPCLK2Freq>
 8005f96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f98:	e02f      	b.n	8005ffa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fe feaa 	bl	8004cf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fa8:	e027      	b.n	8005ffa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005faa:	f107 0318 	add.w	r3, r7, #24
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe fff6 	bl	8004fa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fb8:	e01f      	b.n	8005ffa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fba:	4b2d      	ldr	r3, [pc, #180]	; (8006070 <UART_SetConfig+0xac0>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d009      	beq.n	8005fda <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005fc6:	4b2a      	ldr	r3, [pc, #168]	; (8006070 <UART_SetConfig+0xac0>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	08db      	lsrs	r3, r3, #3
 8005fcc:	f003 0303 	and.w	r3, r3, #3
 8005fd0:	4a28      	ldr	r2, [pc, #160]	; (8006074 <UART_SetConfig+0xac4>)
 8005fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fd8:	e00f      	b.n	8005ffa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005fda:	4b26      	ldr	r3, [pc, #152]	; (8006074 <UART_SetConfig+0xac4>)
 8005fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fde:	e00c      	b.n	8005ffa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fe0:	4b25      	ldr	r3, [pc, #148]	; (8006078 <UART_SetConfig+0xac8>)
 8005fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fe4:	e009      	b.n	8005ffa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fec:	e005      	b.n	8005ffa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ff8:	bf00      	nop
    }

    if (pclk != 0U)
 8005ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d021      	beq.n	8006044 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	4a1d      	ldr	r2, [pc, #116]	; (800607c <UART_SetConfig+0xacc>)
 8006006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800600a:	461a      	mov	r2, r3
 800600c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	085b      	lsrs	r3, r3, #1
 8006018:	441a      	add	r2, r3
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006022:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	2b0f      	cmp	r3, #15
 8006028:	d909      	bls.n	800603e <UART_SetConfig+0xa8e>
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006030:	d205      	bcs.n	800603e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	b29a      	uxth	r2, r3
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60da      	str	r2, [r3, #12]
 800603c:	e002      	b.n	8006044 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2201      	movs	r2, #1
 8006048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2201      	movs	r2, #1
 8006050:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2200      	movs	r2, #0
 8006058:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2200      	movs	r2, #0
 800605e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006060:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006064:	4618      	mov	r0, r3
 8006066:	3748      	adds	r7, #72	; 0x48
 8006068:	46bd      	mov	sp, r7
 800606a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800606e:	bf00      	nop
 8006070:	58024400 	.word	0x58024400
 8006074:	03d09000 	.word	0x03d09000
 8006078:	003d0900 	.word	0x003d0900
 800607c:	08006fb4 	.word	0x08006fb4

08006080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00a      	beq.n	80060ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	f003 0308 	and.w	r3, r3, #8
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006136:	f003 0320 	and.w	r3, r3, #32
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615c:	2b00      	cmp	r3, #0
 800615e:	d01a      	beq.n	8006196 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800617e:	d10a      	bne.n	8006196 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00a      	beq.n	80061b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	605a      	str	r2, [r3, #4]
  }
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b098      	sub	sp, #96	; 0x60
 80061c8:	af02      	add	r7, sp, #8
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061d4:	f7fb fa6e 	bl	80016b4 <HAL_GetTick>
 80061d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d12f      	bne.n	8006248 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061f0:	2200      	movs	r2, #0
 80061f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f88e 	bl	8006318 <UART_WaitOnFlagUntilTimeout>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d022      	beq.n	8006248 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	e853 3f00 	ldrex	r3, [r3]
 800620e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006216:	653b      	str	r3, [r7, #80]	; 0x50
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006220:	647b      	str	r3, [r7, #68]	; 0x44
 8006222:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006224:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006228:	e841 2300 	strex	r3, r2, [r1]
 800622c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800622e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e6      	bne.n	8006202 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2220      	movs	r2, #32
 8006238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e063      	b.n	8006310 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b04      	cmp	r3, #4
 8006254:	d149      	bne.n	80062ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006256:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800625e:	2200      	movs	r2, #0
 8006260:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f857 	bl	8006318 <UART_WaitOnFlagUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d03c      	beq.n	80062ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	e853 3f00 	ldrex	r3, [r3]
 800627c:	623b      	str	r3, [r7, #32]
   return(result);
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006284:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800628e:	633b      	str	r3, [r7, #48]	; 0x30
 8006290:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e6      	bne.n	8006270 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3308      	adds	r3, #8
 80062a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f023 0301 	bic.w	r3, r3, #1
 80062b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3308      	adds	r3, #8
 80062c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062c2:	61fa      	str	r2, [r7, #28]
 80062c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	69b9      	ldr	r1, [r7, #24]
 80062c8:	69fa      	ldr	r2, [r7, #28]
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	617b      	str	r3, [r7, #20]
   return(result);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e5      	bne.n	80062a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e012      	b.n	8006310 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3758      	adds	r7, #88	; 0x58
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	603b      	str	r3, [r7, #0]
 8006324:	4613      	mov	r3, r2
 8006326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006328:	e049      	b.n	80063be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006330:	d045      	beq.n	80063be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006332:	f7fb f9bf 	bl	80016b4 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	429a      	cmp	r2, r3
 8006340:	d302      	bcc.n	8006348 <UART_WaitOnFlagUntilTimeout+0x30>
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e048      	b.n	80063de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	2b00      	cmp	r3, #0
 8006358:	d031      	beq.n	80063be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b08      	cmp	r3, #8
 8006366:	d110      	bne.n	800638a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2208      	movs	r2, #8
 800636e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 f839 	bl	80063e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2208      	movs	r2, #8
 800637a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e029      	b.n	80063de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006398:	d111      	bne.n	80063be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 f81f 	bl	80063e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e00f      	b.n	80063de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69da      	ldr	r2, [r3, #28]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4013      	ands	r3, r2
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	bf0c      	ite	eq
 80063ce:	2301      	moveq	r3, #1
 80063d0:	2300      	movne	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	79fb      	ldrb	r3, [r7, #7]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d0a6      	beq.n	800632a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b095      	sub	sp, #84	; 0x54
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006404:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800640e:	643b      	str	r3, [r7, #64]	; 0x40
 8006410:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006414:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1e6      	bne.n	80063f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3308      	adds	r3, #8
 8006428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	61fb      	str	r3, [r7, #28]
   return(result);
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	4b1e      	ldr	r3, [pc, #120]	; (80064b0 <UART_EndRxTransfer+0xc8>)
 8006436:	4013      	ands	r3, r2
 8006438:	64bb      	str	r3, [r7, #72]	; 0x48
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3308      	adds	r3, #8
 8006440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006444:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e5      	bne.n	8006422 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800645a:	2b01      	cmp	r3, #1
 800645c:	d118      	bne.n	8006490 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	60bb      	str	r3, [r7, #8]
   return(result);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f023 0310 	bic.w	r3, r3, #16
 8006472:	647b      	str	r3, [r7, #68]	; 0x44
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6979      	ldr	r1, [r7, #20]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	613b      	str	r3, [r7, #16]
   return(result);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e6      	bne.n	800645e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2220      	movs	r2, #32
 8006494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80064a4:	bf00      	nop
 80064a6:	3754      	adds	r7, #84	; 0x54
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	effffffe 	.word	0xeffffffe

080064b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_UARTEx_DisableFifoMode+0x16>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e027      	b.n	800651a <HAL_UARTEx_DisableFifoMode+0x66>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2224      	movs	r2, #36	; 0x24
 80064d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0201 	bic.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2220      	movs	r2, #32
 800650c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006536:	2b01      	cmp	r3, #1
 8006538:	d101      	bne.n	800653e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800653a:	2302      	movs	r3, #2
 800653c:	e02d      	b.n	800659a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2224      	movs	r2, #36	; 0x24
 800654a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0201 	bic.w	r2, r2, #1
 8006564:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f850 	bl	8006620 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e02d      	b.n	8006616 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2224      	movs	r2, #36	; 0x24
 80065c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0201 	bic.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f812 	bl	8006620 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800662c:	2b00      	cmp	r3, #0
 800662e:	d108      	bne.n	8006642 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006640:	e031      	b.n	80066a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006642:	2310      	movs	r3, #16
 8006644:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006646:	2310      	movs	r3, #16
 8006648:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	0e5b      	lsrs	r3, r3, #25
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	0f5b      	lsrs	r3, r3, #29
 8006662:	b2db      	uxtb	r3, r3
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800666a:	7bbb      	ldrb	r3, [r7, #14]
 800666c:	7b3a      	ldrb	r2, [r7, #12]
 800666e:	4911      	ldr	r1, [pc, #68]	; (80066b4 <UARTEx_SetNbDataToProcess+0x94>)
 8006670:	5c8a      	ldrb	r2, [r1, r2]
 8006672:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006676:	7b3a      	ldrb	r2, [r7, #12]
 8006678:	490f      	ldr	r1, [pc, #60]	; (80066b8 <UARTEx_SetNbDataToProcess+0x98>)
 800667a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800667c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	7b7a      	ldrb	r2, [r7, #13]
 800668c:	4909      	ldr	r1, [pc, #36]	; (80066b4 <UARTEx_SetNbDataToProcess+0x94>)
 800668e:	5c8a      	ldrb	r2, [r1, r2]
 8006690:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006694:	7b7a      	ldrb	r2, [r7, #13]
 8006696:	4908      	ldr	r1, [pc, #32]	; (80066b8 <UARTEx_SetNbDataToProcess+0x98>)
 8006698:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800669a:	fb93 f3f2 	sdiv	r3, r3, r2
 800669e:	b29a      	uxth	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	08006fcc 	.word	0x08006fcc
 80066b8:	08006fd4 	.word	0x08006fd4

080066bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066bc:	b084      	sub	sp, #16
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	f107 001c 	add.w	r0, r7, #28
 80066ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d120      	bne.n	8006716 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	4b2a      	ldr	r3, [pc, #168]	; (8006790 <USB_CoreInit+0xd4>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80066f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d105      	bne.n	800670a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 faac 	bl	8006c68 <USB_CoreReset>
 8006710:	4603      	mov	r3, r0
 8006712:	73fb      	strb	r3, [r7, #15]
 8006714:	e01a      	b.n	800674c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 faa0 	bl	8006c68 <USB_CoreReset>
 8006728:	4603      	mov	r3, r0
 800672a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800672c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006736:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	639a      	str	r2, [r3, #56]	; 0x38
 800673e:	e005      	b.n	800674c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	2b01      	cmp	r3, #1
 8006750:	d116      	bne.n	8006780 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006756:	b29a      	uxth	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006760:	4b0c      	ldr	r3, [pc, #48]	; (8006794 <USB_CoreInit+0xd8>)
 8006762:	4313      	orrs	r3, r2
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f043 0206 	orr.w	r2, r3, #6
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f043 0220 	orr.w	r2, r3, #32
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006780:	7bfb      	ldrb	r3, [r7, #15]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800678c:	b004      	add	sp, #16
 800678e:	4770      	bx	lr
 8006790:	ffbdffbf 	.word	0xffbdffbf
 8006794:	03ee0000 	.word	0x03ee0000

08006798 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f023 0201 	bic.w	r2, r3, #1
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	460b      	mov	r3, r1
 80067c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d115      	bne.n	8006808 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067e8:	2001      	movs	r0, #1
 80067ea:	f7fa ff6f 	bl	80016cc <HAL_Delay>
      ms++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fa29 	bl	8006c4c <USB_GetMode>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d01e      	beq.n	800683e <USB_SetCurrentMode+0x84>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b31      	cmp	r3, #49	; 0x31
 8006804:	d9f0      	bls.n	80067e8 <USB_SetCurrentMode+0x2e>
 8006806:	e01a      	b.n	800683e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d115      	bne.n	800683a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800681a:	2001      	movs	r0, #1
 800681c:	f7fa ff56 	bl	80016cc <HAL_Delay>
      ms++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3301      	adds	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fa10 	bl	8006c4c <USB_GetMode>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d005      	beq.n	800683e <USB_SetCurrentMode+0x84>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b31      	cmp	r3, #49	; 0x31
 8006836:	d9f0      	bls.n	800681a <USB_SetCurrentMode+0x60>
 8006838:	e001      	b.n	800683e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e005      	b.n	800684a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b32      	cmp	r3, #50	; 0x32
 8006842:	d101      	bne.n	8006848 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e000      	b.n	800684a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006854:	b084      	sub	sp, #16
 8006856:	b580      	push	{r7, lr}
 8006858:	b086      	sub	sp, #24
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800686e:	2300      	movs	r3, #0
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	e009      	b.n	8006888 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	3340      	adds	r3, #64	; 0x40
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	2200      	movs	r2, #0
 8006880:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	3301      	adds	r3, #1
 8006886:	613b      	str	r3, [r7, #16]
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	2b0e      	cmp	r3, #14
 800688c:	d9f2      	bls.n	8006874 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800688e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006890:	2b00      	cmp	r3, #0
 8006892:	d11c      	bne.n	80068ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068a2:	f043 0302 	orr.w	r3, r3, #2
 80068a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	e005      	b.n	80068da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068e0:	461a      	mov	r2, r3
 80068e2:	2300      	movs	r3, #0
 80068e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ec:	4619      	mov	r1, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f4:	461a      	mov	r2, r3
 80068f6:	680b      	ldr	r3, [r1, #0]
 80068f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d10c      	bne.n	800691a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	2b00      	cmp	r3, #0
 8006904:	d104      	bne.n	8006910 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006906:	2100      	movs	r1, #0
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f965 	bl	8006bd8 <USB_SetDevSpeed>
 800690e:	e008      	b.n	8006922 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006910:	2101      	movs	r1, #1
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f960 	bl	8006bd8 <USB_SetDevSpeed>
 8006918:	e003      	b.n	8006922 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800691a:	2103      	movs	r1, #3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f95b 	bl	8006bd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006922:	2110      	movs	r1, #16
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f8f3 	bl	8006b10 <USB_FlushTxFifo>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f91f 	bl	8006b78 <USB_FlushRxFifo>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694a:	461a      	mov	r2, r3
 800694c:	2300      	movs	r3, #0
 800694e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006956:	461a      	mov	r2, r3
 8006958:	2300      	movs	r3, #0
 800695a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006962:	461a      	mov	r2, r3
 8006964:	2300      	movs	r3, #0
 8006966:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006968:	2300      	movs	r3, #0
 800696a:	613b      	str	r3, [r7, #16]
 800696c:	e043      	b.n	80069f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006980:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006984:	d118      	bne.n	80069b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10a      	bne.n	80069a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006998:	461a      	mov	r2, r3
 800699a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	e013      	b.n	80069ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ae:	461a      	mov	r2, r3
 80069b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	e008      	b.n	80069ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c4:	461a      	mov	r2, r3
 80069c6:	2300      	movs	r3, #0
 80069c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d6:	461a      	mov	r2, r3
 80069d8:	2300      	movs	r3, #0
 80069da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e8:	461a      	mov	r2, r3
 80069ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	3301      	adds	r3, #1
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d3b7      	bcc.n	800696e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069fe:	2300      	movs	r3, #0
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	e043      	b.n	8006a8c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a1a:	d118      	bne.n	8006a4e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	e013      	b.n	8006a60 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a44:	461a      	mov	r2, r3
 8006a46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	e008      	b.n	8006a60 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	2300      	movs	r3, #0
 8006a70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	613b      	str	r3, [r7, #16]
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d3b7      	bcc.n	8006a04 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aa6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ab4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d105      	bne.n	8006ac8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	f043 0210 	orr.w	r2, r3, #16
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699a      	ldr	r2, [r3, #24]
 8006acc:	4b0e      	ldr	r3, [pc, #56]	; (8006b08 <USB_DevInit+0x2b4>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	f043 0208 	orr.w	r2, r3, #8
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d105      	bne.n	8006af8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699a      	ldr	r2, [r3, #24]
 8006af0:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <USB_DevInit+0x2b8>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b04:	b004      	add	sp, #16
 8006b06:	4770      	bx	lr
 8006b08:	803c3800 	.word	0x803c3800
 8006b0c:	40000004 	.word	0x40000004

08006b10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3301      	adds	r3, #1
 8006b22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4a13      	ldr	r2, [pc, #76]	; (8006b74 <USB_FlushTxFifo+0x64>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d901      	bls.n	8006b30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e01b      	b.n	8006b68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	daf2      	bge.n	8006b1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	019b      	lsls	r3, r3, #6
 8006b40:	f043 0220 	orr.w	r2, r3, #32
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4a08      	ldr	r2, [pc, #32]	; (8006b74 <USB_FlushTxFifo+0x64>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d901      	bls.n	8006b5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e006      	b.n	8006b68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d0f0      	beq.n	8006b48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	00030d40 	.word	0x00030d40

08006b78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3301      	adds	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4a11      	ldr	r2, [pc, #68]	; (8006bd4 <USB_FlushRxFifo+0x5c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d901      	bls.n	8006b96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e018      	b.n	8006bc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	daf2      	bge.n	8006b84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2210      	movs	r2, #16
 8006ba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3301      	adds	r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4a08      	ldr	r2, [pc, #32]	; (8006bd4 <USB_FlushRxFifo+0x5c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d901      	bls.n	8006bba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e006      	b.n	8006bc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 0310 	and.w	r3, r3, #16
 8006bc2:	2b10      	cmp	r3, #16
 8006bc4:	d0f0      	beq.n	8006ba8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	00030d40 	.word	0x00030d40

08006bd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	68f9      	ldr	r1, [r7, #12]
 8006bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c24:	f023 0303 	bic.w	r3, r3, #3
 8006c28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c38:	f043 0302 	orr.w	r3, r3, #2
 8006c3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	f003 0301 	and.w	r3, r3, #1
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3301      	adds	r3, #1
 8006c78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4a13      	ldr	r2, [pc, #76]	; (8006ccc <USB_CoreReset+0x64>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d901      	bls.n	8006c86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e01b      	b.n	8006cbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	daf2      	bge.n	8006c74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	f043 0201 	orr.w	r2, r3, #1
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4a09      	ldr	r2, [pc, #36]	; (8006ccc <USB_CoreReset+0x64>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d901      	bls.n	8006cb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e006      	b.n	8006cbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d0f0      	beq.n	8006c9e <USB_CoreReset+0x36>

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	00030d40 	.word	0x00030d40

08006cd0 <_Znwj>:
 8006cd0:	2801      	cmp	r0, #1
 8006cd2:	bf38      	it	cc
 8006cd4:	2001      	movcc	r0, #1
 8006cd6:	b510      	push	{r4, lr}
 8006cd8:	4604      	mov	r4, r0
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 f81a 	bl	8006d14 <malloc>
 8006ce0:	b100      	cbz	r0, 8006ce4 <_Znwj+0x14>
 8006ce2:	bd10      	pop	{r4, pc}
 8006ce4:	f000 f806 	bl	8006cf4 <_ZSt15get_new_handlerv>
 8006ce8:	b908      	cbnz	r0, 8006cee <_Znwj+0x1e>
 8006cea:	f000 f80b 	bl	8006d04 <abort>
 8006cee:	4780      	blx	r0
 8006cf0:	e7f3      	b.n	8006cda <_Znwj+0xa>
	...

08006cf4 <_ZSt15get_new_handlerv>:
 8006cf4:	4b02      	ldr	r3, [pc, #8]	; (8006d00 <_ZSt15get_new_handlerv+0xc>)
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	f3bf 8f5b 	dmb	ish
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	240007d4 	.word	0x240007d4

08006d04 <abort>:
 8006d04:	b508      	push	{r3, lr}
 8006d06:	2006      	movs	r0, #6
 8006d08:	f000 f8e8 	bl	8006edc <raise>
 8006d0c:	2001      	movs	r0, #1
 8006d0e:	f7fa fbe1 	bl	80014d4 <_exit>
	...

08006d14 <malloc>:
 8006d14:	4b02      	ldr	r3, [pc, #8]	; (8006d20 <malloc+0xc>)
 8006d16:	4601      	mov	r1, r0
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	f000 b823 	b.w	8006d64 <_malloc_r>
 8006d1e:	bf00      	nop
 8006d20:	2400005c 	.word	0x2400005c

08006d24 <sbrk_aligned>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	4e0e      	ldr	r6, [pc, #56]	; (8006d60 <sbrk_aligned+0x3c>)
 8006d28:	460c      	mov	r4, r1
 8006d2a:	6831      	ldr	r1, [r6, #0]
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	b911      	cbnz	r1, 8006d36 <sbrk_aligned+0x12>
 8006d30:	f000 f8f0 	bl	8006f14 <_sbrk_r>
 8006d34:	6030      	str	r0, [r6, #0]
 8006d36:	4621      	mov	r1, r4
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f000 f8eb 	bl	8006f14 <_sbrk_r>
 8006d3e:	1c43      	adds	r3, r0, #1
 8006d40:	d00a      	beq.n	8006d58 <sbrk_aligned+0x34>
 8006d42:	1cc4      	adds	r4, r0, #3
 8006d44:	f024 0403 	bic.w	r4, r4, #3
 8006d48:	42a0      	cmp	r0, r4
 8006d4a:	d007      	beq.n	8006d5c <sbrk_aligned+0x38>
 8006d4c:	1a21      	subs	r1, r4, r0
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f000 f8e0 	bl	8006f14 <_sbrk_r>
 8006d54:	3001      	adds	r0, #1
 8006d56:	d101      	bne.n	8006d5c <sbrk_aligned+0x38>
 8006d58:	f04f 34ff 	mov.w	r4, #4294967295
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	bd70      	pop	{r4, r5, r6, pc}
 8006d60:	240007dc 	.word	0x240007dc

08006d64 <_malloc_r>:
 8006d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d68:	1ccd      	adds	r5, r1, #3
 8006d6a:	f025 0503 	bic.w	r5, r5, #3
 8006d6e:	3508      	adds	r5, #8
 8006d70:	2d0c      	cmp	r5, #12
 8006d72:	bf38      	it	cc
 8006d74:	250c      	movcc	r5, #12
 8006d76:	2d00      	cmp	r5, #0
 8006d78:	4607      	mov	r7, r0
 8006d7a:	db01      	blt.n	8006d80 <_malloc_r+0x1c>
 8006d7c:	42a9      	cmp	r1, r5
 8006d7e:	d905      	bls.n	8006d8c <_malloc_r+0x28>
 8006d80:	230c      	movs	r3, #12
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	2600      	movs	r6, #0
 8006d86:	4630      	mov	r0, r6
 8006d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006e60 <_malloc_r+0xfc>
 8006d90:	f000 f868 	bl	8006e64 <__malloc_lock>
 8006d94:	f8d8 3000 	ldr.w	r3, [r8]
 8006d98:	461c      	mov	r4, r3
 8006d9a:	bb5c      	cbnz	r4, 8006df4 <_malloc_r+0x90>
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	4638      	mov	r0, r7
 8006da0:	f7ff ffc0 	bl	8006d24 <sbrk_aligned>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	4604      	mov	r4, r0
 8006da8:	d155      	bne.n	8006e56 <_malloc_r+0xf2>
 8006daa:	f8d8 4000 	ldr.w	r4, [r8]
 8006dae:	4626      	mov	r6, r4
 8006db0:	2e00      	cmp	r6, #0
 8006db2:	d145      	bne.n	8006e40 <_malloc_r+0xdc>
 8006db4:	2c00      	cmp	r4, #0
 8006db6:	d048      	beq.n	8006e4a <_malloc_r+0xe6>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	eb04 0903 	add.w	r9, r4, r3
 8006dc2:	f000 f8a7 	bl	8006f14 <_sbrk_r>
 8006dc6:	4581      	cmp	r9, r0
 8006dc8:	d13f      	bne.n	8006e4a <_malloc_r+0xe6>
 8006dca:	6821      	ldr	r1, [r4, #0]
 8006dcc:	1a6d      	subs	r5, r5, r1
 8006dce:	4629      	mov	r1, r5
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	f7ff ffa7 	bl	8006d24 <sbrk_aligned>
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	d037      	beq.n	8006e4a <_malloc_r+0xe6>
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	442b      	add	r3, r5
 8006dde:	6023      	str	r3, [r4, #0]
 8006de0:	f8d8 3000 	ldr.w	r3, [r8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d038      	beq.n	8006e5a <_malloc_r+0xf6>
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	42a2      	cmp	r2, r4
 8006dec:	d12b      	bne.n	8006e46 <_malloc_r+0xe2>
 8006dee:	2200      	movs	r2, #0
 8006df0:	605a      	str	r2, [r3, #4]
 8006df2:	e00f      	b.n	8006e14 <_malloc_r+0xb0>
 8006df4:	6822      	ldr	r2, [r4, #0]
 8006df6:	1b52      	subs	r2, r2, r5
 8006df8:	d41f      	bmi.n	8006e3a <_malloc_r+0xd6>
 8006dfa:	2a0b      	cmp	r2, #11
 8006dfc:	d917      	bls.n	8006e2e <_malloc_r+0xca>
 8006dfe:	1961      	adds	r1, r4, r5
 8006e00:	42a3      	cmp	r3, r4
 8006e02:	6025      	str	r5, [r4, #0]
 8006e04:	bf18      	it	ne
 8006e06:	6059      	strne	r1, [r3, #4]
 8006e08:	6863      	ldr	r3, [r4, #4]
 8006e0a:	bf08      	it	eq
 8006e0c:	f8c8 1000 	streq.w	r1, [r8]
 8006e10:	5162      	str	r2, [r4, r5]
 8006e12:	604b      	str	r3, [r1, #4]
 8006e14:	4638      	mov	r0, r7
 8006e16:	f104 060b 	add.w	r6, r4, #11
 8006e1a:	f000 f829 	bl	8006e70 <__malloc_unlock>
 8006e1e:	f026 0607 	bic.w	r6, r6, #7
 8006e22:	1d23      	adds	r3, r4, #4
 8006e24:	1af2      	subs	r2, r6, r3
 8006e26:	d0ae      	beq.n	8006d86 <_malloc_r+0x22>
 8006e28:	1b9b      	subs	r3, r3, r6
 8006e2a:	50a3      	str	r3, [r4, r2]
 8006e2c:	e7ab      	b.n	8006d86 <_malloc_r+0x22>
 8006e2e:	42a3      	cmp	r3, r4
 8006e30:	6862      	ldr	r2, [r4, #4]
 8006e32:	d1dd      	bne.n	8006df0 <_malloc_r+0x8c>
 8006e34:	f8c8 2000 	str.w	r2, [r8]
 8006e38:	e7ec      	b.n	8006e14 <_malloc_r+0xb0>
 8006e3a:	4623      	mov	r3, r4
 8006e3c:	6864      	ldr	r4, [r4, #4]
 8006e3e:	e7ac      	b.n	8006d9a <_malloc_r+0x36>
 8006e40:	4634      	mov	r4, r6
 8006e42:	6876      	ldr	r6, [r6, #4]
 8006e44:	e7b4      	b.n	8006db0 <_malloc_r+0x4c>
 8006e46:	4613      	mov	r3, r2
 8006e48:	e7cc      	b.n	8006de4 <_malloc_r+0x80>
 8006e4a:	230c      	movs	r3, #12
 8006e4c:	603b      	str	r3, [r7, #0]
 8006e4e:	4638      	mov	r0, r7
 8006e50:	f000 f80e 	bl	8006e70 <__malloc_unlock>
 8006e54:	e797      	b.n	8006d86 <_malloc_r+0x22>
 8006e56:	6025      	str	r5, [r4, #0]
 8006e58:	e7dc      	b.n	8006e14 <_malloc_r+0xb0>
 8006e5a:	605b      	str	r3, [r3, #4]
 8006e5c:	deff      	udf	#255	; 0xff
 8006e5e:	bf00      	nop
 8006e60:	240007d8 	.word	0x240007d8

08006e64 <__malloc_lock>:
 8006e64:	4801      	ldr	r0, [pc, #4]	; (8006e6c <__malloc_lock+0x8>)
 8006e66:	f000 b88f 	b.w	8006f88 <__retarget_lock_acquire_recursive>
 8006e6a:	bf00      	nop
 8006e6c:	2400091c 	.word	0x2400091c

08006e70 <__malloc_unlock>:
 8006e70:	4801      	ldr	r0, [pc, #4]	; (8006e78 <__malloc_unlock+0x8>)
 8006e72:	f000 b88a 	b.w	8006f8a <__retarget_lock_release_recursive>
 8006e76:	bf00      	nop
 8006e78:	2400091c 	.word	0x2400091c

08006e7c <memset>:
 8006e7c:	4402      	add	r2, r0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d100      	bne.n	8006e86 <memset+0xa>
 8006e84:	4770      	bx	lr
 8006e86:	f803 1b01 	strb.w	r1, [r3], #1
 8006e8a:	e7f9      	b.n	8006e80 <memset+0x4>

08006e8c <_raise_r>:
 8006e8c:	291f      	cmp	r1, #31
 8006e8e:	b538      	push	{r3, r4, r5, lr}
 8006e90:	4604      	mov	r4, r0
 8006e92:	460d      	mov	r5, r1
 8006e94:	d904      	bls.n	8006ea0 <_raise_r+0x14>
 8006e96:	2316      	movs	r3, #22
 8006e98:	6003      	str	r3, [r0, #0]
 8006e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ea0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006ea2:	b112      	cbz	r2, 8006eaa <_raise_r+0x1e>
 8006ea4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ea8:	b94b      	cbnz	r3, 8006ebe <_raise_r+0x32>
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f000 f830 	bl	8006f10 <_getpid_r>
 8006eb0:	462a      	mov	r2, r5
 8006eb2:	4601      	mov	r1, r0
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eba:	f000 b817 	b.w	8006eec <_kill_r>
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d00a      	beq.n	8006ed8 <_raise_r+0x4c>
 8006ec2:	1c59      	adds	r1, r3, #1
 8006ec4:	d103      	bne.n	8006ece <_raise_r+0x42>
 8006ec6:	2316      	movs	r3, #22
 8006ec8:	6003      	str	r3, [r0, #0]
 8006eca:	2001      	movs	r0, #1
 8006ecc:	e7e7      	b.n	8006e9e <_raise_r+0x12>
 8006ece:	2400      	movs	r4, #0
 8006ed0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	4798      	blx	r3
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e7e0      	b.n	8006e9e <_raise_r+0x12>

08006edc <raise>:
 8006edc:	4b02      	ldr	r3, [pc, #8]	; (8006ee8 <raise+0xc>)
 8006ede:	4601      	mov	r1, r0
 8006ee0:	6818      	ldr	r0, [r3, #0]
 8006ee2:	f7ff bfd3 	b.w	8006e8c <_raise_r>
 8006ee6:	bf00      	nop
 8006ee8:	2400005c 	.word	0x2400005c

08006eec <_kill_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4d07      	ldr	r5, [pc, #28]	; (8006f0c <_kill_r+0x20>)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	4608      	mov	r0, r1
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	602b      	str	r3, [r5, #0]
 8006efa:	f7fa fadb 	bl	80014b4 <_kill>
 8006efe:	1c43      	adds	r3, r0, #1
 8006f00:	d102      	bne.n	8006f08 <_kill_r+0x1c>
 8006f02:	682b      	ldr	r3, [r5, #0]
 8006f04:	b103      	cbz	r3, 8006f08 <_kill_r+0x1c>
 8006f06:	6023      	str	r3, [r4, #0]
 8006f08:	bd38      	pop	{r3, r4, r5, pc}
 8006f0a:	bf00      	nop
 8006f0c:	24000918 	.word	0x24000918

08006f10 <_getpid_r>:
 8006f10:	f7fa bac8 	b.w	80014a4 <_getpid>

08006f14 <_sbrk_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	4d06      	ldr	r5, [pc, #24]	; (8006f30 <_sbrk_r+0x1c>)
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	602b      	str	r3, [r5, #0]
 8006f20:	f7fa fae2 	bl	80014e8 <_sbrk>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d102      	bne.n	8006f2e <_sbrk_r+0x1a>
 8006f28:	682b      	ldr	r3, [r5, #0]
 8006f2a:	b103      	cbz	r3, 8006f2e <_sbrk_r+0x1a>
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	bd38      	pop	{r3, r4, r5, pc}
 8006f30:	24000918 	.word	0x24000918

08006f34 <__errno>:
 8006f34:	4b01      	ldr	r3, [pc, #4]	; (8006f3c <__errno+0x8>)
 8006f36:	6818      	ldr	r0, [r3, #0]
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	2400005c 	.word	0x2400005c

08006f40 <__libc_init_array>:
 8006f40:	b570      	push	{r4, r5, r6, lr}
 8006f42:	4d0d      	ldr	r5, [pc, #52]	; (8006f78 <__libc_init_array+0x38>)
 8006f44:	4c0d      	ldr	r4, [pc, #52]	; (8006f7c <__libc_init_array+0x3c>)
 8006f46:	1b64      	subs	r4, r4, r5
 8006f48:	10a4      	asrs	r4, r4, #2
 8006f4a:	2600      	movs	r6, #0
 8006f4c:	42a6      	cmp	r6, r4
 8006f4e:	d109      	bne.n	8006f64 <__libc_init_array+0x24>
 8006f50:	4d0b      	ldr	r5, [pc, #44]	; (8006f80 <__libc_init_array+0x40>)
 8006f52:	4c0c      	ldr	r4, [pc, #48]	; (8006f84 <__libc_init_array+0x44>)
 8006f54:	f000 f81a 	bl	8006f8c <_init>
 8006f58:	1b64      	subs	r4, r4, r5
 8006f5a:	10a4      	asrs	r4, r4, #2
 8006f5c:	2600      	movs	r6, #0
 8006f5e:	42a6      	cmp	r6, r4
 8006f60:	d105      	bne.n	8006f6e <__libc_init_array+0x2e>
 8006f62:	bd70      	pop	{r4, r5, r6, pc}
 8006f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f68:	4798      	blx	r3
 8006f6a:	3601      	adds	r6, #1
 8006f6c:	e7ee      	b.n	8006f4c <__libc_init_array+0xc>
 8006f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f72:	4798      	blx	r3
 8006f74:	3601      	adds	r6, #1
 8006f76:	e7f2      	b.n	8006f5e <__libc_init_array+0x1e>
 8006f78:	08006fe4 	.word	0x08006fe4
 8006f7c:	08006fe4 	.word	0x08006fe4
 8006f80:	08006fe4 	.word	0x08006fe4
 8006f84:	08006fe8 	.word	0x08006fe8

08006f88 <__retarget_lock_acquire_recursive>:
 8006f88:	4770      	bx	lr

08006f8a <__retarget_lock_release_recursive>:
 8006f8a:	4770      	bx	lr

08006f8c <_init>:
 8006f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8e:	bf00      	nop
 8006f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f92:	bc08      	pop	{r3}
 8006f94:	469e      	mov	lr, r3
 8006f96:	4770      	bx	lr

08006f98 <_fini>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	bf00      	nop
 8006f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9e:	bc08      	pop	{r3}
 8006fa0:	469e      	mov	lr, r3
 8006fa2:	4770      	bx	lr
