
EnumState_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008028  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080082c0  080082c0  000182c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800830c  0800830c  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  0800830c  0800830c  0001830c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008314  08008314  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008314  08008314  00018314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  24000000  0800831c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000064  08008380  00020064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000c4  080083e0  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000808  24000124  08008440  00020124  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400092c  08008440  0002092c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020152  2**0
                  CONTENTS, READONLY
 15 .debug_info   00020308  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000036b8  00000000  00000000  0004049d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001498  00000000  00000000  00043b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000fe4  00000000  00000000  00044ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003f2de  00000000  00000000  00045fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00018830  00000000  00000000  000852b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001918dd  00000000  00000000  0009dae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006058  00000000  00000000  0022f3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000080  00000000  00000000  00235418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000124 	.word	0x24000124
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080082a8 	.word	0x080082a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000128 	.word	0x24000128
 80002d4:	080082a8 	.word	0x080082a8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
 8000704:	2300      	movs	r3, #0
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 f805 	bl	8000746 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
    }
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <_ZN12StateMachineC1E3Ledmmm>:
	uint32_t maxBlink;
	uint32_t lowRateHz;
	uint32_t highRateHz;

public:
	StateMachine(Led led,
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b08b      	sub	sp, #44	; 0x2c
 8000778:	af02      	add	r7, sp, #8
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	603b      	str	r3, [r7, #0]
				 uint32_t maxBlink,
				 uint32_t lowRateHz,
				 uint32_t highRateHz){
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f103 0408 	add.w	r4, r3, #8
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <_ZN12StateMachineC1E3Ledmmm+0x78>)
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	2302      	movs	r3, #2
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f90a 	bl	80009b4 <_ZNSaISt4pairIK5StateS0_EEC1Ev>
 80007a0:	f107 0218 	add.w	r2, r7, #24
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	4613      	mov	r3, r2
 80007ac:	f107 0210 	add.w	r2, r7, #16
 80007b0:	ca06      	ldmia	r2, {r1, r2}
 80007b2:	4620      	mov	r0, r4
 80007b4:	f000 f915 	bl	80009e2 <_ZNSt3mapI5StateS0_St4lessIS0_ESaISt4pairIKS0_S0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f905 	bl	80009cc <_ZNSaISt4pairIK5StateS0_EED1Ev>
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]

		this->led = led;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	601a      	str	r2, [r3, #0]
		this->maxBlink = maxBlink;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	625a      	str	r2, [r3, #36]	; 0x24
		this->lowRateHz = lowRateHz;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
		this->highRateHz = highRateHz;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4618      	mov	r0, r3
 80007e4:	3724      	adds	r7, #36	; 0x24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd90      	pop	{r4, r7, pc}
 80007ea:	bf00      	nop
 80007ec:	080082d4 	.word	0x080082d4

080007f0 <_ZN12StateMachine5blinkEv>:
	void blink(){ // fsmExecute()
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
		// transition condition
		if (blinkCounter > maxBlink){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6a1a      	ldr	r2, [r3, #32]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000800:	429a      	cmp	r2, r3
 8000802:	d90f      	bls.n	8000824 <_ZN12StateMachine5blinkEv+0x34>
			currentState = stateTransition[currentState];
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f103 0208 	add.w	r2, r3, #8
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3304      	adds	r3, #4
 800080e:	4619      	mov	r1, r3
 8000810:	4610      	mov	r0, r2
 8000812:	f000 f917 	bl	8000a44 <_ZNSt3mapI5StateS0_St4lessIS0_ESaISt4pairIKS0_S0_EEEixERS4_>
 8000816:	4603      	mov	r3, r0
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	605a      	str	r2, [r3, #4]
			blinkCounter = 0;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
		}

		switch(currentState){
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d002      	beq.n	8000832 <_ZN12StateMachine5blinkEv+0x42>
 800082c:	2b01      	cmp	r3, #1
 800082e:	d01f      	beq.n	8000870 <_ZN12StateMachine5blinkEv+0x80>
				toggleLED(led);
				blinkCounter++;
			}
			break;
		}
	}
 8000830:	e040      	b.n	80008b4 <_ZN12StateMachine5blinkEv+0xc4>
			if (this->NonBlocking_Delay((float)(1000/lowRateHz))){
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000836:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800083a:	fbb2 f3f3 	udiv	r3, r2, r3
 800083e:	ee07 3a90 	vmov	s15, r3
 8000842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800084a:	ee17 1a90 	vmov	r1, s15
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 f834 	bl	80008bc <_ZN12StateMachine17NonBlocking_DelayEm>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d029      	beq.n	80008ae <_ZN12StateMachine5blinkEv+0xbe>
				toggleLED(led);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f86e 	bl	8000940 <_Z9toggleLED3Led>
				blinkCounter++;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6a1b      	ldr	r3, [r3, #32]
 8000868:	1c5a      	adds	r2, r3, #1
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	621a      	str	r2, [r3, #32]
			break;
 800086e:	e01e      	b.n	80008ae <_ZN12StateMachine5blinkEv+0xbe>
			if (this->NonBlocking_Delay((float)(1000/highRateHz))){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000878:	fbb2 f3f3 	udiv	r3, r2, r3
 800087c:	ee07 3a90 	vmov	s15, r3
 8000880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000888:	ee17 1a90 	vmov	r1, s15
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f815 	bl	80008bc <_ZN12StateMachine17NonBlocking_DelayEm>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00c      	beq.n	80008b2 <_ZN12StateMachine5blinkEv+0xc2>
				toggleLED(led);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f84f 	bl	8000940 <_Z9toggleLED3Led>
				blinkCounter++;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6a1b      	ldr	r3, [r3, #32]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	621a      	str	r2, [r3, #32]
			break;
 80008ac:	e001      	b.n	80008b2 <_ZN12StateMachine5blinkEv+0xc2>
			break;
 80008ae:	bf00      	nop
 80008b0:	e000      	b.n	80008b4 <_ZN12StateMachine5blinkEv+0xc4>
			break;
 80008b2:	bf00      	nop
	}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <_ZN12StateMachine17NonBlocking_DelayEm>:

	bool NonBlocking_Delay(uint32_t Delay){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
		static bool flag_init = true;
		static uint32_t wait;
		static uint32_t tickstart;

		if (flag_init == true){
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <_ZN12StateMachine17NonBlocking_DelayEm+0x74>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d117      	bne.n	80008fe <_ZN12StateMachine17NonBlocking_DelayEm+0x42>
			flag_init = false;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <_ZN12StateMachine17NonBlocking_DelayEm+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]

			wait = Delay;
 80008d4:	4a17      	ldr	r2, [pc, #92]	; (8000934 <_ZN12StateMachine17NonBlocking_DelayEm+0x78>)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	6013      	str	r3, [r2, #0]
			tickstart = HAL_GetTick();
 80008da:	f001 ff63 	bl	80027a4 <HAL_GetTick>
 80008de:	4603      	mov	r3, r0
 80008e0:	4a15      	ldr	r2, [pc, #84]	; (8000938 <_ZN12StateMachine17NonBlocking_DelayEm+0x7c>)
 80008e2:	6013      	str	r3, [r2, #0]

			if (wait < HAL_MAX_DELAY){
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <_ZN12StateMachine17NonBlocking_DelayEm+0x78>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ec:	d007      	beq.n	80008fe <_ZN12StateMachine17NonBlocking_DelayEm+0x42>
				wait += (uint32_t)(uwTickFreq);
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <_ZN12StateMachine17NonBlocking_DelayEm+0x80>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <_ZN12StateMachine17NonBlocking_DelayEm+0x78>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4413      	add	r3, r2
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <_ZN12StateMachine17NonBlocking_DelayEm+0x78>)
 80008fc:	6013      	str	r3, [r2, #0]
			}
		}

		// Delay logic
		if ((HAL_GetTick() - tickstart) < wait) // not enough time passed
 80008fe:	f001 ff51 	bl	80027a4 <HAL_GetTick>
 8000902:	4602      	mov	r2, r0
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <_ZN12StateMachine17NonBlocking_DelayEm+0x7c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	1ad2      	subs	r2, r2, r3
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <_ZN12StateMachine17NonBlocking_DelayEm+0x78>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	429a      	cmp	r2, r3
 8000910:	bf34      	ite	cc
 8000912:	2301      	movcc	r3, #1
 8000914:	2300      	movcs	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <_ZN12StateMachine17NonBlocking_DelayEm+0x64>
		{
			return false;
 800091c:	2300      	movs	r3, #0
 800091e:	e003      	b.n	8000928 <_ZN12StateMachine17NonBlocking_DelayEm+0x6c>
		}
		else{ // waited for given amount of time --> re-initialize on next entry
			flag_init = true;
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <_ZN12StateMachine17NonBlocking_DelayEm+0x74>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
			return true;
 8000926:	2301      	movs	r3, #1
		}
	}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	24000008 	.word	0x24000008
 8000934:	24000140 	.word	0x24000140
 8000938:	24000144 	.word	0x24000144
 800093c:	24000010 	.word	0x24000010

08000940 <_Z9toggleLED3Led>:
};

void toggleLED(Led led){
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	if(led == Led::GREEN){HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);}
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d104      	bne.n	8000958 <_Z9toggleLED3Led+0x18>
 800094e:	2101      	movs	r1, #1
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <_Z9toggleLED3Led+0x34>)
 8000952:	f002 fe48 	bl	80035e6 <HAL_GPIO_TogglePin>
	else if(led == Led::RED){HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);}
	return;
 8000956:	e008      	b.n	800096a <_Z9toggleLED3Led+0x2a>
	else if(led == Led::RED){HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);}
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b03      	cmp	r3, #3
 800095c:	d105      	bne.n	800096a <_Z9toggleLED3Led+0x2a>
 800095e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000962:	4804      	ldr	r0, [pc, #16]	; (8000974 <_Z9toggleLED3Led+0x34>)
 8000964:	f002 fe3f 	bl	80035e6 <HAL_GPIO_TogglePin>
	return;
 8000968:	bf00      	nop
 800096a:	bf00      	nop
}
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	58020400 	.word	0x58020400

08000978 <cppMain>:




void cppMain(){
 8000978:	b580      	push	{r7, lr}
 800097a:	b09a      	sub	sp, #104	; 0x68
 800097c:	af02      	add	r7, sp, #8
	// Init
	StateMachine sm1(Led::GREEN, 5,1,3);
 800097e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000982:	2303      	movs	r3, #3
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2301      	movs	r3, #1
 8000988:	2205      	movs	r2, #5
 800098a:	2101      	movs	r1, #1
 800098c:	f7ff fef2 	bl	8000774 <_ZN12StateMachineC1E3Ledmmm>
	StateMachine sm2(Led::RED, 5,1,2);
 8000990:	4638      	mov	r0, r7
 8000992:	2302      	movs	r3, #2
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2301      	movs	r3, #1
 8000998:	2205      	movs	r2, #5
 800099a:	2103      	movs	r1, #3
 800099c:	f7ff feea 	bl	8000774 <_ZN12StateMachineC1E3Ledmmm>

	while(1){
		sm1.blink();
 80009a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff23 	bl	80007f0 <_ZN12StateMachine5blinkEv>
		sm2.blink();
 80009aa:	463b      	mov	r3, r7
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff1f 	bl	80007f0 <_ZN12StateMachine5blinkEv>
		sm1.blink();
 80009b2:	e7f5      	b.n	80009a0 <cppMain+0x28>

080009b4 <_ZNSaISt4pairIK5StateS0_EEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 f89d 	bl	8000afc <_ZN9__gnu_cxx13new_allocatorISt4pairIK5StateS2_EEC1Ev>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <_ZNSaISt4pairIK5StateS0_EED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <_ZNSt3mapI5StateS0_St4lessIS0_ESaISt4pairIKS0_S0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
       *  Create a %map consisting of copies of the elements in the
       *  initializer_list @a __l.
       *  This is linear in N if the range is already sorted, and NlogN
       *  otherwise (where N is @a __l.size()).
       */
      map(initializer_list<value_type> __l,
 80009e2:	b5b0      	push	{r4, r5, r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	1d38      	adds	r0, r7, #4
 80009ec:	e880 0006 	stmia.w	r0, {r1, r2}
 80009f0:	603b      	str	r3, [r7, #0]
	  const _Compare& __comp = _Compare(),
	  const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
 80009f2:	68fc      	ldr	r4, [r7, #12]
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f889 	bl	8000b12 <_ZNSaISt4pairIK5StateS0_EEC1ERKS3_>
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	461a      	mov	r2, r3
 8000a06:	6839      	ldr	r1, [r7, #0]
 8000a08:	4620      	mov	r0, r4
 8000a0a:	f000 f890 	bl	8000b2e <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EEC1ERKS7_RKS8_>
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff ffda 	bl	80009cc <_ZNSaISt4pairIK5StateS0_EED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8000a18:	68fc      	ldr	r4, [r7, #12]
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f8a4 	bl	8000b6a <_ZNKSt16initializer_listISt4pairIK5StateS1_EE5beginEv>
 8000a22:	4605      	mov	r5, r0
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f8ab 	bl	8000b82 <_ZNKSt16initializer_listISt4pairIK5StateS1_EE3endEv>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4629      	mov	r1, r5
 8000a32:	4620      	mov	r0, r4
 8000a34:	f000 f8b7 	bl	8000ba6 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000a44 <_ZNSt3mapI5StateS0_St4lessIS0_ESaISt4pairIKS0_S0_EEEixERS4_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b08b      	sub	sp, #44	; 0x2c
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 8000a4e:	6839      	ldr	r1, [r7, #0]
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f8ec 	bl	8000c2e <_ZNSt3mapI5StateS0_St4lessIS0_ESaISt4pairIKS0_S0_EEE11lower_boundERS4_>
 8000a56:	4603      	mov	r3, r0
 8000a58:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f000 f8f6 	bl	8000c4c <_ZNSt3mapI5StateS0_St4lessIS0_ESaISt4pairIKS0_S0_EEE3endEv>
 8000a60:	4603      	mov	r3, r0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	f107 020c 	add.w	r2, r7, #12
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f8f9 	bl	8000c66 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK5StateS1_EES6_>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d112      	bne.n	8000aa0 <_ZNSt3mapI5StateS0_St4lessIS0_ESaISt4pairIKS0_S0_EEEixERS4_+0x5c>
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 f907 	bl	8000c8e <_ZNKSt3mapI5StateS0_St4lessIS0_ESaISt4pairIKS0_S0_EEE8key_compEv>
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f90f 	bl	8000ca8 <_ZNKSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEdeEv>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	6839      	ldr	r1, [r7, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f915 	bl	8000cc4 <_ZNKSt4lessI5StateEclERKS0_S3_>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <_ZNSt3mapI5StateS0_St4lessIS0_ESaISt4pairIKS0_S0_EEEixERS4_+0x60>
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e000      	b.n	8000aa6 <_ZNSt3mapI5StateS0_St4lessIS0_ESaISt4pairIKS0_S0_EEEixERS4_+0x62>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d01b      	beq.n	8000ae2 <_ZNSt3mapI5StateS0_St4lessIS0_ESaISt4pairIKS0_S0_EEEixERS4_+0x9e>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8000aaa:	687c      	ldr	r4, [r7, #4]
 8000aac:	f107 0208 	add.w	r2, r7, #8
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f928 	bl	8000d0c <_ZNSt23_Rb_tree_const_iteratorISt4pairIK5StateS1_EEC1ERKSt17_Rb_tree_iteratorIS3_E>
					    std::tuple<const key_type&>(__k),
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	6839      	ldr	r1, [r7, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f913 	bl	8000cee <_ZNSt5tupleIJRK5StateEEC1ILb1ELb1EEES2_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8000ac8:	f107 0218 	add.w	r2, r7, #24
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <_ZNSt3mapI5StateS0_St4lessIS0_ESaISt4pairIKS0_S0_EEEixERS4_+0xb4>)
 8000ad6:	6979      	ldr	r1, [r7, #20]
 8000ad8:	4620      	mov	r0, r4
 8000ada:	f000 f927 	bl	8000d2c <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	60bb      	str	r3, [r7, #8]
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f8de 	bl	8000ca8 <_ZNKSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEdeEv>
 8000aec:	4603      	mov	r3, r0
 8000aee:	3304      	adds	r3, #4
      }
 8000af0:	4618      	mov	r0, r3
 8000af2:	3724      	adds	r7, #36	; 0x24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}
 8000af8:	080082d0 	.word	0x080082d0

08000afc <_ZN9__gnu_cxx13new_allocatorISt4pairIK5StateS2_EEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_ZNSaISt4pairIK5StateS0_EEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8000b1c:	6839      	ldr	r1, [r7, #0]
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 f942 	bl	8000da8 <_ZN9__gnu_cxx13new_allocatorISt4pairIK5StateS2_EEC1ERKS5_>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree() { }
#else
      _Rb_tree() = default;
#endif

      _Rb_tree(const _Compare& __comp,
 8000b2e:	b590      	push	{r4, r7, lr}
 8000b30:	b087      	sub	sp, #28
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
	       const allocator_type& __a = allocator_type())
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8000b3a:	68fc      	ldr	r4, [r7, #12]
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f93c 	bl	8000dc0 <_ZNSaISt13_Rb_tree_nodeISt4pairIK5StateS1_EEEC1IS3_EERKSaIT_E>
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	68b9      	ldr	r1, [r7, #8]
 8000b50:	4620      	mov	r0, r4
 8000b52:	f000 f942 	bl	8000dda <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f850 	bl	8000c00 <_ZNSaISt13_Rb_tree_nodeISt4pairIK5StateS1_EEED1Ev>
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4618      	mov	r0, r3
 8000b64:	371c      	adds	r7, #28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd90      	pop	{r4, r7, pc}

08000b6a <_ZNKSt16initializer_listISt4pairIK5StateS1_EE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <_ZNKSt16initializer_listISt4pairIK5StateS1_EE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8000b82:	b590      	push	{r4, r7, lr}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffed 	bl	8000b6a <_ZNKSt16initializer_listISt4pairIK5StateS1_EE5beginEv>
 8000b90:	4604      	mov	r4, r0
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 f93e 	bl	8000e14 <_ZNKSt16initializer_listISt4pairIK5StateS1_EE4sizeEv>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	4423      	add	r3, r4
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd90      	pop	{r4, r7, pc}

08000ba6 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	using __same_value_type
	  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;

      template<typename _InputIterator>
	__enable_if_t<__same_value_type<_InputIterator>::value>
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b088      	sub	sp, #32
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
	{
	  _Alloc_node __an(*this);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	68f9      	ldr	r1, [r7, #12]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 f937 	bl	8000e2c <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 8000bbe:	e016      	b.n	8000bee <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x48>
	    _M_insert_unique_(end(), *__first, __an);
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f000 f942 	bl	8000e4a <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	f107 021c 	add.w	r2, r7, #28
 8000bce:	f107 0318 	add.w	r3, r7, #24
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f899 	bl	8000d0c <_ZNSt23_Rb_tree_const_iteratorISt4pairIK5StateS1_EEC1ERKSt17_Rb_tree_iteratorIS3_E>
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	69b9      	ldr	r1, [r7, #24]
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f000 f942 	bl	8000e6c <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	3308      	adds	r3, #8
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d1e4      	bne.n	8000bc0 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x1a>
	}
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_ZNSaISt13_Rb_tree_nodeISt4pairIK5StateS1_EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f980 	bl	8000f24 <_ZNKSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE9_M_mbeginEv>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_ZNSt3mapI5StateS0_St4lessIS0_ESaISt4pairIKS0_S0_EEE11lower_boundERS4_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6839      	ldr	r1, [r7, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f97d 	bl	8000f3c <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11lower_boundERS2_>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <_ZNSt3mapI5StateS0_St4lessIS0_ESaISt4pairIKS0_S0_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f8f7 	bl	8000e4a <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK5StateS1_EES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	bf0c      	ite	eq
 8000c7c:	2301      	moveq	r3, #1
 8000c7e:	2300      	movne	r3, #0
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <_ZNKSt3mapI5StateS0_St4lessIS0_ESaISt4pairIKS0_S0_EEE8key_compEv>:
      key_comp() const
 8000c8e:	b590      	push	{r4, r7, lr}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f966 	bl	8000f6a <_ZNKSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8key_compEv>
 8000c9e:	bf00      	nop
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd90      	pop	{r4, r7, pc}

08000ca8 <_ZNKSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 f963 	bl	8000f80 <_ZNSt13_Rb_tree_nodeISt4pairIK5StateS1_EE9_M_valptrEv>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_ZNKSt4lessI5StateEclERKS0_S3_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	bfb4      	ite	lt
 8000cdc:	2301      	movlt	r3, #1
 8000cde:	2300      	movge	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <_ZNSt5tupleIJRK5StateEEC1ILb1ELb1EEES2_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6839      	ldr	r1, [r7, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f94d 	bl	8000f9c <_ZNSt11_Tuple_implILj0EJRK5StateEEC1ES2_>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <_ZNSt23_Rb_tree_const_iteratorISt4pairIK5StateS1_EEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000d2c:	b5b0      	push	{r4, r5, r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 f93d 	bl	8000fba <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8000d40:	4604      	mov	r4, r0
 8000d42:	6838      	ldr	r0, [r7, #0]
 8000d44:	f000 f944 	bl	8000fd0 <_ZSt7forwardISt5tupleIJRK5StateEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8000d48:	4605      	mov	r5, r0
 8000d4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d4c:	f000 f94b 	bl	8000fe6 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000d50:	4603      	mov	r3, r0
 8000d52:	462a      	mov	r2, r5
 8000d54:	4621      	mov	r1, r4
 8000d56:	68f8      	ldr	r0, [r7, #12]
 8000d58:	f000 f950 	bl	8000ffc <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 8000d5c:	61f8      	str	r0, [r7, #28]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8000d5e:	69f8      	ldr	r0, [r7, #28]
 8000d60:	f000 fa92 	bl	8001288 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f107 0010 	add.w	r0, r7, #16
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	68f9      	ldr	r1, [r7, #12]
 8000d6e:	f000 f968 	bl	8001042 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>

	    if (__res.second)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d007      	beq.n	8000d88 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8000d78:	6939      	ldr	r1, [r7, #16]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	68f8      	ldr	r0, [r7, #12]
 8000d80:	f000 fa95 	bl	80012ae <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>
 8000d84:	4603      	mov	r3, r0
 8000d86:	e00b      	b.n	8000da0 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x74>

	    _M_drop_node(__z);
 8000d88:	69f9      	ldr	r1, [r7, #28]
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f000 f8b9 	bl	8000f02 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	    return iterator(__res.first);
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	f107 0318 	add.w	r3, r7, #24
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 fac5 	bl	8001328 <_ZNSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEC1EPSt18_Rb_tree_node_base>
 8000d9e:	69bb      	ldr	r3, [r7, #24]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8000da0:	4618      	mov	r0, r3
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bdb0      	pop	{r4, r5, r7, pc}

08000da8 <_ZN9__gnu_cxx13new_allocatorISt4pairIK5StateS2_EEC1ERKS5_>:

      _GLIBCXX20_CONSTEXPR
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_ZNSaISt13_Rb_tree_nodeISt4pairIK5StateS1_EEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 fabb 	bl	8001346 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK5StateS3_EEEC1Ev>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	60f8      	str	r0, [r7, #12]
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 fab8 	bl	800135c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEEONSt16remove_referenceIT_E4typeEOS9_>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4619      	mov	r1, r3
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f000 fabe 	bl	8001372 <_ZNSaISt13_Rb_tree_nodeISt4pairIK5StateS1_EEEC1ERKS5_>
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fac7 	bl	800138e <_ZNSt20_Rb_tree_key_compareISt4lessI5StateEEC1ERKS2_>
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3304      	adds	r3, #4
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fc8f 	bl	8000728 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_ZNKSt16initializer_listISt4pairIK5StateS1_EE4sizeEv>:
      size() const noexcept { return _M_len; }
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	1d1a      	adds	r2, r3, #4
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 fa63 	bl	8001328 <_ZNSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEC1EPSt18_Rb_tree_node_base>
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000e6c:	b5b0      	push	{r4, r5, r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af02      	add	r7, sp, #8
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
 8000e78:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8000e7a:	f107 0318 	add.w	r3, r7, #24
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fa90 	bl	80013a6 <_ZNKSt10_Select1stISt4pairIK5StateS1_EEclERKS3_>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f107 0010 	add.w	r0, r7, #16
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	68f9      	ldr	r1, [r7, #12]
 8000e90:	f000 f8d7 	bl	8001042 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>
      if (__res.second)
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00f      	beq.n	8000eba <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8000e9a:	693c      	ldr	r4, [r7, #16]
 8000e9c:	697d      	ldr	r5, [r7, #20]
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 fa8d 	bl	80013be <_ZSt7forwardIRKSt4pairIK5StateS1_EEOT_RNSt16remove_referenceIS6_E4typeE>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	462a      	mov	r2, r5
 8000eae:	4621      	mov	r1, r4
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f000 fa8f 	bl	80013d4 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 8000eb6:	4603      	mov	r3, r0
			  __node_gen);
 8000eb8:	e007      	b.n	8000eca <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fa30 	bl	8001328 <_ZNSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEC1EPSt18_Rb_tree_node_base>
 8000ec8:	69fb      	ldr	r3, [r7, #28]
    }
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3720      	adds	r7, #32
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bdb0      	pop	{r4, r5, r7, pc}

08000ed2 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 faa9 	bl	8001466 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 8000f14:	6839      	ldr	r1, [r7, #0]
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 faba 	bl	8001490 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_ZNKSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11lower_boundERS2_>:
      lower_bound(const key_type& __k)
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fe65 	bl	8000c16 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 8000f4c:	4604      	mov	r4, r0
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 fab0 	bl	80014b4 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 8000f54:	4602      	mov	r2, r0
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	4621      	mov	r1, r4
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 fab6 	bl	80014cc <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd90      	pop	{r4, r7, pc}

08000f6a <_ZNKSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8key_compEv>:
      key_comp() const
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8000f72:	bf00      	nop
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <_ZNSt13_Rb_tree_nodeISt4pairIK5StateS1_EE9_M_valptrEv>:
      _M_valptr()
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3310      	adds	r3, #16
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 face 	bl	800152e <_ZN9__gnu_cxx16__aligned_membufISt4pairIK5StateS2_EE6_M_ptrEv>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_ZNSt11_Tuple_implILj0EJRK5StateEEC1ES2_>:
      _Tuple_impl(const _Head& __head)
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6839      	ldr	r1, [r7, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 facb 	bl	8001546 <_ZNSt10_Head_baseILj0ERK5StateLb0EEC1ES2_>
      { }
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <_ZSt7forwardISt5tupleIJRK5StateEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8000ffc:	b5b0      	push	{r4, r5, r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af02      	add	r7, sp, #8
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 faaa 	bl	8001564 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>
 8001010:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8001012:	68b8      	ldr	r0, [r7, #8]
 8001014:	f7ff ffd1 	bl	8000fba <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001018:	4604      	mov	r4, r0
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffd8 	bl	8000fd0 <_ZSt7forwardISt5tupleIJRK5StateEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8001020:	4605      	mov	r5, r0
 8001022:	6838      	ldr	r0, [r7, #0]
 8001024:	f7ff ffdf 	bl	8000fe6 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001028:	4603      	mov	r3, r0
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	462b      	mov	r3, r5
 800102e:	4622      	mov	r2, r4
 8001030:	6979      	ldr	r1, [r7, #20]
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f000 faa7 	bl	8001586 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 8001038:	697b      	ldr	r3, [r7, #20]
	}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bdb0      	pop	{r4, r5, r7, pc}

08001042 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001042:	b590      	push	{r4, r7, lr}
 8001044:	b08d      	sub	sp, #52	; 0x34
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fac4 	bl	80015e0 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK5StateS1_EE13_M_const_castEv>
 8001058:	4603      	mov	r3, r0
 800105a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800105c:	69bc      	ldr	r4, [r7, #24]
 800105e:	68b8      	ldr	r0, [r7, #8]
 8001060:	f000 fa28 	bl	80014b4 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 8001064:	4603      	mov	r3, r0
 8001066:	429c      	cmp	r4, r3
 8001068:	bf0c      	ite	eq
 800106a:	2301      	moveq	r3, #1
 800106c:	2300      	movne	r3, #0
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d030      	beq.n	80010d6 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x94>
	  if (size() > 0
 8001074:	68b8      	ldr	r0, [r7, #8]
 8001076:	f000 fac4 	bl	8001602 <_ZNKSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE4sizeEv>
 800107a:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800107c:	2b00      	cmp	r3, #0
 800107e:	d013      	beq.n	80010a8 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x66>
 8001080:	68bc      	ldr	r4, [r7, #8]
 8001082:	68b8      	ldr	r0, [r7, #8]
 8001084:	f000 fac9 	bl	800161a <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 8001088:	4603      	mov	r3, r0
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fad0 	bl	8001632 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001092:	4603      	mov	r3, r0
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	4619      	mov	r1, r3
 8001098:	4620      	mov	r0, r4
 800109a:	f7ff fe13 	bl	8000cc4 <_ZNKSt4lessI5StateEclERKS0_S3_>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x66>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x68>
 80010a8:	2300      	movs	r3, #0
	  if (size() > 0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00c      	beq.n	80010c8 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	68b8      	ldr	r0, [r7, #8]
 80010b4:	f000 fab1 	bl	800161a <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f000 fac2 	bl	800164a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80010c6:	e0db      	b.n	8001280 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fad1 	bl	8001676 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 80010d4:	e0d4      	b.n	8001280 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80010d6:	68bc      	ldr	r4, [r7, #8]
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 faa9 	bl	8001632 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	6839      	ldr	r1, [r7, #0]
 80010e6:	4620      	mov	r0, r4
 80010e8:	f7ff fdec 	bl	8000cc4 <_ZNKSt4lessI5StateEclERKS0_S3_>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d057      	beq.n	80011a2 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x160>
	  iterator __before = __pos;
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80010f6:	69bc      	ldr	r4, [r7, #24]
 80010f8:	68b8      	ldr	r0, [r7, #8]
 80010fa:	f000 fb41 	bl	8001780 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 80010fe:	4603      	mov	r3, r0
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	429c      	cmp	r4, r3
 8001104:	bf0c      	ite	eq
 8001106:	2301      	moveq	r3, #1
 8001108:	2300      	movne	r3, #0
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00d      	beq.n	800112c <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8001110:	68b8      	ldr	r0, [r7, #8]
 8001112:	f000 fb35 	bl	8001780 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 8001116:	4604      	mov	r4, r0
 8001118:	68b8      	ldr	r0, [r7, #8]
 800111a:	f000 fb31 	bl	8001780 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4621      	mov	r1, r4
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 fb37 	bl	8001798 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800112a:	e0a9      	b.n	8001280 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800112c:	68bc      	ldr	r4, [r7, #8]
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fb49 	bl	80017ca <_ZNSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEmmEv>
 8001138:	4603      	mov	r3, r0
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fa78 	bl	8001632 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001142:	4603      	mov	r3, r0
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	4619      	mov	r1, r3
 8001148:	4620      	mov	r0, r4
 800114a:	f7ff fdbb 	bl	8000cc4 <_ZNKSt4lessI5StateEclERKS0_S3_>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d01f      	beq.n	8001194 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff febb 	bl	8000ed2 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf0c      	ite	eq
 8001162:	2301      	moveq	r3, #1
 8001164:	2300      	movne	r3, #0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00a      	beq.n	8001182 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x140>
		return _Res(0, __before._M_node);
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
 8001170:	f107 0214 	add.w	r2, r7, #20
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	4619      	mov	r1, r3
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f000 fa65 	bl	800164a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001180:	e07e      	b.n	8001280 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8001182:	f107 0218 	add.w	r2, r7, #24
 8001186:	f107 0318 	add.w	r3, r7, #24
 800118a:	4619      	mov	r1, r3
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 fb03 	bl	8001798 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001192:	e075      	b.n	8001280 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fa6b 	bl	8001676 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 80011a0:	e06e      	b.n	8001280 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80011a2:	68bc      	ldr	r4, [r7, #8]
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fa43 	bl	8001632 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80011ac:	4603      	mov	r3, r0
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4620      	mov	r0, r4
 80011b4:	f7ff fd86 	bl	8000cc4 <_ZNKSt4lessI5StateEclERKS0_S3_>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d056      	beq.n	800126c <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x22a>
	  iterator __after = __pos;
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80011c2:	69bc      	ldr	r4, [r7, #24]
 80011c4:	68b8      	ldr	r0, [r7, #8]
 80011c6:	f000 fa28 	bl	800161a <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 80011ca:	4603      	mov	r3, r0
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	429c      	cmp	r4, r3
 80011d0:	bf0c      	ite	eq
 80011d2:	2301      	moveq	r3, #1
 80011d4:	2300      	movne	r3, #0
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00c      	beq.n	80011f6 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
 80011e0:	68b8      	ldr	r0, [r7, #8]
 80011e2:	f000 fa1a 	bl	800161a <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	4619      	mov	r1, r3
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 fa2b 	bl	800164a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80011f4:	e044      	b.n	8001280 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80011f6:	68bc      	ldr	r4, [r7, #8]
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 faf5 	bl	80017ec <_ZNSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEppEv>
 8001202:	4603      	mov	r3, r0
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fa13 	bl	8001632 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	6839      	ldr	r1, [r7, #0]
 8001212:	4620      	mov	r0, r4
 8001214:	f7ff fd56 	bl	8000cc4 <_ZNKSt4lessI5StateEclERKS0_S3_>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d01f      	beq.n	800125e <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fe56 	bl	8000ed2 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	bf0c      	ite	eq
 800122c:	2301      	moveq	r3, #1
 800122e:	2300      	movne	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00a      	beq.n	800124c <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 8001236:	2300      	movs	r3, #0
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
 800123a:	f107 0218 	add.w	r2, r7, #24
 800123e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001242:	4619      	mov	r1, r3
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f000 fa00 	bl	800164a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800124a:	e019      	b.n	8001280 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800124c:	f107 0210 	add.w	r2, r7, #16
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4619      	mov	r1, r3
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f000 fa9e 	bl	8001798 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800125c:	e010      	b.n	8001280 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fa06 	bl	8001676 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800126a:	e009      	b.n	8001280 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001270:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001274:	f107 0318 	add.w	r3, r7, #24
 8001278:	4619      	mov	r1, r3
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 fac7 	bl	800180e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	3734      	adds	r7, #52	; 0x34
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}

08001288 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 fad2 	bl	800183a <_ZNKSt13_Rb_tree_nodeISt4pairIK5StateS1_EE9_M_valptrEv>
 8001296:	4602      	mov	r2, r0
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f881 	bl	80013a6 <_ZNKSt10_Select1stISt4pairIK5StateS1_EEclERKS3_>
 80012a4:	4603      	mov	r3, r0
      }
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80012ae:	b5b0      	push	{r4, r5, r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d117      	bne.n	80012f2 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f000 f8f6 	bl	80014b4 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d010      	beq.n	80012f2 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80012d0:	68fc      	ldr	r4, [r7, #12]
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f7ff ffd8 	bl	8001288 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80012d8:	4605      	mov	r5, r0
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f9a9 	bl	8001632 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4629      	mov	r1, r5
 80012e6:	4620      	mov	r0, r4
 80012e8:	f7ff fcec 	bl	8000cc4 <_ZNKSt4lessI5StateEclERKS0_S3_>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x48>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x4a>
 80012f6:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80012f8:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80012fe:	7df8      	ldrb	r0, [r7, #23]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6839      	ldr	r1, [r7, #0]
 8001304:	f006 fdc9 	bl	8007e9a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	6839      	ldr	r1, [r7, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f805 	bl	8001328 <_ZNSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEC1EPSt18_Rb_tree_node_base>
 800131e:	693b      	ldr	r3, [r7, #16]
    }
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bdb0      	pop	{r4, r5, r7, pc}

08001328 <_ZNSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK5StateS3_EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEEONSt16remove_referenceIT_E4typeEOS9_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_ZNSaISt13_Rb_tree_nodeISt4pairIK5StateS1_EEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800137c:	6839      	ldr	r1, [r7, #0]
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 fa69 	bl	8001856 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK5StateS3_EEEC1ERKS7_>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_ZNSt20_Rb_tree_key_compareISt4lessI5StateEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
      { }
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_ZNKSt10_Select1stISt4pairIK5StateS1_EEclERKS3_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_ZSt7forwardIRKSt4pairIK5StateS1_EEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d11a      	bne.n	800141e <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f000 f863 	bl	80014b4 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 80013ee:	4602      	mov	r2, r0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80013f6:	68fc      	ldr	r4, [r7, #12]
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	6839      	ldr	r1, [r7, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ffd1 	bl	80013a6 <_ZNKSt10_Select1stISt4pairIK5StateS1_EEclERKS3_>
 8001404:	4605      	mov	r5, r0
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f913 	bl	8001632 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	4629      	mov	r1, r5
 8001412:	4620      	mov	r0, r4
 8001414:	f7ff fc56 	bl	8000cc4 <_ZNKSt4lessI5StateEclERKS0_S3_>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 8001422:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8001424:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8001426:	6838      	ldr	r0, [r7, #0]
 8001428:	f7ff ffc9 	bl	80013be <_ZSt7forwardIRKSt4pairIK5StateS1_EEOT_RNSt16remove_referenceIS6_E4typeE>
 800142c:	4603      	mov	r3, r0
 800142e:	4619      	mov	r1, r3
 8001430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001432:	f000 fa1c 	bl	800186e <_ZNKSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 8001436:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800143c:	7ff8      	ldrb	r0, [r7, #31]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	69b9      	ldr	r1, [r7, #24]
 8001442:	f006 fd2a 	bl	8007e9a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	69b9      	ldr	r1, [r7, #24]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff66 	bl	8001328 <_ZNSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEC1EPSt18_Rb_tree_node_base>
 800145c:	697b      	ldr	r3, [r7, #20]
      }
 800145e:	4618      	mov	r0, r3
 8001460:	3720      	adds	r7, #32
 8001462:	46bd      	mov	sp, r7
 8001464:	bdb0      	pop	{r4, r5, r7, pc}

08001466 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001466:	b590      	push	{r4, r7, lr}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 fa10 	bl	8001896 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 8001476:	4604      	mov	r4, r0
 8001478:	6838      	ldr	r0, [r7, #0]
 800147a:	f7ff fd81 	bl	8000f80 <_ZNSt13_Rb_tree_nodeISt4pairIK5StateS1_EE9_M_valptrEv>
 800147e:	4603      	mov	r3, r0
 8001480:	4619      	mov	r1, r3
 8001482:	4620      	mov	r0, r4
 8001484:	f000 fa12 	bl	80018ac <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEE7destroyIS4_EEvRS6_PT_>
      }
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bd90      	pop	{r4, r7, pc}

08001490 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f9fb 	bl	8001896 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2201      	movs	r2, #1
 80014a4:	6839      	ldr	r1, [r7, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fa0c 	bl	80018c4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEE10deallocateERS6_PS5_j>
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3304      	adds	r3, #4
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80014da:	e01a      	b.n	8001512 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80014dc:	68fc      	ldr	r4, [r7, #12]
 80014de:	68b8      	ldr	r0, [r7, #8]
 80014e0:	f7ff fed2 	bl	8001288 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80014e4:	4603      	mov	r3, r0
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	4620      	mov	r0, r4
 80014ec:	f7ff fbea 	bl	8000cc4 <_ZNKSt4lessI5StateEclERKS0_S3_>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f083 0301 	eor.w	r3, r3, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x3e>
	  __y = __x, __x = _S_left(__x);
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	68b8      	ldr	r0, [r7, #8]
 8001502:	f7ff fcf2 	bl	8000eea <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001506:	60b8      	str	r0, [r7, #8]
 8001508:	e003      	b.n	8001512 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x46>
	  __x = _S_right(__x);
 800150a:	68b8      	ldr	r0, [r7, #8]
 800150c:	f7ff fce1 	bl	8000ed2 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001510:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1e1      	bne.n	80014dc <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x10>
      return iterator(__y);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ff02 	bl	8001328 <_ZNSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEC1EPSt18_Rb_tree_node_base>
 8001524:	697b      	ldr	r3, [r7, #20]
    }
 8001526:	4618      	mov	r0, r3
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}

0800152e <_ZN9__gnu_cxx16__aligned_membufISt4pairIK5StateS2_EE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f9e3 	bl	8001902 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK5StateS2_EE7_M_addrEv>
 800153c:	4603      	mov	r3, r0
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <_ZNSt10_Head_baseILj0ERK5StateLb0EEC1ES2_>:
      constexpr _Head_base(const _Head& __h)
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f992 	bl	8001896 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 8001572:	4603      	mov	r3, r0
 8001574:	2101      	movs	r1, #1
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f9ce 	bl	8001918 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEE8allocateERS6_j>
 800157c:	4603      	mov	r3, r0
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8001586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af02      	add	r7, sp, #8
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	4619      	mov	r1, r3
 800159a:	2018      	movs	r0, #24
 800159c:	f7ff f8b8 	bl	8000710 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 f978 	bl	8001896 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 80015a6:	4604      	mov	r4, r0
 80015a8:	68b8      	ldr	r0, [r7, #8]
 80015aa:	f7ff fce9 	bl	8000f80 <_ZNSt13_Rb_tree_nodeISt4pairIK5StateS1_EE9_M_valptrEv>
 80015ae:	4605      	mov	r5, r0
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff fd02 	bl	8000fba <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80015b6:	4606      	mov	r6, r0
 80015b8:	6838      	ldr	r0, [r7, #0]
 80015ba:	f7ff fd09 	bl	8000fd0 <_ZSt7forwardISt5tupleIJRK5StateEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80015be:	4680      	mov	r8, r0
 80015c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015c2:	f7ff fd10 	bl	8000fe6 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80015c6:	4603      	mov	r3, r0
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	4643      	mov	r3, r8
 80015cc:	4632      	mov	r2, r6
 80015ce:	4629      	mov	r1, r5
 80015d0:	4620      	mov	r0, r4
 80015d2:	f000 f9fe 	bl	80019d2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESC_IJEEEEEvRS6_PT_DpOT0_>
	}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080015e0 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK5StateS1_EE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fe98 	bl	8001328 <_ZNSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEC1EPSt18_Rb_tree_node_base>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <_ZNKSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3310      	adds	r3, #16
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fe24 	bl	8001288 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8001640:	4603      	mov	r3, r0
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f9d3 	bl	8001a0a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001664:	4603      	mov	r3, r0
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001676:	b590      	push	{r4, r7, lr}
 8001678:	b08b      	sub	sp, #44	; 0x2c
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8001682:	68b8      	ldr	r0, [r7, #8]
 8001684:	f7ff fac7 	bl	8000c16 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 8001688:	4603      	mov	r3, r0
 800168a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800168c:	68b8      	ldr	r0, [r7, #8]
 800168e:	f7ff ff11 	bl	80014b4 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 8001692:	4603      	mov	r3, r0
 8001694:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8001696:	2301      	movs	r3, #1
 8001698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800169c:	e01f      	b.n	80016de <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x68>
	  __y = __x;
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80016a2:	68bc      	ldr	r4, [r7, #8]
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fdee 	bl	8001288 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4620      	mov	r0, r4
 80016b4:	f7ff fb06 	bl	8000cc4 <_ZNKSt4lessI5StateEclERKS0_S3_>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80016be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x5c>
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fc0e 	bl	8000eea <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 80016ce:	4603      	mov	r3, r0
 80016d0:	e004      	b.n	80016dc <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x66>
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fbfc 	bl	8000ed2 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 80016da:	4603      	mov	r3, r0
 80016dc:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1dc      	bne.n	800169e <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x28>
      iterator __j = iterator(__y);
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fe1b 	bl	8001328 <_ZNSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80016f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d01d      	beq.n	8001736 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 80016fa:	68b8      	ldr	r0, [r7, #8]
 80016fc:	f000 f990 	bl	8001a20 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE5beginEv>
 8001700:	4603      	mov	r3, r0
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	f107 021c 	add.w	r2, r7, #28
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff faa9 	bl	8000c66 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK5StateS1_EES6_>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d008      	beq.n	800172c <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 800171a:	f107 0214 	add.w	r2, r7, #20
 800171e:	f107 0318 	add.w	r3, r7, #24
 8001722:	4619      	mov	r1, r3
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 f98c 	bl	8001a42 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK5StateS5_EERS1_Lb1EEEOT_OT0_>
 800172a:	e025      	b.n	8001778 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f84a 	bl	80017ca <_ZNSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001736:	68bc      	ldr	r4, [r7, #8]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff79 	bl	8001632 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001740:	4603      	mov	r3, r0
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	4619      	mov	r1, r3
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff fabc 	bl	8000cc4 <_ZNKSt4lessI5StateEclERKS0_S3_>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d008      	beq.n	8001764 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8001752:	f107 0214 	add.w	r2, r7, #20
 8001756:	f107 0318 	add.w	r3, r7, #24
 800175a:	4619      	mov	r1, r3
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 f970 	bl	8001a42 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK5StateS5_EERS1_Lb1EEEOT_OT0_>
 8001762:	e009      	b.n	8001778 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
 8001768:	f107 0220 	add.w	r2, r7, #32
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	4619      	mov	r1, r3
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f000 f84b 	bl	800180e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	372c      	adds	r7, #44	; 0x2c
 800177c:	46bd      	mov	sp, r7
 800177e:	bd90      	pop	{r4, r7, pc}

08001780 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	330c      	adds	r3, #12
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80017a4:	68b8      	ldr	r0, [r7, #8]
 80017a6:	f000 f930 	bl	8001a0a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80017aa:	4603      	mov	r3, r0
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f929 	bl	8001a0a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80017b8:	4603      	mov	r3, r0
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_ZNSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f006 fb5d 	bl	8007e96 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80017dc:	4602      	mov	r2, r0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	601a      	str	r2, [r3, #0]
	return *this;
 80017e2:	687b      	ldr	r3, [r7, #4]
      }
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_ZNSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f006 fb4a 	bl	8007e92 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80017fe:	4602      	mov	r2, r0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	601a      	str	r2, [r3, #0]
	return *this;
 8001804:	687b      	ldr	r3, [r7, #4]
      }
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 800181a:	68b8      	ldr	r0, [r7, #8]
 800181c:	f000 f8f5 	bl	8001a0a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001820:	4603      	mov	r3, r0
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_ZNKSt13_Rb_tree_nodeISt4pairIK5StateS1_EE9_M_valptrEv>:
      _M_valptr() const
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3310      	adds	r3, #16
 8001846:	4618      	mov	r0, r3
 8001848:	f000 f914 	bl	8001a74 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK5StateS2_EE6_M_ptrEv>
 800184c:	4603      	mov	r3, r0
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK5StateS3_EEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <_ZNKSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_GLIBCXX_FWDREF(_Arg) __arg) const
 800186e:	b590      	push	{r4, r7, lr}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681c      	ldr	r4, [r3, #0]
 800187c:	6838      	ldr	r0, [r7, #0]
 800187e:	f7ff fd9e 	bl	80013be <_ZSt7forwardIRKSt4pairIK5StateS1_EEOT_RNSt16remove_referenceIS6_E4typeE>
 8001882:	4603      	mov	r3, r0
 8001884:	4619      	mov	r1, r3
 8001886:	4620      	mov	r0, r4
 8001888:	f000 f900 	bl	8001a8c <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 800188c:	4603      	mov	r3, r0
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bd90      	pop	{r4, r7, pc}

08001896 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEE7destroyIS4_EEvRS6_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
 80018b6:	6838      	ldr	r0, [r7, #0]
 80018b8:	f000 f8ff 	bl	8001aba <_ZSt10destroy_atISt4pairIK5StateS1_EEvPT_>
#endif
	}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 80018dc:	f7fe ff10 	bl	8000700 <_ZSt21is_constant_evaluatedv>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEE10deallocateERS6_PS5_j+0x2a>
	  {
	    ::operator delete(__p);
 80018e6:	69b8      	ldr	r0, [r7, #24]
 80018e8:	f006 fa6a 	bl	8007dc0 <_ZdlPv>
	    return;
 80018ec:	e005      	b.n	80018fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEE10deallocateERS6_PS5_j+0x36>
	  }
#endif
	__allocator_base<_Tp>::deallocate(__p, __n);
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	69b9      	ldr	r1, [r7, #24]
 80018f2:	69f8      	ldr	r0, [r7, #28]
 80018f4:	f000 f95f 	bl	8001bb6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK5StateS3_EEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK5StateS2_EE7_M_addrEv>:
      _M_addr() noexcept
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800192a:	f7fe fee9 	bl	8000700 <_ZSt21is_constant_evaluatedv>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d009      	beq.n	8001948 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEE8allocateERS6_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4618      	mov	r0, r3
 8001940:	f006 fa42 	bl	8007dc8 <_Znwj>
 8001944:	4603      	mov	r3, r0
 8001946:	e006      	b.n	8001956 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEE8allocateERS6_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	68b9      	ldr	r1, [r7, #8]
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 f953 	bl	8001bf8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK5StateS3_EEE8allocateEjPKv>
 8001952:	4603      	mov	r3, r0
 8001954:	bf00      	nop
      { return __a.allocate(__n); }
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_ZNSt5tupleIJRK5StateEEC1EOS3_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f8ad 	bl	8001ace <_ZNSt11_Tuple_implILj0EJRK5StateEEC1EOS3_>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_ZSt12construct_atISt4pairIK5StateS1_EJRKSt21piecewise_construct_tSt5tupleIJRS2_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>:
    }

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 800197e:	b5b0      	push	{r4, r5, r7, lr}
 8001980:	b088      	sub	sp, #32
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	603b      	str	r3, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800198c:	68b8      	ldr	r0, [r7, #8]
 800198e:	f7ff fb14 	bl	8000fba <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fb1c 	bl	8000fd0 <_ZSt7forwardISt5tupleIJRK5StateEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8001998:	4602      	mov	r2, r0
 800199a:	f107 0318 	add.w	r3, r7, #24
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ffdc 	bl	800195e <_ZNSt5tupleIJRK5StateEEC1EOS3_>
 80019a6:	f107 0418 	add.w	r4, r7, #24
 80019aa:	6838      	ldr	r0, [r7, #0]
 80019ac:	f7ff fb1b 	bl	8000fe6 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4619      	mov	r1, r3
 80019b4:	2008      	movs	r0, #8
 80019b6:	f7fe feab 	bl	8000710 <_ZnwjPv>
 80019ba:	4605      	mov	r5, r0
 80019bc:	7f3b      	ldrb	r3, [r7, #28]
 80019be:	4622      	mov	r2, r4
 80019c0:	7d39      	ldrb	r1, [r7, #20]
 80019c2:	4628      	mov	r0, r5
 80019c4:	f000 f8ad 	bl	8001b22 <_ZNSt4pairIK5StateS0_EC1IJRS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>
 80019c8:	462b      	mov	r3, r5
 80019ca:	4618      	mov	r0, r3
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bdb0      	pop	{r4, r5, r7, pc}

080019d2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESC_IJEEEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80019d2:	b5b0      	push	{r4, r5, r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff faea 	bl	8000fba <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80019e6:	4604      	mov	r4, r0
 80019e8:	6838      	ldr	r0, [r7, #0]
 80019ea:	f7ff faf1 	bl	8000fd0 <_ZSt7forwardISt5tupleIJRK5StateEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80019ee:	4605      	mov	r5, r0
 80019f0:	6a38      	ldr	r0, [r7, #32]
 80019f2:	f7ff faf8 	bl	8000fe6 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80019f6:	4603      	mov	r3, r0
 80019f8:	462a      	mov	r2, r5
 80019fa:	4621      	mov	r1, r4
 80019fc:	68b8      	ldr	r0, [r7, #8]
 80019fe:	f7ff ffbe 	bl	800197e <_ZSt12construct_atISt4pairIK5StateS1_EJRKSt21piecewise_construct_tSt5tupleIJRS2_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>
	}
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bdb0      	pop	{r4, r5, r7, pc}

08001a0a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fc78 	bl	8001328 <_ZNSt17_Rb_tree_iteratorISt4pairIK5StateS1_EEC1EPSt18_Rb_tree_node_base>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK5StateS5_EERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001a4e:	68b8      	ldr	r0, [r7, #8]
 8001a50:	f000 f87b 	bl	8001b4a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK5StateS2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001a54:	4603      	mov	r3, r0
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffd4 	bl	8001a0a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001a62:	4603      	mov	r3, r0
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK5StateS2_EE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f86f 	bl	8001b60 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK5StateS2_EE7_M_addrEv>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fd64 	bl	8001564 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>
 8001a9c:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8001a9e:	6838      	ldr	r0, [r7, #0]
 8001aa0:	f7ff fc8d 	bl	80013be <_ZSt7forwardIRKSt4pairIK5StateS1_EEOT_RNSt16remove_referenceIS6_E4typeE>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68f9      	ldr	r1, [r7, #12]
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f863 	bl	8001b76 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
	}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_ZSt10destroy_atISt4pairIK5StateS1_EEvPT_>:
    destroy_at(_Tp* __location)
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
    }
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <_ZNSt11_Tuple_implILj0EJRK5StateEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	601a      	str	r2, [r3, #0]
      { }
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_ZNSt4pairIK5StateS0_EC1IJRS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8001afc:	68b8      	ldr	r0, [r7, #8]
 8001afe:	f000 f8ab 	bl	8001c58 <_ZSt3getILj0EJRK5StateEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 f8b4 	bl	8001c72 <_ZSt7forwardIRK5StateEOT_RNSt16remove_referenceIS3_E4typeE>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	601a      	str	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
      { }
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZNSt4pairIK5StateS0_EC1IJRS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>:
      pair<_T1, _T2>::
 8001b22:	b5b0      	push	{r4, r5, r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af02      	add	r7, sp, #8
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	7239      	strb	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8001b30:	463a      	mov	r2, r7
 8001b32:	f88d 4000 	strb.w	r4, [sp]
 8001b36:	462b      	mov	r3, r5
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7ff ffd7 	bl	8001aee <_ZNSt4pairIK5StateS0_EC1IJRS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>
      { }
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bdb0      	pop	{r4, r5, r7, pc}

08001b4a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK5StateS2_EEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK5StateS2_EE7_M_addrEv>:
      _M_addr() const noexcept
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8001b76:	b5b0      	push	{r4, r5, r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	4619      	mov	r1, r3
 8001b86:	2018      	movs	r0, #24
 8001b88:	f7fe fdc2 	bl	8000710 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7ff fe82 	bl	8001896 <_ZNSt8_Rb_treeI5StateSt4pairIKS0_S0_ESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 8001b92:	4604      	mov	r4, r0
 8001b94:	68b8      	ldr	r0, [r7, #8]
 8001b96:	f7ff f9f3 	bl	8000f80 <_ZNSt13_Rb_tree_nodeISt4pairIK5StateS1_EE9_M_valptrEv>
 8001b9a:	4605      	mov	r5, r0
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff fc0e 	bl	80013be <_ZSt7forwardIRKSt4pairIK5StateS1_EEOT_RNSt16remove_referenceIS6_E4typeE>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f000 f887 	bl	8001cbc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bdb0      	pop	{r4, r5, r7, pc}

08001bb6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK5StateS3_EEE10deallocateEPS6_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4619      	mov	r1, r3
 8001bce:	68b8      	ldr	r0, [r7, #8]
 8001bd0:	f006 f8f8 	bl	8007dc4 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK5StateS3_EEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK5StateS3_EEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	05555555 	.word	0x05555555

08001bf8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK5StateS3_EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f7ff ffe9 	bl	8001bdc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK5StateS3_EEE11_M_max_sizeEv>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	bf8c      	ite	hi
 8001c12:	2301      	movhi	r3, #1
 8001c14:	2300      	movls	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf14      	ite	ne
 8001c1c:	2301      	movne	r3, #1
 8001c1e:	2300      	moveq	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK5StateS3_EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK5StateS3_EEE8allocateEjPKv+0x5c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK5StateS3_EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8001c2e:	f006 f997 	bl	8007f60 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001c32:	f006 f992 	bl	8007f5a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4618      	mov	r0, r3
 8001c42:	f006 f8c1 	bl	8007dc8 <_Znwj>
 8001c46:	4603      	mov	r3, r0
 8001c48:	bf00      	nop
      }
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	0aaaaaaa 	.word	0x0aaaaaaa

08001c58 <_ZSt3getILj0EJRK5StateEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f83c 	bl	8001ce0 <_ZSt12__get_helperILj0ERK5StateJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_ZSt7forwardIRK5StateEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <_ZSt12construct_atISt4pairIK5StateS1_EJRKS3_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8001c88:	b5b0      	push	{r4, r5, r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8001c92:	6838      	ldr	r0, [r7, #0]
 8001c94:	f7ff fb93 	bl	80013be <_ZSt7forwardIRKSt4pairIK5StateS1_EEOT_RNSt16remove_referenceIS6_E4typeE>
 8001c98:	4605      	mov	r5, r0
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	2008      	movs	r0, #8
 8001ca0:	f7fe fd36 	bl	8000710 <_ZnwjPv>
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	4623      	mov	r3, r4
 8001ca8:	462a      	mov	r2, r5
 8001caa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cae:	e883 0003 	stmia.w	r3, {r0, r1}
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bdb0      	pop	{r4, r5, r7, pc}

08001cbc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK5StateS2_EEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff fb78 	bl	80013be <_ZSt7forwardIRKSt4pairIK5StateS1_EEOT_RNSt16remove_referenceIS6_E4typeE>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	68b8      	ldr	r0, [r7, #8]
 8001cd4:	f7ff ffd8 	bl	8001c88 <_ZSt12construct_atISt4pairIK5StateS1_EJRKS3_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>
	}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_ZSt12__get_helperILj0ERK5StateJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f805 	bl	8001cf8 <_ZNSt11_Tuple_implILj0EJRK5StateEE7_M_headERS3_>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <_ZNSt11_Tuple_implILj0EJRK5StateEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f805 	bl	8001d12 <_ZNSt10_Head_baseILj0ERK5StateLb0EE7_M_headERS3_>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <_ZNSt10_Head_baseILj0ERK5StateLb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d36:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001d38:	bf00      	nop
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <main+0xa0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d004      	beq.n	8001d50 <main+0x24>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	1e5a      	subs	r2, r3, #1
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	dcf4      	bgt.n	8001d3a <main+0xe>
  if ( timeout < 0 )
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	da01      	bge.n	8001d5a <main+0x2e>
  {
  Error_Handler();
 8001d56:	f000 fa0f 	bl	8002178 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d5a:	f000 fc9d 	bl	8002698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d5e:	f000 f837 	bl	8001dd0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <main+0xa0>)
 8001d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d68:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <main+0xa0>)
 8001d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <main+0xa0>)
 8001d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001d80:	2000      	movs	r0, #0
 8001d82:	f001 fc4b 	bl	800361c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001d86:	2100      	movs	r1, #0
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f001 fc61 	bl	8003650 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d92:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001d94:	bf00      	nop
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <main+0xa0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d104      	bne.n	8001dac <main+0x80>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	1e5a      	subs	r2, r3, #1
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	dcf4      	bgt.n	8001d96 <main+0x6a>
if ( timeout < 0 )
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	da01      	bge.n	8001db6 <main+0x8a>
{
Error_Handler();
 8001db2:	f000 f9e1 	bl	8002178 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001db6:	f000 f95d 	bl	8002074 <MX_GPIO_Init>
  MX_ETH_Init();
 8001dba:	f000 f891 	bl	8001ee0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001dbe:	f000 f8db 	bl	8001f78 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001dc2:	f000 f925 	bl	8002010 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


  cppMain();
 8001dc6:	f7fe fdd7 	bl	8000978 <cppMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <main+0x9e>
 8001dcc:	58024400 	.word	0x58024400

08001dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b09c      	sub	sp, #112	; 0x70
 8001dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dda:	224c      	movs	r2, #76	; 0x4c
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f006 f98e 	bl	8008100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2220      	movs	r2, #32
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f006 f988 	bl	8008100 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001df0:	2004      	movs	r0, #4
 8001df2:	f001 fd89 	bl	8003908 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <SystemClock_Config+0x104>)
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	4a35      	ldr	r2, [pc, #212]	; (8001ed4 <SystemClock_Config+0x104>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e06:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <SystemClock_Config+0x104>)
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	4b31      	ldr	r3, [pc, #196]	; (8001ed8 <SystemClock_Config+0x108>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e18:	4a2f      	ldr	r2, [pc, #188]	; (8001ed8 <SystemClock_Config+0x108>)
 8001e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <SystemClock_Config+0x108>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e2c:	bf00      	nop
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <SystemClock_Config+0x108>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e3a:	d1f8      	bne.n	8001e2e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <SystemClock_Config+0x10c>)
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	f023 0303 	bic.w	r3, r3, #3
 8001e44:	4a25      	ldr	r2, [pc, #148]	; (8001edc <SystemClock_Config+0x10c>)
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e56:	2302      	movs	r3, #2
 8001e58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001e62:	2312      	movs	r3, #18
 8001e64:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001e66:	2302      	movs	r3, #2
 8001e68:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e72:	230c      	movs	r3, #12
 8001e74:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001e76:	2302      	movs	r3, #2
 8001e78:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001e7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e84:	4618      	mov	r0, r3
 8001e86:	f001 fda9 	bl	80039dc <HAL_RCC_OscConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e90:	f000 f972 	bl	8002178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e94:	233f      	movs	r3, #63	; 0x3f
 8001e96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001ea4:	2340      	movs	r3, #64	; 0x40
 8001ea6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ea8:	2340      	movs	r3, #64	; 0x40
 8001eaa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	2101      	movs	r1, #1
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 f9e8 	bl	8004290 <HAL_RCC_ClockConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001ec6:	f000 f957 	bl	8002178 <Error_Handler>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	3770      	adds	r7, #112	; 0x70
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	58000400 	.word	0x58000400
 8001ed8:	58024800 	.word	0x58024800
 8001edc:	58024400 	.word	0x58024400

08001ee0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <MX_ETH_Init+0x80>)
 8001ee6:	4a1f      	ldr	r2, [pc, #124]	; (8001f64 <MX_ETH_Init+0x84>)
 8001ee8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001eea:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <MX_ETH_Init+0x88>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <MX_ETH_Init+0x88>)
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <MX_ETH_Init+0x88>)
 8001ef8:	22e1      	movs	r2, #225	; 0xe1
 8001efa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <MX_ETH_Init+0x88>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <MX_ETH_Init+0x88>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001f08:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <MX_ETH_Init+0x88>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <MX_ETH_Init+0x80>)
 8001f10:	4a15      	ldr	r2, [pc, #84]	; (8001f68 <MX_ETH_Init+0x88>)
 8001f12:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <MX_ETH_Init+0x80>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_ETH_Init+0x80>)
 8001f1c:	4a13      	ldr	r2, [pc, #76]	; (8001f6c <MX_ETH_Init+0x8c>)
 8001f1e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_ETH_Init+0x80>)
 8001f22:	4a13      	ldr	r2, [pc, #76]	; (8001f70 <MX_ETH_Init+0x90>)
 8001f24:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <MX_ETH_Init+0x80>)
 8001f28:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f2c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001f2e:	480c      	ldr	r0, [pc, #48]	; (8001f60 <MX_ETH_Init+0x80>)
 8001f30:	f000 fd6c 	bl	8002a0c <HAL_ETH_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001f3a:	f000 f91d 	bl	8002178 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001f3e:	2238      	movs	r2, #56	; 0x38
 8001f40:	2100      	movs	r1, #0
 8001f42:	480c      	ldr	r0, [pc, #48]	; (8001f74 <MX_ETH_Init+0x94>)
 8001f44:	f006 f8dc 	bl	8008100 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <MX_ETH_Init+0x94>)
 8001f4a:	2221      	movs	r2, #33	; 0x21
 8001f4c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_ETH_Init+0x94>)
 8001f50:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f54:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <MX_ETH_Init+0x94>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	24000180 	.word	0x24000180
 8001f64:	40028000 	.word	0x40028000
 8001f68:	240007d0 	.word	0x240007d0
 8001f6c:	240000c4 	.word	0x240000c4
 8001f70:	24000064 	.word	0x24000064
 8001f74:	24000148 	.word	0x24000148

08001f78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f7c:	4b22      	ldr	r3, [pc, #136]	; (8002008 <MX_USART3_UART_Init+0x90>)
 8001f7e:	4a23      	ldr	r2, [pc, #140]	; (800200c <MX_USART3_UART_Init+0x94>)
 8001f80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <MX_USART3_UART_Init+0x90>)
 8001f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <MX_USART3_UART_Init+0x90>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <MX_USART3_UART_Init+0x90>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <MX_USART3_UART_Init+0x90>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <MX_USART3_UART_Init+0x90>)
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <MX_USART3_UART_Init+0x90>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <MX_USART3_UART_Init+0x90>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <MX_USART3_UART_Init+0x90>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <MX_USART3_UART_Init+0x90>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <MX_USART3_UART_Init+0x90>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fc0:	4811      	ldr	r0, [pc, #68]	; (8002008 <MX_USART3_UART_Init+0x90>)
 8001fc2:	f004 fb1d 	bl	8006600 <HAL_UART_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001fcc:	f000 f8d4 	bl	8002178 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	480d      	ldr	r0, [pc, #52]	; (8002008 <MX_USART3_UART_Init+0x90>)
 8001fd4:	f005 fb1f 	bl	8007616 <HAL_UARTEx_SetTxFifoThreshold>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001fde:	f000 f8cb 	bl	8002178 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4808      	ldr	r0, [pc, #32]	; (8002008 <MX_USART3_UART_Init+0x90>)
 8001fe6:	f005 fb54 	bl	8007692 <HAL_UARTEx_SetRxFifoThreshold>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ff0:	f000 f8c2 	bl	8002178 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ff4:	4804      	ldr	r0, [pc, #16]	; (8002008 <MX_USART3_UART_Init+0x90>)
 8001ff6:	f005 fad5 	bl	80075a4 <HAL_UARTEx_DisableFifoMode>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002000:	f000 f8ba 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	24000230 	.word	0x24000230
 800200c:	40004800 	.word	0x40004800

08002010 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002014:	4b15      	ldr	r3, [pc, #84]	; (800206c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002016:	4a16      	ldr	r2, [pc, #88]	; (8002070 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002018:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800201c:	2209      	movs	r2, #9
 800201e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002022:	2202      	movs	r2, #2
 8002024:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002028:	2200      	movs	r2, #0
 800202a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800202e:	2202      	movs	r2, #2
 8002030:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002034:	2200      	movs	r2, #0
 8002036:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800203a:	2200      	movs	r2, #0
 800203c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002040:	2200      	movs	r2, #0
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002044:	4b09      	ldr	r3, [pc, #36]	; (800206c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002046:	2201      	movs	r2, #1
 8002048:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800204c:	2201      	movs	r2, #1
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002052:	2200      	movs	r2, #0
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002056:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002058:	f001 fb0e 	bl	8003678 <HAL_PCD_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002062:	f000 f889 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	240002c4 	.word	0x240002c4
 8002070:	40080000 	.word	0x40080000

08002074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	; 0x30
 8002078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
 8002088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800208a:	4b39      	ldr	r3, [pc, #228]	; (8002170 <MX_GPIO_Init+0xfc>)
 800208c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002090:	4a37      	ldr	r2, [pc, #220]	; (8002170 <MX_GPIO_Init+0xfc>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800209a:	4b35      	ldr	r3, [pc, #212]	; (8002170 <MX_GPIO_Init+0xfc>)
 800209c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020a8:	4b31      	ldr	r3, [pc, #196]	; (8002170 <MX_GPIO_Init+0xfc>)
 80020aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ae:	4a30      	ldr	r2, [pc, #192]	; (8002170 <MX_GPIO_Init+0xfc>)
 80020b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b8:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <MX_GPIO_Init+0xfc>)
 80020ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <MX_GPIO_Init+0xfc>)
 80020c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020cc:	4a28      	ldr	r2, [pc, #160]	; (8002170 <MX_GPIO_Init+0xfc>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020d6:	4b26      	ldr	r3, [pc, #152]	; (8002170 <MX_GPIO_Init+0xfc>)
 80020d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e4:	4b22      	ldr	r3, [pc, #136]	; (8002170 <MX_GPIO_Init+0xfc>)
 80020e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ea:	4a21      	ldr	r2, [pc, #132]	; (8002170 <MX_GPIO_Init+0xfc>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <MX_GPIO_Init+0xfc>)
 80020f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <MX_GPIO_Init+0xfc>)
 8002104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002108:	4a19      	ldr	r2, [pc, #100]	; (8002170 <MX_GPIO_Init+0xfc>)
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <MX_GPIO_Init+0xfc>)
 8002114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <MX_GPIO_Init+0xfc>)
 8002122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <MX_GPIO_Init+0xfc>)
 8002128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800212c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <MX_GPIO_Init+0xfc>)
 8002132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	f244 0101 	movw	r1, #16385	; 0x4001
 8002144:	480b      	ldr	r0, [pc, #44]	; (8002174 <MX_GPIO_Init+0x100>)
 8002146:	f001 fa35 	bl	80035b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800214a:	f244 0301 	movw	r3, #16385	; 0x4001
 800214e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002150:	2301      	movs	r3, #1
 8002152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	2300      	movs	r3, #0
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	4619      	mov	r1, r3
 8002162:	4804      	ldr	r0, [pc, #16]	; (8002174 <MX_GPIO_Init+0x100>)
 8002164:	f001 f876 	bl	8003254 <HAL_GPIO_Init>

}
 8002168:	bf00      	nop
 800216a:	3730      	adds	r7, #48	; 0x30
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	58024400 	.word	0x58024400
 8002174:	58020400 	.word	0x58020400

08002178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800217c:	b672      	cpsid	i
}
 800217e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002180:	e7fe      	b.n	8002180 <Error_Handler+0x8>
	...

08002184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_MspInit+0x30>)
 800218c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002190:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_MspInit+0x30>)
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_MspInit+0x30>)
 800219c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	58024400 	.word	0x58024400

080021b8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08e      	sub	sp, #56	; 0x38
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a59      	ldr	r2, [pc, #356]	; (800233c <HAL_ETH_MspInit+0x184>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	f040 80ab 	bne.w	8002332 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80021dc:	4b58      	ldr	r3, [pc, #352]	; (8002340 <HAL_ETH_MspInit+0x188>)
 80021de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021e2:	4a57      	ldr	r2, [pc, #348]	; (8002340 <HAL_ETH_MspInit+0x188>)
 80021e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80021ec:	4b54      	ldr	r3, [pc, #336]	; (8002340 <HAL_ETH_MspInit+0x188>)
 80021ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021f6:	623b      	str	r3, [r7, #32]
 80021f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80021fa:	4b51      	ldr	r3, [pc, #324]	; (8002340 <HAL_ETH_MspInit+0x188>)
 80021fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002200:	4a4f      	ldr	r2, [pc, #316]	; (8002340 <HAL_ETH_MspInit+0x188>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002206:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800220a:	4b4d      	ldr	r3, [pc, #308]	; (8002340 <HAL_ETH_MspInit+0x188>)
 800220c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002218:	4b49      	ldr	r3, [pc, #292]	; (8002340 <HAL_ETH_MspInit+0x188>)
 800221a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800221e:	4a48      	ldr	r2, [pc, #288]	; (8002340 <HAL_ETH_MspInit+0x188>)
 8002220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002224:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002228:	4b45      	ldr	r3, [pc, #276]	; (8002340 <HAL_ETH_MspInit+0x188>)
 800222a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002236:	4b42      	ldr	r3, [pc, #264]	; (8002340 <HAL_ETH_MspInit+0x188>)
 8002238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223c:	4a40      	ldr	r2, [pc, #256]	; (8002340 <HAL_ETH_MspInit+0x188>)
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002246:	4b3e      	ldr	r3, [pc, #248]	; (8002340 <HAL_ETH_MspInit+0x188>)
 8002248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002254:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <HAL_ETH_MspInit+0x188>)
 8002256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225a:	4a39      	ldr	r2, [pc, #228]	; (8002340 <HAL_ETH_MspInit+0x188>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002264:	4b36      	ldr	r3, [pc, #216]	; (8002340 <HAL_ETH_MspInit+0x188>)
 8002266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	4b33      	ldr	r3, [pc, #204]	; (8002340 <HAL_ETH_MspInit+0x188>)
 8002274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002278:	4a31      	ldr	r2, [pc, #196]	; (8002340 <HAL_ETH_MspInit+0x188>)
 800227a:	f043 0302 	orr.w	r3, r3, #2
 800227e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002282:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <HAL_ETH_MspInit+0x188>)
 8002284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_ETH_MspInit+0x188>)
 8002292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002296:	4a2a      	ldr	r2, [pc, #168]	; (8002340 <HAL_ETH_MspInit+0x188>)
 8002298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800229c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <HAL_ETH_MspInit+0x188>)
 80022a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80022ae:	2332      	movs	r3, #50	; 0x32
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022be:	230b      	movs	r3, #11
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c6:	4619      	mov	r1, r3
 80022c8:	481e      	ldr	r0, [pc, #120]	; (8002344 <HAL_ETH_MspInit+0x18c>)
 80022ca:	f000 ffc3 	bl	8003254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80022ce:	2386      	movs	r3, #134	; 0x86
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022de:	230b      	movs	r3, #11
 80022e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	4619      	mov	r1, r3
 80022e8:	4817      	ldr	r0, [pc, #92]	; (8002348 <HAL_ETH_MspInit+0x190>)
 80022ea:	f000 ffb3 	bl	8003254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002300:	230b      	movs	r3, #11
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002308:	4619      	mov	r1, r3
 800230a:	4810      	ldr	r0, [pc, #64]	; (800234c <HAL_ETH_MspInit+0x194>)
 800230c:	f000 ffa2 	bl	8003254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002310:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002322:	230b      	movs	r3, #11
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232a:	4619      	mov	r1, r3
 800232c:	4808      	ldr	r0, [pc, #32]	; (8002350 <HAL_ETH_MspInit+0x198>)
 800232e:	f000 ff91 	bl	8003254 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002332:	bf00      	nop
 8002334:	3738      	adds	r7, #56	; 0x38
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40028000 	.word	0x40028000
 8002340:	58024400 	.word	0x58024400
 8002344:	58020800 	.word	0x58020800
 8002348:	58020000 	.word	0x58020000
 800234c:	58020400 	.word	0x58020400
 8002350:	58021800 	.word	0x58021800

08002354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b0ba      	sub	sp, #232	; 0xe8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	22c0      	movs	r2, #192	; 0xc0
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f005 fec3 	bl	8008100 <memset>
  if(huart->Instance==USART3)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a27      	ldr	r2, [pc, #156]	; (800241c <HAL_UART_MspInit+0xc8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d146      	bne.n	8002412 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002384:	f04f 0202 	mov.w	r2, #2
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002390:	2300      	movs	r3, #0
 8002392:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002396:	f107 0310 	add.w	r3, r7, #16
 800239a:	4618      	mov	r0, r3
 800239c:	f002 fb04 	bl	80049a8 <HAL_RCCEx_PeriphCLKConfig>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023a6:	f7ff fee7 	bl	8002178 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_UART_MspInit+0xcc>)
 80023ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b0:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <HAL_UART_MspInit+0xcc>)
 80023b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023ba:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_UART_MspInit+0xcc>)
 80023bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_UART_MspInit+0xcc>)
 80023ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ce:	4a14      	ldr	r2, [pc, #80]	; (8002420 <HAL_UART_MspInit+0xcc>)
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_UART_MspInit+0xcc>)
 80023da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80023e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ee:	2302      	movs	r3, #2
 80023f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002400:	2307      	movs	r3, #7
 8002402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002406:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <HAL_UART_MspInit+0xd0>)
 800240e:	f000 ff21 	bl	8003254 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002412:	bf00      	nop
 8002414:	37e8      	adds	r7, #232	; 0xe8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40004800 	.word	0x40004800
 8002420:	58024400 	.word	0x58024400
 8002424:	58020c00 	.word	0x58020c00

08002428 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b0ba      	sub	sp, #232	; 0xe8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	22c0      	movs	r2, #192	; 0xc0
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f005 fe59 	bl	8008100 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a38      	ldr	r2, [pc, #224]	; (8002534 <HAL_PCD_MspInit+0x10c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d169      	bne.n	800252c <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002458:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8002464:	2301      	movs	r3, #1
 8002466:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8002468:	2312      	movs	r3, #18
 800246a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800246c:	2302      	movs	r3, #2
 800246e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8002470:	2303      	movs	r3, #3
 8002472:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002474:	2302      	movs	r3, #2
 8002476:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002478:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800247c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 800247e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002482:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800248c:	f107 0310 	add.w	r3, r7, #16
 8002490:	4618      	mov	r0, r3
 8002492:	f002 fa89 	bl	80049a8 <HAL_RCCEx_PeriphCLKConfig>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 800249c:	f7ff fe6c 	bl	8002178 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80024a0:	f001 fa8c 	bl	80039bc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a4:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_PCD_MspInit+0x110>)
 80024a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024aa:	4a23      	ldr	r2, [pc, #140]	; (8002538 <HAL_PCD_MspInit+0x110>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024b4:	4b20      	ldr	r3, [pc, #128]	; (8002538 <HAL_PCD_MspInit+0x110>)
 80024b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80024c2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80024c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80024dc:	230a      	movs	r3, #10
 80024de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024e6:	4619      	mov	r1, r3
 80024e8:	4814      	ldr	r0, [pc, #80]	; (800253c <HAL_PCD_MspInit+0x114>)
 80024ea:	f000 feb3 	bl	8003254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002502:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002506:	4619      	mov	r1, r3
 8002508:	480c      	ldr	r0, [pc, #48]	; (800253c <HAL_PCD_MspInit+0x114>)
 800250a:	f000 fea3 	bl	8003254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_PCD_MspInit+0x110>)
 8002510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002514:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_PCD_MspInit+0x110>)
 8002516:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800251a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_PCD_MspInit+0x110>)
 8002520:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800252c:	bf00      	nop
 800252e:	37e8      	adds	r7, #232	; 0xe8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40080000 	.word	0x40080000
 8002538:	58024400 	.word	0x58024400
 800253c:	58020000 	.word	0x58020000

08002540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <NMI_Handler+0x4>

08002546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254a:	e7fe      	b.n	800254a <HardFault_Handler+0x4>

0800254c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <MemManage_Handler+0x4>

08002552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002556:	e7fe      	b.n	8002556 <BusFault_Handler+0x4>

08002558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <UsageFault_Handler+0x4>

0800255e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258c:	f000 f8f6 	bl	800277c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return 1;
 8002598:	2301      	movs	r3, #1
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <_kill>:

int _kill(int pid, int sig)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025ae:	f005 fe03 	bl	80081b8 <__errno>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2216      	movs	r2, #22
 80025b6:	601a      	str	r2, [r3, #0]
  return -1;
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <_exit>:

void _exit (int status)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ffe7 	bl	80025a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025d6:	e7fe      	b.n	80025d6 <_exit+0x12>

080025d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e0:	4a14      	ldr	r2, [pc, #80]	; (8002634 <_sbrk+0x5c>)
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <_sbrk+0x60>)
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ec:	4b13      	ldr	r3, [pc, #76]	; (800263c <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <_sbrk+0x64>)
 80025f6:	4a12      	ldr	r2, [pc, #72]	; (8002640 <_sbrk+0x68>)
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <_sbrk+0x64>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	429a      	cmp	r2, r3
 8002606:	d207      	bcs.n	8002618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002608:	f005 fdd6 	bl	80081b8 <__errno>
 800260c:	4603      	mov	r3, r0
 800260e:	220c      	movs	r2, #12
 8002610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
 8002616:	e009      	b.n	800262c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <_sbrk+0x64>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800261e:	4b07      	ldr	r3, [pc, #28]	; (800263c <_sbrk+0x64>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	4a05      	ldr	r2, [pc, #20]	; (800263c <_sbrk+0x64>)
 8002628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800262a:	68fb      	ldr	r3, [r7, #12]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	24080000 	.word	0x24080000
 8002638:	00000400 	.word	0x00000400
 800263c:	240007d8 	.word	0x240007d8
 8002640:	24000930 	.word	0x24000930

08002644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800267c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002648:	f7fd ffc4 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800264c:	480c      	ldr	r0, [pc, #48]	; (8002680 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800264e:	490d      	ldr	r1, [pc, #52]	; (8002684 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002650:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002654:	e002      	b.n	800265c <LoopCopyDataInit>

08002656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265a:	3304      	adds	r3, #4

0800265c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800265c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002660:	d3f9      	bcc.n	8002656 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002664:	4c0a      	ldr	r4, [pc, #40]	; (8002690 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002668:	e001      	b.n	800266e <LoopFillZerobss>

0800266a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800266c:	3204      	adds	r2, #4

0800266e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002670:	d3fb      	bcc.n	800266a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002672:	f005 fda7 	bl	80081c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002676:	f7ff fb59 	bl	8001d2c <main>
  bx  lr
 800267a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800267c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002680:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002684:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8002688:	0800831c 	.word	0x0800831c
  ldr r2, =_sbss
 800268c:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8002690:	2400092c 	.word	0x2400092c

08002694 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002694:	e7fe      	b.n	8002694 <ADC3_IRQHandler>
	...

08002698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800269e:	2003      	movs	r0, #3
 80026a0:	f000 f982 	bl	80029a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026a4:	f001 ffaa 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <HAL_Init+0x68>)
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	4913      	ldr	r1, [pc, #76]	; (8002704 <HAL_Init+0x6c>)
 80026b6:	5ccb      	ldrb	r3, [r1, r3]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
 80026c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <HAL_Init+0x68>)
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	4a0e      	ldr	r2, [pc, #56]	; (8002704 <HAL_Init+0x6c>)
 80026cc:	5cd3      	ldrb	r3, [r2, r3]
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
 80026d8:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <HAL_Init+0x70>)
 80026da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026dc:	4a0b      	ldr	r2, [pc, #44]	; (800270c <HAL_Init+0x74>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026e2:	2000      	movs	r0, #0
 80026e4:	f000 f814 	bl	8002710 <HAL_InitTick>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e002      	b.n	80026f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026f2:	f7ff fd47 	bl	8002184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	58024400 	.word	0x58024400
 8002704:	080082c0 	.word	0x080082c0
 8002708:	24000004 	.word	0x24000004
 800270c:	24000000 	.word	0x24000000

08002710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002718:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_InitTick+0x60>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e021      	b.n	8002768 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <HAL_InitTick+0x64>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_InitTick+0x60>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	4619      	mov	r1, r3
 800272e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002732:	fbb3 f3f1 	udiv	r3, r3, r1
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	4618      	mov	r0, r3
 800273c:	f000 f959 	bl	80029f2 <HAL_SYSTICK_Config>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e00e      	b.n	8002768 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b0f      	cmp	r3, #15
 800274e:	d80a      	bhi.n	8002766 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002750:	2200      	movs	r2, #0
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	f04f 30ff 	mov.w	r0, #4294967295
 8002758:	f000 f931 	bl	80029be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800275c:	4a06      	ldr	r2, [pc, #24]	; (8002778 <HAL_InitTick+0x68>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	24000010 	.word	0x24000010
 8002774:	24000000 	.word	0x24000000
 8002778:	2400000c 	.word	0x2400000c

0800277c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_IncTick+0x20>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_IncTick+0x24>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4413      	add	r3, r2
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_IncTick+0x24>)
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	24000010 	.word	0x24000010
 80027a0:	240007dc 	.word	0x240007dc

080027a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return uwTick;
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <HAL_GetTick+0x14>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	240007dc 	.word	0x240007dc

080027bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff ffee 	bl	80027a4 <HAL_GetTick>
 80027c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d005      	beq.n	80027e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_Delay+0x44>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027e2:	bf00      	nop
 80027e4:	f7ff ffde 	bl	80027a4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d8f7      	bhi.n	80027e4 <HAL_Delay+0x28>
  {
  }
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	24000010 	.word	0x24000010

08002804 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_GetREVID+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0c1b      	lsrs	r3, r3, #16
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	5c001000 	.word	0x5c001000

0800281c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800282c:	4904      	ldr	r1, [pc, #16]	; (8002840 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	58000400 	.word	0x58000400

08002844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <__NVIC_SetPriorityGrouping+0x40>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002860:	4013      	ands	r3, r2
 8002862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <__NVIC_SetPriorityGrouping+0x44>)
 800286e:	4313      	orrs	r3, r2
 8002870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002872:	4a04      	ldr	r2, [pc, #16]	; (8002884 <__NVIC_SetPriorityGrouping+0x40>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	60d3      	str	r3, [r2, #12]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00
 8002888:	05fa0000 	.word	0x05fa0000

0800288c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	0a1b      	lsrs	r3, r3, #8
 8002896:	f003 0307 	and.w	r3, r3, #7
}
 800289a:	4618      	mov	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db0a      	blt.n	80028d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	; (80028f4 <__NVIC_SetPriority+0x4c>)
 80028c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d0:	e00a      	b.n	80028e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4908      	ldr	r1, [pc, #32]	; (80028f8 <__NVIC_SetPriority+0x50>)
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3b04      	subs	r3, #4
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	440b      	add	r3, r1
 80028e6:	761a      	strb	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f1c3 0307 	rsb	r3, r3, #7
 8002916:	2b04      	cmp	r3, #4
 8002918:	bf28      	it	cs
 800291a:	2304      	movcs	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	2b06      	cmp	r3, #6
 8002924:	d902      	bls.n	800292c <NVIC_EncodePriority+0x30>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b03      	subs	r3, #3
 800292a:	e000      	b.n	800292e <NVIC_EncodePriority+0x32>
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43d9      	mvns	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	4313      	orrs	r3, r2
         );
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	; 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002974:	d301      	bcc.n	800297a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002976:	2301      	movs	r3, #1
 8002978:	e00f      	b.n	800299a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297a:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <SysTick_Config+0x40>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002982:	210f      	movs	r1, #15
 8002984:	f04f 30ff 	mov.w	r0, #4294967295
 8002988:	f7ff ff8e 	bl	80028a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <SysTick_Config+0x40>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002992:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <SysTick_Config+0x40>)
 8002994:	2207      	movs	r2, #7
 8002996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	e000e010 	.word	0xe000e010

080029a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff47 	bl	8002844 <__NVIC_SetPriorityGrouping>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029cc:	f7ff ff5e 	bl	800288c <__NVIC_GetPriorityGrouping>
 80029d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	6978      	ldr	r0, [r7, #20]
 80029d8:	f7ff ff90 	bl	80028fc <NVIC_EncodePriority>
 80029dc:	4602      	mov	r2, r0
 80029de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff5f 	bl	80028a8 <__NVIC_SetPriority>
}
 80029ea:	bf00      	nop
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff ffb2 	bl	8002964 <SysTick_Config>
 8002a00:	4603      	mov	r3, r0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e0cf      	b.n	8002bbe <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d106      	bne.n	8002a36 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2223      	movs	r2, #35	; 0x23
 8002a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fbc1 	bl	80021b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a36:	4b64      	ldr	r3, [pc, #400]	; (8002bc8 <HAL_ETH_Init+0x1bc>)
 8002a38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a3c:	4a62      	ldr	r2, [pc, #392]	; (8002bc8 <HAL_ETH_Init+0x1bc>)
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a46:	4b60      	ldr	r3, [pc, #384]	; (8002bc8 <HAL_ETH_Init+0x1bc>)
 8002a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	7a1b      	ldrb	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d103      	bne.n	8002a64 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7ff fedd 	bl	800281c <HAL_SYSCFG_ETHInterfaceSelect>
 8002a62:	e003      	b.n	8002a6c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002a64:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002a68:	f7ff fed8 	bl	800281c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002a6c:	4b57      	ldr	r3, [pc, #348]	; (8002bcc <HAL_ETH_Init+0x1c0>)
 8002a6e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a88:	f7ff fe8c 	bl	80027a4 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a8e:	e011      	b.n	8002ab4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002a90:	f7ff fe88 	bl	80027a4 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a9e:	d909      	bls.n	8002ab4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	22e0      	movs	r2, #224	; 0xe0
 8002aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e084      	b.n	8002bbe <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1e4      	bne.n	8002a90 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f886 	bl	8002bd8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002acc:	f001 ff10 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4a3f      	ldr	r2, [pc, #252]	; (8002bd0 <HAL_ETH_Init+0x1c4>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	0c9a      	lsrs	r2, r3, #18
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	3a01      	subs	r2, #1
 8002ae0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fa71 	bl	8002fcc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002af6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b06:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	22e0      	movs	r2, #224	; 0xe0
 8002b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e049      	b.n	8002bbe <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b32:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002b36:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <HAL_ETH_Init+0x1c8>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6952      	ldr	r2, [r2, #20]
 8002b3e:	0051      	lsls	r1, r2, #1
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b4a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fad9 	bl	8003106 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fb1f 	bl	8003198 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	3305      	adds	r3, #5
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	021a      	lsls	r2, r3, #8
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	3303      	adds	r3, #3
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	061a      	lsls	r2, r3, #24
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	3302      	adds	r3, #2
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	3301      	adds	r3, #1
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b98:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002ba6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002ba8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2210      	movs	r2, #16
 8002bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	58024400 	.word	0x58024400
 8002bcc:	58000400 	.word	0x58000400
 8002bd0:	431bde83 	.word	0x431bde83
 8002bd4:	ffff8001 	.word	0xffff8001

08002bd8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002bf2:	f001 fe7d 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8002bf6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4a1e      	ldr	r2, [pc, #120]	; (8002c74 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d908      	bls.n	8002c12 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d804      	bhi.n	8002c12 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e027      	b.n	8002c62 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4a18      	ldr	r2, [pc, #96]	; (8002c78 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d908      	bls.n	8002c2c <HAL_ETH_SetMDIOClockRange+0x54>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d204      	bcs.n	8002c2c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e01a      	b.n	8002c62 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d303      	bcc.n	8002c3c <HAL_ETH_SetMDIOClockRange+0x64>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d911      	bls.n	8002c60 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4a10      	ldr	r2, [pc, #64]	; (8002c80 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d908      	bls.n	8002c56 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4a0f      	ldr	r2, [pc, #60]	; (8002c84 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d804      	bhi.n	8002c56 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	e005      	b.n	8002c62 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	e000      	b.n	8002c62 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002c60:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	01312cff 	.word	0x01312cff
 8002c78:	02160ebf 	.word	0x02160ebf
 8002c7c:	03938700 	.word	0x03938700
 8002c80:	05f5e0ff 	.word	0x05f5e0ff
 8002c84:	08f0d17f 	.word	0x08f0d17f

08002c88 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002c9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	791b      	ldrb	r3, [r3, #4]
 8002ca0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002ca2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	7b1b      	ldrb	r3, [r3, #12]
 8002ca8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002caa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	7b5b      	ldrb	r3, [r3, #13]
 8002cb0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002cb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	7b9b      	ldrb	r3, [r3, #14]
 8002cb8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002cba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	7bdb      	ldrb	r3, [r3, #15]
 8002cc0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002cc2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	7c12      	ldrb	r2, [r2, #16]
 8002cc8:	2a00      	cmp	r2, #0
 8002cca:	d102      	bne.n	8002cd2 <ETH_SetMACConfig+0x4a>
 8002ccc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002cd0:	e000      	b.n	8002cd4 <ETH_SetMACConfig+0x4c>
 8002cd2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002cd4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	7c52      	ldrb	r2, [r2, #17]
 8002cda:	2a00      	cmp	r2, #0
 8002cdc:	d102      	bne.n	8002ce4 <ETH_SetMACConfig+0x5c>
 8002cde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ce2:	e000      	b.n	8002ce6 <ETH_SetMACConfig+0x5e>
 8002ce4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002ce6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	7c9b      	ldrb	r3, [r3, #18]
 8002cec:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002cee:	431a      	orrs	r2, r3
               macconf->Speed |
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002cf4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002cfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	7f1b      	ldrb	r3, [r3, #28]
 8002d00:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002d02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	7f5b      	ldrb	r3, [r3, #29]
 8002d08:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002d0a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	7f92      	ldrb	r2, [r2, #30]
 8002d10:	2a00      	cmp	r2, #0
 8002d12:	d102      	bne.n	8002d1a <ETH_SetMACConfig+0x92>
 8002d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d18:	e000      	b.n	8002d1c <ETH_SetMACConfig+0x94>
 8002d1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002d1c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	7fdb      	ldrb	r3, [r3, #31]
 8002d22:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002d24:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d2c:	2a00      	cmp	r2, #0
 8002d2e:	d102      	bne.n	8002d36 <ETH_SetMACConfig+0xae>
 8002d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d34:	e000      	b.n	8002d38 <ETH_SetMACConfig+0xb0>
 8002d36:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002d38:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d46:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002d48:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b56      	ldr	r3, [pc, #344]	; (8002eb4 <ETH_SetMACConfig+0x22c>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	68f9      	ldr	r1, [r7, #12]
 8002d62:	430b      	orrs	r3, r1
 8002d64:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d72:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d74:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d7c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d86:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d88:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002d90:	2a00      	cmp	r2, #0
 8002d92:	d102      	bne.n	8002d9a <ETH_SetMACConfig+0x112>
 8002d94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d98:	e000      	b.n	8002d9c <ETH_SetMACConfig+0x114>
 8002d9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d9c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <ETH_SetMACConfig+0x230>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	68f9      	ldr	r1, [r7, #12]
 8002db6:	430b      	orrs	r3, r1
 8002db8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	4b3a      	ldr	r3, [pc, #232]	; (8002ebc <ETH_SetMACConfig+0x234>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	68f9      	ldr	r1, [r7, #12]
 8002dda:	430b      	orrs	r3, r1
 8002ddc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002de4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002dea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002df2:	2a00      	cmp	r2, #0
 8002df4:	d101      	bne.n	8002dfa <ETH_SetMACConfig+0x172>
 8002df6:	2280      	movs	r2, #128	; 0x80
 8002df8:	e000      	b.n	8002dfc <ETH_SetMACConfig+0x174>
 8002dfa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002dfc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e02:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e0e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002e12:	4013      	ands	r3, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	68f9      	ldr	r1, [r7, #12]
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002e24:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002e2c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3a:	f023 0103 	bic.w	r1, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002e52:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002e6e:	2a00      	cmp	r2, #0
 8002e70:	d101      	bne.n	8002e76 <ETH_SetMACConfig+0x1ee>
 8002e72:	2240      	movs	r2, #64	; 0x40
 8002e74:	e000      	b.n	8002e78 <ETH_SetMACConfig+0x1f0>
 8002e76:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002e78:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002e80:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002e8a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002e98:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	00048083 	.word	0x00048083
 8002eb8:	c0f88000 	.word	0xc0f88000
 8002ebc:	fffffef0 	.word	0xfffffef0

08002ec0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <ETH_SetDMAConfig+0xf8>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	6811      	ldr	r1, [r2, #0]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ee6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	791b      	ldrb	r3, [r3, #4]
 8002eec:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ef2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	7b1b      	ldrb	r3, [r3, #12]
 8002ef8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	4b2c      	ldr	r3, [pc, #176]	; (8002fbc <ETH_SetDMAConfig+0xfc>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	68f9      	ldr	r1, [r7, #12]
 8002f12:	430b      	orrs	r3, r1
 8002f14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f18:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	7b5b      	ldrb	r3, [r3, #13]
 8002f1e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f30:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002f34:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <ETH_SetDMAConfig+0x100>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	68f9      	ldr	r1, [r7, #12]
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f44:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	7d1b      	ldrb	r3, [r3, #20]
 8002f50:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f52:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	7f5b      	ldrb	r3, [r3, #29]
 8002f58:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f66:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <ETH_SetDMAConfig+0x104>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	68f9      	ldr	r1, [r7, #12]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f7a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	7f1b      	ldrb	r3, [r3, #28]
 8002f82:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f94:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <ETH_SetDMAConfig+0x108>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	68f9      	ldr	r1, [r7, #12]
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fa8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	ffff87fd 	.word	0xffff87fd
 8002fbc:	ffff2ffe 	.word	0xffff2ffe
 8002fc0:	fffec000 	.word	0xfffec000
 8002fc4:	ffc0efef 	.word	0xffc0efef
 8002fc8:	7fc0ffff 	.word	0x7fc0ffff

08002fcc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b0a4      	sub	sp, #144	; 0x90
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800300c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800300e:	2300      	movs	r3, #0
 8003010:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003014:	2300      	movs	r3, #0
 8003016:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003018:	2300      	movs	r3, #0
 800301a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800301e:	2300      	movs	r3, #0
 8003020:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003024:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003028:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800302a:	2300      	movs	r3, #0
 800302c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003030:	2300      	movs	r3, #0
 8003032:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800303a:	2300      	movs	r3, #0
 800303c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003040:	2300      	movs	r3, #0
 8003042:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003046:	2300      	movs	r3, #0
 8003048:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800304a:	2300      	movs	r3, #0
 800304c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800304e:	2300      	movs	r3, #0
 8003050:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003052:	2300      	movs	r3, #0
 8003054:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003064:	2320      	movs	r3, #32
 8003066:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003070:	2300      	movs	r3, #0
 8003072:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003076:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800307c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003080:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003082:	2300      	movs	r3, #0
 8003084:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003088:	2302      	movs	r3, #2
 800308a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003094:	2300      	movs	r3, #0
 8003096:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80030a6:	2300      	movs	r3, #0
 80030a8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80030b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030b4:	4619      	mov	r1, r3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fde6 	bl	8002c88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80030bc:	2301      	movs	r3, #1
 80030be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80030c0:	2301      	movs	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80030d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80030dc:	2300      	movs	r3, #0
 80030de:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80030ec:	f44f 7306 	mov.w	r3, #536	; 0x218
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030f2:	f107 0308 	add.w	r3, r7, #8
 80030f6:	4619      	mov	r1, r3
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff fee1 	bl	8002ec0 <ETH_SetDMAConfig>
}
 80030fe:	bf00      	nop
 8003100:	3790      	adds	r7, #144	; 0x90
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003106:	b480      	push	{r7}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e01d      	b.n	8003150 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68d9      	ldr	r1, [r3, #12]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	440b      	add	r3, r1
 8003124:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2200      	movs	r2, #0
 8003130:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2200      	movs	r2, #0
 8003136:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2200      	movs	r2, #0
 800313c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	3206      	adds	r2, #6
 8003146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3301      	adds	r3, #1
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d9de      	bls.n	8003114 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003164:	461a      	mov	r2, r3
 8003166:	2303      	movs	r3, #3
 8003168:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003178:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003188:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e023      	b.n	80031ee <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6919      	ldr	r1, [r3, #16]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2200      	movs	r2, #0
 80031c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2200      	movs	r2, #0
 80031ce:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2200      	movs	r2, #0
 80031d4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2200      	movs	r2, #0
 80031da:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	3212      	adds	r2, #18
 80031e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3301      	adds	r3, #1
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d9d8      	bls.n	80031a6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800321a:	461a      	mov	r2, r3
 800321c:	2303      	movs	r3, #3
 800321e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003242:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	; 0x24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003262:	4b89      	ldr	r3, [pc, #548]	; (8003488 <HAL_GPIO_Init+0x234>)
 8003264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003266:	e194      	b.n	8003592 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	2101      	movs	r1, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa01 f303 	lsl.w	r3, r1, r3
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 8186 	beq.w	800358c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d005      	beq.n	8003298 <HAL_GPIO_Init+0x44>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d130      	bne.n	80032fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2203      	movs	r2, #3
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ce:	2201      	movs	r2, #1
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f003 0201 	and.w	r2, r3, #1
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b03      	cmp	r3, #3
 8003304:	d017      	beq.n	8003336 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	2203      	movs	r2, #3
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d123      	bne.n	800338a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	08da      	lsrs	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3208      	adds	r2, #8
 800334a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	220f      	movs	r2, #15
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	08da      	lsrs	r2, r3, #3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3208      	adds	r2, #8
 8003384:	69b9      	ldr	r1, [r7, #24]
 8003386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	2203      	movs	r2, #3
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 0203 	and.w	r2, r3, #3
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80e0 	beq.w	800358c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033cc:	4b2f      	ldr	r3, [pc, #188]	; (800348c <HAL_GPIO_Init+0x238>)
 80033ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033d2:	4a2e      	ldr	r2, [pc, #184]	; (800348c <HAL_GPIO_Init+0x238>)
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033dc:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_GPIO_Init+0x238>)
 80033de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ea:	4a29      	ldr	r2, [pc, #164]	; (8003490 <HAL_GPIO_Init+0x23c>)
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	3302      	adds	r3, #2
 80033f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	220f      	movs	r2, #15
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a20      	ldr	r2, [pc, #128]	; (8003494 <HAL_GPIO_Init+0x240>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d052      	beq.n	80034bc <HAL_GPIO_Init+0x268>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1f      	ldr	r2, [pc, #124]	; (8003498 <HAL_GPIO_Init+0x244>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d031      	beq.n	8003482 <HAL_GPIO_Init+0x22e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1e      	ldr	r2, [pc, #120]	; (800349c <HAL_GPIO_Init+0x248>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d02b      	beq.n	800347e <HAL_GPIO_Init+0x22a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <HAL_GPIO_Init+0x24c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d025      	beq.n	800347a <HAL_GPIO_Init+0x226>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a1c      	ldr	r2, [pc, #112]	; (80034a4 <HAL_GPIO_Init+0x250>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01f      	beq.n	8003476 <HAL_GPIO_Init+0x222>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a1b      	ldr	r2, [pc, #108]	; (80034a8 <HAL_GPIO_Init+0x254>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d019      	beq.n	8003472 <HAL_GPIO_Init+0x21e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a1a      	ldr	r2, [pc, #104]	; (80034ac <HAL_GPIO_Init+0x258>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_GPIO_Init+0x21a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a19      	ldr	r2, [pc, #100]	; (80034b0 <HAL_GPIO_Init+0x25c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00d      	beq.n	800346a <HAL_GPIO_Init+0x216>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <HAL_GPIO_Init+0x260>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <HAL_GPIO_Init+0x212>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a17      	ldr	r2, [pc, #92]	; (80034b8 <HAL_GPIO_Init+0x264>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_GPIO_Init+0x20e>
 800345e:	2309      	movs	r3, #9
 8003460:	e02d      	b.n	80034be <HAL_GPIO_Init+0x26a>
 8003462:	230a      	movs	r3, #10
 8003464:	e02b      	b.n	80034be <HAL_GPIO_Init+0x26a>
 8003466:	2308      	movs	r3, #8
 8003468:	e029      	b.n	80034be <HAL_GPIO_Init+0x26a>
 800346a:	2307      	movs	r3, #7
 800346c:	e027      	b.n	80034be <HAL_GPIO_Init+0x26a>
 800346e:	2306      	movs	r3, #6
 8003470:	e025      	b.n	80034be <HAL_GPIO_Init+0x26a>
 8003472:	2305      	movs	r3, #5
 8003474:	e023      	b.n	80034be <HAL_GPIO_Init+0x26a>
 8003476:	2304      	movs	r3, #4
 8003478:	e021      	b.n	80034be <HAL_GPIO_Init+0x26a>
 800347a:	2303      	movs	r3, #3
 800347c:	e01f      	b.n	80034be <HAL_GPIO_Init+0x26a>
 800347e:	2302      	movs	r3, #2
 8003480:	e01d      	b.n	80034be <HAL_GPIO_Init+0x26a>
 8003482:	2301      	movs	r3, #1
 8003484:	e01b      	b.n	80034be <HAL_GPIO_Init+0x26a>
 8003486:	bf00      	nop
 8003488:	58000080 	.word	0x58000080
 800348c:	58024400 	.word	0x58024400
 8003490:	58000400 	.word	0x58000400
 8003494:	58020000 	.word	0x58020000
 8003498:	58020400 	.word	0x58020400
 800349c:	58020800 	.word	0x58020800
 80034a0:	58020c00 	.word	0x58020c00
 80034a4:	58021000 	.word	0x58021000
 80034a8:	58021400 	.word	0x58021400
 80034ac:	58021800 	.word	0x58021800
 80034b0:	58021c00 	.word	0x58021c00
 80034b4:	58022000 	.word	0x58022000
 80034b8:	58022400 	.word	0x58022400
 80034bc:	2300      	movs	r3, #0
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	f002 0203 	and.w	r2, r2, #3
 80034c4:	0092      	lsls	r2, r2, #2
 80034c6:	4093      	lsls	r3, r2
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034ce:	4938      	ldr	r1, [pc, #224]	; (80035b0 <HAL_GPIO_Init+0x35c>)
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	089b      	lsrs	r3, r3, #2
 80034d4:	3302      	adds	r3, #2
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	43db      	mvns	r3, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4013      	ands	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003502:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800350a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	3301      	adds	r3, #1
 8003590:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	f47f ae63 	bne.w	8003268 <HAL_GPIO_Init+0x14>
  }
}
 80035a2:	bf00      	nop
 80035a4:	bf00      	nop
 80035a6:	3724      	adds	r7, #36	; 0x24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	58000400 	.word	0x58000400

080035b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	807b      	strh	r3, [r7, #2]
 80035c0:	4613      	mov	r3, r2
 80035c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035c4:	787b      	ldrb	r3, [r7, #1]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ca:	887a      	ldrh	r2, [r7, #2]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80035d0:	e003      	b.n	80035da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035d2:	887b      	ldrh	r3, [r7, #2]
 80035d4:	041a      	lsls	r2, r3, #16
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	619a      	str	r2, [r3, #24]
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b085      	sub	sp, #20
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035f8:	887a      	ldrh	r2, [r7, #2]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4013      	ands	r3, r2
 80035fe:	041a      	lsls	r2, r3, #16
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	43d9      	mvns	r1, r3
 8003604:	887b      	ldrh	r3, [r7, #2]
 8003606:	400b      	ands	r3, r1
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	619a      	str	r2, [r3, #24]
}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003624:	4a08      	ldr	r2, [pc, #32]	; (8003648 <HAL_HSEM_FastTake+0x2c>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3320      	adds	r3, #32
 800362a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362e:	4a07      	ldr	r2, [pc, #28]	; (800364c <HAL_HSEM_FastTake+0x30>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d101      	bne.n	8003638 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	e000      	b.n	800363a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	58026400 	.word	0x58026400
 800364c:	80000300 	.word	0x80000300

08003650 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800365a:	4906      	ldr	r1, [pc, #24]	; (8003674 <HAL_HSEM_Release+0x24>)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	58026400 	.word	0x58026400

08003678 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800367a:	b08f      	sub	sp, #60	; 0x3c
 800367c:	af0a      	add	r7, sp, #40	; 0x28
 800367e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e116      	b.n	80038b8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d106      	bne.n	80036aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7fe febf 	bl	8002428 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2203      	movs	r2, #3
 80036ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d102      	bne.n	80036c4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f004 f8dd 	bl	8007888 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	687e      	ldr	r6, [r7, #4]
 80036d6:	466d      	mov	r5, sp
 80036d8:	f106 0410 	add.w	r4, r6, #16
 80036dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80036ec:	1d33      	adds	r3, r6, #4
 80036ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036f0:	6838      	ldr	r0, [r7, #0]
 80036f2:	f004 f85b 	bl	80077ac <USB_CoreInit>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0d7      	b.n	80038b8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f004 f8cb 	bl	80078aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003714:	2300      	movs	r3, #0
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	e04a      	b.n	80037b0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800371a:	7bfa      	ldrb	r2, [r7, #15]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	333d      	adds	r3, #61	; 0x3d
 800372a:	2201      	movs	r2, #1
 800372c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	333c      	adds	r3, #60	; 0x3c
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	b298      	uxth	r0, r3
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	3356      	adds	r3, #86	; 0x56
 8003756:	4602      	mov	r2, r0
 8003758:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	3340      	adds	r3, #64	; 0x40
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	3344      	adds	r3, #68	; 0x44
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	3348      	adds	r3, #72	; 0x48
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	334c      	adds	r3, #76	; 0x4c
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	3301      	adds	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d3af      	bcc.n	800371a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	73fb      	strb	r3, [r7, #15]
 80037be:	e044      	b.n	800384a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037c0:	7bfa      	ldrb	r2, [r7, #15]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037d6:	7bfa      	ldrb	r2, [r7, #15]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	3301      	adds	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	d3b5      	bcc.n	80037c0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	687e      	ldr	r6, [r7, #4]
 800385c:	466d      	mov	r5, sp
 800385e:	f106 0410 	add.w	r4, r6, #16
 8003862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800386a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800386e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003872:	1d33      	adds	r3, r6, #4
 8003874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003876:	6838      	ldr	r0, [r7, #0]
 8003878:	f004 f864 	bl	8007944 <USB_DevInit>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2202      	movs	r2, #2
 8003886:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e014      	b.n	80038b8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d102      	bne.n	80038ac <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f80a 	bl	80038c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f004 fa22 	bl	8007cfa <USB_DevDisconnect>

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_PCDEx_ActivateLPM+0x44>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	10000003 	.word	0x10000003

08003908 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003910:	4b29      	ldr	r3, [pc, #164]	; (80039b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	2b06      	cmp	r3, #6
 800391a:	d00a      	beq.n	8003932 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800391c:	4b26      	ldr	r3, [pc, #152]	; (80039b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	429a      	cmp	r2, r3
 8003928:	d001      	beq.n	800392e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e040      	b.n	80039b0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e03e      	b.n	80039b0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003932:	4b21      	ldr	r3, [pc, #132]	; (80039b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800393a:	491f      	ldr	r1, [pc, #124]	; (80039b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4313      	orrs	r3, r2
 8003940:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003942:	f7fe ff2f 	bl	80027a4 <HAL_GetTick>
 8003946:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003948:	e009      	b.n	800395e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800394a:	f7fe ff2b 	bl	80027a4 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003958:	d901      	bls.n	800395e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e028      	b.n	80039b0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800395e:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800396a:	d1ee      	bne.n	800394a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b1e      	cmp	r3, #30
 8003970:	d008      	beq.n	8003984 <HAL_PWREx_ConfigSupply+0x7c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b2e      	cmp	r3, #46	; 0x2e
 8003976:	d005      	beq.n	8003984 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b1d      	cmp	r3, #29
 800397c:	d002      	beq.n	8003984 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b2d      	cmp	r3, #45	; 0x2d
 8003982:	d114      	bne.n	80039ae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003984:	f7fe ff0e 	bl	80027a4 <HAL_GetTick>
 8003988:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800398a:	e009      	b.n	80039a0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800398c:	f7fe ff0a 	bl	80027a4 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800399a:	d901      	bls.n	80039a0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e007      	b.n	80039b0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_PWREx_ConfigSupply+0xb0>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ac:	d1ee      	bne.n	800398c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	58024800 	.word	0x58024800

080039bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4a04      	ldr	r2, [pc, #16]	; (80039d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80039c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ca:	60d3      	str	r3, [r2, #12]
}
 80039cc:	bf00      	nop
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	58024800 	.word	0x58024800

080039dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08c      	sub	sp, #48	; 0x30
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d102      	bne.n	80039f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f000 bc48 	b.w	8004280 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8088 	beq.w	8003b0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fe:	4b99      	ldr	r3, [pc, #612]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a08:	4b96      	ldr	r3, [pc, #600]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	2b10      	cmp	r3, #16
 8003a12:	d007      	beq.n	8003a24 <HAL_RCC_OscConfig+0x48>
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	2b18      	cmp	r3, #24
 8003a18:	d111      	bne.n	8003a3e <HAL_RCC_OscConfig+0x62>
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d10c      	bne.n	8003a3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a24:	4b8f      	ldr	r3, [pc, #572]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d06d      	beq.n	8003b0c <HAL_RCC_OscConfig+0x130>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d169      	bne.n	8003b0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	f000 bc21 	b.w	8004280 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a46:	d106      	bne.n	8003a56 <HAL_RCC_OscConfig+0x7a>
 8003a48:	4b86      	ldr	r3, [pc, #536]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a85      	ldr	r2, [pc, #532]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	e02e      	b.n	8003ab4 <HAL_RCC_OscConfig+0xd8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x9c>
 8003a5e:	4b81      	ldr	r3, [pc, #516]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a80      	ldr	r2, [pc, #512]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	4b7e      	ldr	r3, [pc, #504]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a7d      	ldr	r2, [pc, #500]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e01d      	b.n	8003ab4 <HAL_RCC_OscConfig+0xd8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0xc0>
 8003a82:	4b78      	ldr	r3, [pc, #480]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a77      	ldr	r2, [pc, #476]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	4b75      	ldr	r3, [pc, #468]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a74      	ldr	r2, [pc, #464]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e00b      	b.n	8003ab4 <HAL_RCC_OscConfig+0xd8>
 8003a9c:	4b71      	ldr	r3, [pc, #452]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a70      	ldr	r2, [pc, #448]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	4b6e      	ldr	r3, [pc, #440]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a6d      	ldr	r2, [pc, #436]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d013      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fe fe72 	bl	80027a4 <HAL_GetTick>
 8003ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac4:	f7fe fe6e 	bl	80027a4 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	; 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e3d4      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ad6:	4b63      	ldr	r3, [pc, #396]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0xe8>
 8003ae2:	e014      	b.n	8003b0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fe fe5e 	bl	80027a4 <HAL_GetTick>
 8003ae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fe fe5a 	bl	80027a4 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e3c0      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003afe:	4b59      	ldr	r3, [pc, #356]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x110>
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 80ca 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b1c:	4b51      	ldr	r3, [pc, #324]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b26:	4b4f      	ldr	r3, [pc, #316]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <HAL_RCC_OscConfig+0x166>
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	2b18      	cmp	r3, #24
 8003b36:	d156      	bne.n	8003be6 <HAL_RCC_OscConfig+0x20a>
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d151      	bne.n	8003be6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b42:	4b48      	ldr	r3, [pc, #288]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_RCC_OscConfig+0x17e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e392      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b5a:	4b42      	ldr	r3, [pc, #264]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 0219 	bic.w	r2, r3, #25
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	493f      	ldr	r1, [pc, #252]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fe fe1a 	bl	80027a4 <HAL_GetTick>
 8003b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b74:	f7fe fe16 	bl	80027a4 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e37c      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b86:	4b37      	ldr	r3, [pc, #220]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b92:	f7fe fe37 	bl	8002804 <HAL_GetREVID>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d817      	bhi.n	8003bd0 <HAL_RCC_OscConfig+0x1f4>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d108      	bne.n	8003bba <HAL_RCC_OscConfig+0x1de>
 8003ba8:	4b2e      	ldr	r3, [pc, #184]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003bb0:	4a2c      	ldr	r2, [pc, #176]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bb8:	e07a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bba:	4b2a      	ldr	r3, [pc, #168]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	031b      	lsls	r3, r3, #12
 8003bc8:	4926      	ldr	r1, [pc, #152]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bce:	e06f      	b.n	8003cb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd0:	4b24      	ldr	r3, [pc, #144]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	061b      	lsls	r3, r3, #24
 8003bde:	4921      	ldr	r1, [pc, #132]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be4:	e064      	b.n	8003cb0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d047      	beq.n	8003c7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bee:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 0219 	bic.w	r2, r3, #25
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	491a      	ldr	r1, [pc, #104]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fe fdd0 	bl	80027a4 <HAL_GetTick>
 8003c04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c08:	f7fe fdcc 	bl	80027a4 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e332      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c1a:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c26:	f7fe fded 	bl	8002804 <HAL_GetREVID>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d819      	bhi.n	8003c68 <HAL_RCC_OscConfig+0x28c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	d108      	bne.n	8003c4e <HAL_RCC_OscConfig+0x272>
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c44:	4a07      	ldr	r2, [pc, #28]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c4a:	6053      	str	r3, [r2, #4]
 8003c4c:	e030      	b.n	8003cb0 <HAL_RCC_OscConfig+0x2d4>
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	031b      	lsls	r3, r3, #12
 8003c5c:	4901      	ldr	r1, [pc, #4]	; (8003c64 <HAL_RCC_OscConfig+0x288>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]
 8003c62:	e025      	b.n	8003cb0 <HAL_RCC_OscConfig+0x2d4>
 8003c64:	58024400 	.word	0x58024400
 8003c68:	4b9a      	ldr	r3, [pc, #616]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	4997      	ldr	r1, [pc, #604]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
 8003c7c:	e018      	b.n	8003cb0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c7e:	4b95      	ldr	r3, [pc, #596]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a94      	ldr	r2, [pc, #592]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8a:	f7fe fd8b 	bl	80027a4 <HAL_GetTick>
 8003c8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c92:	f7fe fd87 	bl	80027a4 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e2ed      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ca4:	4b8b      	ldr	r3, [pc, #556]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f0      	bne.n	8003c92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80a9 	beq.w	8003e10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cbe:	4b85      	ldr	r3, [pc, #532]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cc8:	4b82      	ldr	r3, [pc, #520]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d007      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x308>
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b18      	cmp	r3, #24
 8003cd8:	d13a      	bne.n	8003d50 <HAL_RCC_OscConfig+0x374>
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d135      	bne.n	8003d50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ce4:	4b7b      	ldr	r3, [pc, #492]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_OscConfig+0x320>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	2b80      	cmp	r3, #128	; 0x80
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e2c1      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cfc:	f7fe fd82 	bl	8002804 <HAL_GetREVID>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d817      	bhi.n	8003d3a <HAL_RCC_OscConfig+0x35e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d108      	bne.n	8003d24 <HAL_RCC_OscConfig+0x348>
 8003d12:	4b70      	ldr	r3, [pc, #448]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d1a:	4a6e      	ldr	r2, [pc, #440]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003d1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d22:	e075      	b.n	8003e10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d24:	4b6b      	ldr	r3, [pc, #428]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	069b      	lsls	r3, r3, #26
 8003d32:	4968      	ldr	r1, [pc, #416]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d38:	e06a      	b.n	8003e10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d3a:	4b66      	ldr	r3, [pc, #408]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	061b      	lsls	r3, r3, #24
 8003d48:	4962      	ldr	r1, [pc, #392]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d4e:	e05f      	b.n	8003e10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d042      	beq.n	8003dde <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d58:	4b5e      	ldr	r3, [pc, #376]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a5d      	ldr	r2, [pc, #372]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fe fd1e 	bl	80027a4 <HAL_GetTick>
 8003d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d6c:	f7fe fd1a 	bl	80027a4 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e280      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d7e:	4b55      	ldr	r3, [pc, #340]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d8a:	f7fe fd3b 	bl	8002804 <HAL_GetREVID>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d817      	bhi.n	8003dc8 <HAL_RCC_OscConfig+0x3ec>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d108      	bne.n	8003db2 <HAL_RCC_OscConfig+0x3d6>
 8003da0:	4b4c      	ldr	r3, [pc, #304]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003da8:	4a4a      	ldr	r2, [pc, #296]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003daa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dae:	6053      	str	r3, [r2, #4]
 8003db0:	e02e      	b.n	8003e10 <HAL_RCC_OscConfig+0x434>
 8003db2:	4b48      	ldr	r3, [pc, #288]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	069b      	lsls	r3, r3, #26
 8003dc0:	4944      	ldr	r1, [pc, #272]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
 8003dc6:	e023      	b.n	8003e10 <HAL_RCC_OscConfig+0x434>
 8003dc8:	4b42      	ldr	r3, [pc, #264]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	061b      	lsls	r3, r3, #24
 8003dd6:	493f      	ldr	r1, [pc, #252]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60cb      	str	r3, [r1, #12]
 8003ddc:	e018      	b.n	8003e10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003dde:	4b3d      	ldr	r3, [pc, #244]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a3c      	ldr	r2, [pc, #240]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7fe fcdb 	bl	80027a4 <HAL_GetTick>
 8003dee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003df2:	f7fe fcd7 	bl	80027a4 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e23d      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e04:	4b33      	ldr	r3, [pc, #204]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f0      	bne.n	8003df2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d036      	beq.n	8003e8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d019      	beq.n	8003e58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e24:	4b2b      	ldr	r3, [pc, #172]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e28:	4a2a      	ldr	r2, [pc, #168]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e30:	f7fe fcb8 	bl	80027a4 <HAL_GetTick>
 8003e34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e38:	f7fe fcb4 	bl	80027a4 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e21a      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e4a:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x45c>
 8003e56:	e018      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e58:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5c:	4a1d      	ldr	r2, [pc, #116]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003e5e:	f023 0301 	bic.w	r3, r3, #1
 8003e62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7fe fc9e 	bl	80027a4 <HAL_GetTick>
 8003e68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e6c:	f7fe fc9a 	bl	80027a4 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e200      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e7e:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d039      	beq.n	8003f0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01c      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a0c      	ldr	r2, [pc, #48]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ea8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003eaa:	f7fe fc7b 	bl	80027a4 <HAL_GetTick>
 8003eae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eb2:	f7fe fc77 	bl	80027a4 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e1dd      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <HAL_RCC_OscConfig+0x4f8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x4d6>
 8003ed0:	e01b      	b.n	8003f0a <HAL_RCC_OscConfig+0x52e>
 8003ed2:	bf00      	nop
 8003ed4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ed8:	4b9b      	ldr	r3, [pc, #620]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a9a      	ldr	r2, [pc, #616]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ee2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ee4:	f7fe fc5e 	bl	80027a4 <HAL_GetTick>
 8003ee8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eec:	f7fe fc5a 	bl	80027a4 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e1c0      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003efe:	4b92      	ldr	r3, [pc, #584]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 8081 	beq.w	800401a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f18:	4b8c      	ldr	r3, [pc, #560]	; (800414c <HAL_RCC_OscConfig+0x770>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a8b      	ldr	r2, [pc, #556]	; (800414c <HAL_RCC_OscConfig+0x770>)
 8003f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f24:	f7fe fc3e 	bl	80027a4 <HAL_GetTick>
 8003f28:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2c:	f7fe fc3a 	bl	80027a4 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e1a0      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f3e:	4b83      	ldr	r3, [pc, #524]	; (800414c <HAL_RCC_OscConfig+0x770>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d106      	bne.n	8003f60 <HAL_RCC_OscConfig+0x584>
 8003f52:	4b7d      	ldr	r3, [pc, #500]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	4a7c      	ldr	r2, [pc, #496]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5e:	e02d      	b.n	8003fbc <HAL_RCC_OscConfig+0x5e0>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10c      	bne.n	8003f82 <HAL_RCC_OscConfig+0x5a6>
 8003f68:	4b77      	ldr	r3, [pc, #476]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a76      	ldr	r2, [pc, #472]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
 8003f74:	4b74      	ldr	r3, [pc, #464]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f78:	4a73      	ldr	r2, [pc, #460]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003f7a:	f023 0304 	bic.w	r3, r3, #4
 8003f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f80:	e01c      	b.n	8003fbc <HAL_RCC_OscConfig+0x5e0>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x5c8>
 8003f8a:	4b6f      	ldr	r3, [pc, #444]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	4a6e      	ldr	r2, [pc, #440]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003f90:	f043 0304 	orr.w	r3, r3, #4
 8003f94:	6713      	str	r3, [r2, #112]	; 0x70
 8003f96:	4b6c      	ldr	r3, [pc, #432]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	4a6b      	ldr	r2, [pc, #428]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa2:	e00b      	b.n	8003fbc <HAL_RCC_OscConfig+0x5e0>
 8003fa4:	4b68      	ldr	r3, [pc, #416]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	4a67      	ldr	r2, [pc, #412]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb0:	4b65      	ldr	r3, [pc, #404]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4a64      	ldr	r2, [pc, #400]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003fb6:	f023 0304 	bic.w	r3, r3, #4
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d015      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc4:	f7fe fbee 	bl	80027a4 <HAL_GetTick>
 8003fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fcc:	f7fe fbea 	bl	80027a4 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e14e      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fe2:	4b59      	ldr	r3, [pc, #356]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0ee      	beq.n	8003fcc <HAL_RCC_OscConfig+0x5f0>
 8003fee:	e014      	b.n	800401a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7fe fbd8 	bl	80027a4 <HAL_GetTick>
 8003ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f7fe fbd4 	bl	80027a4 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e138      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800400e:	4b4e      	ldr	r3, [pc, #312]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1ee      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 812d 	beq.w	800427e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004024:	4b48      	ldr	r3, [pc, #288]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800402c:	2b18      	cmp	r3, #24
 800402e:	f000 80bd 	beq.w	80041ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	2b02      	cmp	r3, #2
 8004038:	f040 809e 	bne.w	8004178 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403c:	4b42      	ldr	r3, [pc, #264]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a41      	ldr	r2, [pc, #260]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8004042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fe fbac 	bl	80027a4 <HAL_GetTick>
 800404c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004050:	f7fe fba8 	bl	80027a4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e10e      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004062:	4b39      	ldr	r3, [pc, #228]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800406e:	4b36      	ldr	r3, [pc, #216]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8004070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004072:	4b37      	ldr	r3, [pc, #220]	; (8004150 <HAL_RCC_OscConfig+0x774>)
 8004074:	4013      	ands	r3, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800407e:	0112      	lsls	r2, r2, #4
 8004080:	430a      	orrs	r2, r1
 8004082:	4931      	ldr	r1, [pc, #196]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8004084:	4313      	orrs	r3, r2
 8004086:	628b      	str	r3, [r1, #40]	; 0x28
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	3b01      	subs	r3, #1
 800408e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004096:	3b01      	subs	r3, #1
 8004098:	025b      	lsls	r3, r3, #9
 800409a:	b29b      	uxth	r3, r3
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	3b01      	subs	r3, #1
 80040a4:	041b      	lsls	r3, r3, #16
 80040a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b0:	3b01      	subs	r3, #1
 80040b2:	061b      	lsls	r3, r3, #24
 80040b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040b8:	4923      	ldr	r1, [pc, #140]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80040be:	4b22      	ldr	r3, [pc, #136]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	4a21      	ldr	r2, [pc, #132]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 80040c4:	f023 0301 	bic.w	r3, r3, #1
 80040c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040ca:	4b1f      	ldr	r3, [pc, #124]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 80040cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ce:	4b21      	ldr	r3, [pc, #132]	; (8004154 <HAL_RCC_OscConfig+0x778>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040d6:	00d2      	lsls	r2, r2, #3
 80040d8:	491b      	ldr	r1, [pc, #108]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80040de:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	f023 020c 	bic.w	r2, r3, #12
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	4917      	ldr	r1, [pc, #92]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80040f0:	4b15      	ldr	r3, [pc, #84]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	f023 0202 	bic.w	r2, r3, #2
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fc:	4912      	ldr	r1, [pc, #72]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004102:	4b11      	ldr	r3, [pc, #68]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	4a10      	ldr	r2, [pc, #64]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8004108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800410c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	4a0d      	ldr	r2, [pc, #52]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8004114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004118:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	4a0a      	ldr	r2, [pc, #40]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8004120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004126:	4b08      	ldr	r3, [pc, #32]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	4a07      	ldr	r2, [pc, #28]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004132:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a04      	ldr	r2, [pc, #16]	; (8004148 <HAL_RCC_OscConfig+0x76c>)
 8004138:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800413c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fe fb31 	bl	80027a4 <HAL_GetTick>
 8004142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004144:	e011      	b.n	800416a <HAL_RCC_OscConfig+0x78e>
 8004146:	bf00      	nop
 8004148:	58024400 	.word	0x58024400
 800414c:	58024800 	.word	0x58024800
 8004150:	fffffc0c 	.word	0xfffffc0c
 8004154:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004158:	f7fe fb24 	bl	80027a4 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e08a      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCC_OscConfig+0x8ac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x77c>
 8004176:	e082      	b.n	800427e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004178:	4b43      	ldr	r3, [pc, #268]	; (8004288 <HAL_RCC_OscConfig+0x8ac>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a42      	ldr	r2, [pc, #264]	; (8004288 <HAL_RCC_OscConfig+0x8ac>)
 800417e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fe fb0e 	bl	80027a4 <HAL_GetTick>
 8004188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418c:	f7fe fb0a 	bl	80027a4 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e070      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800419e:	4b3a      	ldr	r3, [pc, #232]	; (8004288 <HAL_RCC_OscConfig+0x8ac>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x7b0>
 80041aa:	e068      	b.n	800427e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80041ac:	4b36      	ldr	r3, [pc, #216]	; (8004288 <HAL_RCC_OscConfig+0x8ac>)
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80041b2:	4b35      	ldr	r3, [pc, #212]	; (8004288 <HAL_RCC_OscConfig+0x8ac>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d031      	beq.n	8004224 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f003 0203 	and.w	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d12a      	bne.n	8004224 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d122      	bne.n	8004224 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d11a      	bne.n	8004224 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	0a5b      	lsrs	r3, r3, #9
 80041f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d111      	bne.n	8004224 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	0c1b      	lsrs	r3, r3, #16
 8004204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800420e:	429a      	cmp	r2, r3
 8004210:	d108      	bne.n	8004224 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	0e1b      	lsrs	r3, r3, #24
 8004216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e02b      	b.n	8004280 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004228:	4b17      	ldr	r3, [pc, #92]	; (8004288 <HAL_RCC_OscConfig+0x8ac>)
 800422a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422c:	08db      	lsrs	r3, r3, #3
 800422e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004232:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	429a      	cmp	r2, r3
 800423c:	d01f      	beq.n	800427e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_RCC_OscConfig+0x8ac>)
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	4a11      	ldr	r2, [pc, #68]	; (8004288 <HAL_RCC_OscConfig+0x8ac>)
 8004244:	f023 0301 	bic.w	r3, r3, #1
 8004248:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800424a:	f7fe faab 	bl	80027a4 <HAL_GetTick>
 800424e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004250:	bf00      	nop
 8004252:	f7fe faa7 	bl	80027a4 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	4293      	cmp	r3, r2
 800425c:	d0f9      	beq.n	8004252 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800425e:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <HAL_RCC_OscConfig+0x8ac>)
 8004260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004262:	4b0a      	ldr	r3, [pc, #40]	; (800428c <HAL_RCC_OscConfig+0x8b0>)
 8004264:	4013      	ands	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800426a:	00d2      	lsls	r2, r2, #3
 800426c:	4906      	ldr	r1, [pc, #24]	; (8004288 <HAL_RCC_OscConfig+0x8ac>)
 800426e:	4313      	orrs	r3, r2
 8004270:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004272:	4b05      	ldr	r3, [pc, #20]	; (8004288 <HAL_RCC_OscConfig+0x8ac>)
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	4a04      	ldr	r2, [pc, #16]	; (8004288 <HAL_RCC_OscConfig+0x8ac>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3730      	adds	r7, #48	; 0x30
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	58024400 	.word	0x58024400
 800428c:	ffff0007 	.word	0xffff0007

08004290 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e19c      	b.n	80045de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042a4:	4b8a      	ldr	r3, [pc, #552]	; (80044d0 <HAL_RCC_ClockConfig+0x240>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d910      	bls.n	80042d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b87      	ldr	r3, [pc, #540]	; (80044d0 <HAL_RCC_ClockConfig+0x240>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 020f 	bic.w	r2, r3, #15
 80042ba:	4985      	ldr	r1, [pc, #532]	; (80044d0 <HAL_RCC_ClockConfig+0x240>)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b83      	ldr	r3, [pc, #524]	; (80044d0 <HAL_RCC_ClockConfig+0x240>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e184      	b.n	80045de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d010      	beq.n	8004302 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	4b7b      	ldr	r3, [pc, #492]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d908      	bls.n	8004302 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042f0:	4b78      	ldr	r3, [pc, #480]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	4975      	ldr	r1, [pc, #468]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d010      	beq.n	8004330 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	4b70      	ldr	r3, [pc, #448]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800431a:	429a      	cmp	r2, r3
 800431c:	d908      	bls.n	8004330 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800431e:	4b6d      	ldr	r3, [pc, #436]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	496a      	ldr	r1, [pc, #424]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 800432c:	4313      	orrs	r3, r2
 800432e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b00      	cmp	r3, #0
 800433a:	d010      	beq.n	800435e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	4b64      	ldr	r3, [pc, #400]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004348:	429a      	cmp	r2, r3
 800434a:	d908      	bls.n	800435e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800434c:	4b61      	ldr	r3, [pc, #388]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	495e      	ldr	r1, [pc, #376]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 800435a:	4313      	orrs	r3, r2
 800435c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d010      	beq.n	800438c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69da      	ldr	r2, [r3, #28]
 800436e:	4b59      	ldr	r3, [pc, #356]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004376:	429a      	cmp	r2, r3
 8004378:	d908      	bls.n	800438c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800437a:	4b56      	ldr	r3, [pc, #344]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	4953      	ldr	r1, [pc, #332]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 8004388:	4313      	orrs	r3, r2
 800438a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d010      	beq.n	80043ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	4b4d      	ldr	r3, [pc, #308]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d908      	bls.n	80043ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043a8:	4b4a      	ldr	r3, [pc, #296]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	f023 020f 	bic.w	r2, r3, #15
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4947      	ldr	r1, [pc, #284]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d055      	beq.n	8004472 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80043c6:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	4940      	ldr	r1, [pc, #256]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043e0:	4b3c      	ldr	r3, [pc, #240]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d121      	bne.n	8004430 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0f6      	b.n	80045de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d107      	bne.n	8004408 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043f8:	4b36      	ldr	r3, [pc, #216]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d115      	bne.n	8004430 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0ea      	b.n	80045de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d107      	bne.n	8004420 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004410:	4b30      	ldr	r3, [pc, #192]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004418:	2b00      	cmp	r3, #0
 800441a:	d109      	bne.n	8004430 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0de      	b.n	80045de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004420:	4b2c      	ldr	r3, [pc, #176]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0d6      	b.n	80045de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004430:	4b28      	ldr	r3, [pc, #160]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f023 0207 	bic.w	r2, r3, #7
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4925      	ldr	r1, [pc, #148]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 800443e:	4313      	orrs	r3, r2
 8004440:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004442:	f7fe f9af 	bl	80027a4 <HAL_GetTick>
 8004446:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004448:	e00a      	b.n	8004460 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800444a:	f7fe f9ab 	bl	80027a4 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	f241 3288 	movw	r2, #5000	; 0x1388
 8004458:	4293      	cmp	r3, r2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e0be      	b.n	80045de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004460:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	429a      	cmp	r2, r3
 8004470:	d1eb      	bne.n	800444a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d010      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	429a      	cmp	r2, r3
 800448c:	d208      	bcs.n	80044a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800448e:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f023 020f 	bic.w	r2, r3, #15
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	490e      	ldr	r1, [pc, #56]	; (80044d4 <HAL_RCC_ClockConfig+0x244>)
 800449c:	4313      	orrs	r3, r2
 800449e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_RCC_ClockConfig+0x240>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d214      	bcs.n	80044d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ae:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <HAL_RCC_ClockConfig+0x240>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f023 020f 	bic.w	r2, r3, #15
 80044b6:	4906      	ldr	r1, [pc, #24]	; (80044d0 <HAL_RCC_ClockConfig+0x240>)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <HAL_RCC_ClockConfig+0x240>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e086      	b.n	80045de <HAL_RCC_ClockConfig+0x34e>
 80044d0:	52002000 	.word	0x52002000
 80044d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d010      	beq.n	8004506 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	4b3f      	ldr	r3, [pc, #252]	; (80045e8 <HAL_RCC_ClockConfig+0x358>)
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d208      	bcs.n	8004506 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044f4:	4b3c      	ldr	r3, [pc, #240]	; (80045e8 <HAL_RCC_ClockConfig+0x358>)
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	4939      	ldr	r1, [pc, #228]	; (80045e8 <HAL_RCC_ClockConfig+0x358>)
 8004502:	4313      	orrs	r3, r2
 8004504:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d010      	beq.n	8004534 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695a      	ldr	r2, [r3, #20]
 8004516:	4b34      	ldr	r3, [pc, #208]	; (80045e8 <HAL_RCC_ClockConfig+0x358>)
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800451e:	429a      	cmp	r2, r3
 8004520:	d208      	bcs.n	8004534 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004522:	4b31      	ldr	r3, [pc, #196]	; (80045e8 <HAL_RCC_ClockConfig+0x358>)
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	492e      	ldr	r1, [pc, #184]	; (80045e8 <HAL_RCC_ClockConfig+0x358>)
 8004530:	4313      	orrs	r3, r2
 8004532:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	d010      	beq.n	8004562 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699a      	ldr	r2, [r3, #24]
 8004544:	4b28      	ldr	r3, [pc, #160]	; (80045e8 <HAL_RCC_ClockConfig+0x358>)
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800454c:	429a      	cmp	r2, r3
 800454e:	d208      	bcs.n	8004562 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004550:	4b25      	ldr	r3, [pc, #148]	; (80045e8 <HAL_RCC_ClockConfig+0x358>)
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	4922      	ldr	r1, [pc, #136]	; (80045e8 <HAL_RCC_ClockConfig+0x358>)
 800455e:	4313      	orrs	r3, r2
 8004560:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d010      	beq.n	8004590 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69da      	ldr	r2, [r3, #28]
 8004572:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <HAL_RCC_ClockConfig+0x358>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800457a:	429a      	cmp	r2, r3
 800457c:	d208      	bcs.n	8004590 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800457e:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <HAL_RCC_ClockConfig+0x358>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	4917      	ldr	r1, [pc, #92]	; (80045e8 <HAL_RCC_ClockConfig+0x358>)
 800458c:	4313      	orrs	r3, r2
 800458e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004590:	f000 f834 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 8004594:	4602      	mov	r2, r0
 8004596:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <HAL_RCC_ClockConfig+0x358>)
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	0a1b      	lsrs	r3, r3, #8
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	4912      	ldr	r1, [pc, #72]	; (80045ec <HAL_RCC_ClockConfig+0x35c>)
 80045a2:	5ccb      	ldrb	r3, [r1, r3]
 80045a4:	f003 031f 	and.w	r3, r3, #31
 80045a8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045ae:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <HAL_RCC_ClockConfig+0x358>)
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	4a0d      	ldr	r2, [pc, #52]	; (80045ec <HAL_RCC_ClockConfig+0x35c>)
 80045b8:	5cd3      	ldrb	r3, [r2, r3]
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
 80045c4:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <HAL_RCC_ClockConfig+0x360>)
 80045c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045c8:	4a0a      	ldr	r2, [pc, #40]	; (80045f4 <HAL_RCC_ClockConfig+0x364>)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <HAL_RCC_ClockConfig+0x368>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fe f89c 	bl	8002710 <HAL_InitTick>
 80045d8:	4603      	mov	r3, r0
 80045da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	58024400 	.word	0x58024400
 80045ec:	080082c0 	.word	0x080082c0
 80045f0:	24000004 	.word	0x24000004
 80045f4:	24000000 	.word	0x24000000
 80045f8:	2400000c 	.word	0x2400000c

080045fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b089      	sub	sp, #36	; 0x24
 8004600:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004602:	4bb3      	ldr	r3, [pc, #716]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800460a:	2b18      	cmp	r3, #24
 800460c:	f200 8155 	bhi.w	80048ba <HAL_RCC_GetSysClockFreq+0x2be>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	0800467d 	.word	0x0800467d
 800461c:	080048bb 	.word	0x080048bb
 8004620:	080048bb 	.word	0x080048bb
 8004624:	080048bb 	.word	0x080048bb
 8004628:	080048bb 	.word	0x080048bb
 800462c:	080048bb 	.word	0x080048bb
 8004630:	080048bb 	.word	0x080048bb
 8004634:	080048bb 	.word	0x080048bb
 8004638:	080046a3 	.word	0x080046a3
 800463c:	080048bb 	.word	0x080048bb
 8004640:	080048bb 	.word	0x080048bb
 8004644:	080048bb 	.word	0x080048bb
 8004648:	080048bb 	.word	0x080048bb
 800464c:	080048bb 	.word	0x080048bb
 8004650:	080048bb 	.word	0x080048bb
 8004654:	080048bb 	.word	0x080048bb
 8004658:	080046a9 	.word	0x080046a9
 800465c:	080048bb 	.word	0x080048bb
 8004660:	080048bb 	.word	0x080048bb
 8004664:	080048bb 	.word	0x080048bb
 8004668:	080048bb 	.word	0x080048bb
 800466c:	080048bb 	.word	0x080048bb
 8004670:	080048bb 	.word	0x080048bb
 8004674:	080048bb 	.word	0x080048bb
 8004678:	080046af 	.word	0x080046af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800467c:	4b94      	ldr	r3, [pc, #592]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004688:	4b91      	ldr	r3, [pc, #580]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	08db      	lsrs	r3, r3, #3
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	4a90      	ldr	r2, [pc, #576]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
 8004698:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800469a:	e111      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800469c:	4b8d      	ldr	r3, [pc, #564]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800469e:	61bb      	str	r3, [r7, #24]
      break;
 80046a0:	e10e      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80046a2:	4b8d      	ldr	r3, [pc, #564]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046a4:	61bb      	str	r3, [r7, #24]
      break;
 80046a6:	e10b      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80046a8:	4b8c      	ldr	r3, [pc, #560]	; (80048dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80046aa:	61bb      	str	r3, [r7, #24]
      break;
 80046ac:	e108      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046ae:	4b88      	ldr	r3, [pc, #544]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80046b8:	4b85      	ldr	r3, [pc, #532]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80046c4:	4b82      	ldr	r3, [pc, #520]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80046ce:	4b80      	ldr	r3, [pc, #512]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	08db      	lsrs	r3, r3, #3
 80046d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80e1 	beq.w	80048b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	f000 8083 	beq.w	8004800 <HAL_RCC_GetSysClockFreq+0x204>
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	f200 80a1 	bhi.w	8004844 <HAL_RCC_GetSysClockFreq+0x248>
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_RCC_GetSysClockFreq+0x114>
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d056      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800470e:	e099      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004710:	4b6f      	ldr	r3, [pc, #444]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d02d      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800471c:	4b6c      	ldr	r3, [pc, #432]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	08db      	lsrs	r3, r3, #3
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	4a6b      	ldr	r2, [pc, #428]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
 800472c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	ee07 3a90 	vmov	s15, r3
 8004734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004746:	4b62      	ldr	r3, [pc, #392]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004756:	ed97 6a02 	vldr	s12, [r7, #8]
 800475a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80048e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800475e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800476a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800476e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004772:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004776:	e087      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004782:	eddf 6a58 	vldr	s13, [pc, #352]	; 80048e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478a:	4b51      	ldr	r3, [pc, #324]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479a:	ed97 6a02 	vldr	s12, [r7, #8]
 800479e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80048e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047ba:	e065      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80048e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ce:	4b40      	ldr	r3, [pc, #256]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047de:	ed97 6a02 	vldr	s12, [r7, #8]
 80047e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80048e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047fe:	e043      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80048ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800480e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004812:	4b2f      	ldr	r3, [pc, #188]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004822:	ed97 6a02 	vldr	s12, [r7, #8]
 8004826:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80048e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800482a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004842:	e021      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80048e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004856:	4b1e      	ldr	r3, [pc, #120]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004866:	ed97 6a02 	vldr	s12, [r7, #8]
 800486a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80048e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800486e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800487a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004882:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004886:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004888:	4b11      	ldr	r3, [pc, #68]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	0a5b      	lsrs	r3, r3, #9
 800488e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004892:	3301      	adds	r3, #1
 8004894:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	ee07 3a90 	vmov	s15, r3
 800489c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80048a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ac:	ee17 3a90 	vmov	r3, s15
 80048b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80048b2:	e005      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61bb      	str	r3, [r7, #24]
      break;
 80048b8:	e002      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80048ba:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048bc:	61bb      	str	r3, [r7, #24]
      break;
 80048be:	bf00      	nop
  }

  return sysclockfreq;
 80048c0:	69bb      	ldr	r3, [r7, #24]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3724      	adds	r7, #36	; 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	58024400 	.word	0x58024400
 80048d4:	03d09000 	.word	0x03d09000
 80048d8:	003d0900 	.word	0x003d0900
 80048dc:	007a1200 	.word	0x007a1200
 80048e0:	46000000 	.word	0x46000000
 80048e4:	4c742400 	.word	0x4c742400
 80048e8:	4a742400 	.word	0x4a742400
 80048ec:	4af42400 	.word	0x4af42400

080048f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80048f6:	f7ff fe81 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 80048fa:	4602      	mov	r2, r0
 80048fc:	4b10      	ldr	r3, [pc, #64]	; (8004940 <HAL_RCC_GetHCLKFreq+0x50>)
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	0a1b      	lsrs	r3, r3, #8
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	490f      	ldr	r1, [pc, #60]	; (8004944 <HAL_RCC_GetHCLKFreq+0x54>)
 8004908:	5ccb      	ldrb	r3, [r1, r3]
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	fa22 f303 	lsr.w	r3, r2, r3
 8004912:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004914:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <HAL_RCC_GetHCLKFreq+0x50>)
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	4a09      	ldr	r2, [pc, #36]	; (8004944 <HAL_RCC_GetHCLKFreq+0x54>)
 800491e:	5cd3      	ldrb	r3, [r2, r3]
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	fa22 f303 	lsr.w	r3, r2, r3
 800492a:	4a07      	ldr	r2, [pc, #28]	; (8004948 <HAL_RCC_GetHCLKFreq+0x58>)
 800492c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800492e:	4a07      	ldr	r2, [pc, #28]	; (800494c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004934:	4b04      	ldr	r3, [pc, #16]	; (8004948 <HAL_RCC_GetHCLKFreq+0x58>)
 8004936:	681b      	ldr	r3, [r3, #0]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	58024400 	.word	0x58024400
 8004944:	080082c0 	.word	0x080082c0
 8004948:	24000004 	.word	0x24000004
 800494c:	24000000 	.word	0x24000000

08004950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004954:	f7ff ffcc 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8004958:	4602      	mov	r2, r0
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCC_GetPCLK1Freq+0x24>)
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	091b      	lsrs	r3, r3, #4
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	4904      	ldr	r1, [pc, #16]	; (8004978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004966:	5ccb      	ldrb	r3, [r1, r3]
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}
 8004974:	58024400 	.word	0x58024400
 8004978:	080082c0 	.word	0x080082c0

0800497c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004980:	f7ff ffb6 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8004984:	4602      	mov	r2, r0
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	0a1b      	lsrs	r3, r3, #8
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	4904      	ldr	r1, [pc, #16]	; (80049a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004992:	5ccb      	ldrb	r3, [r1, r3]
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800499c:	4618      	mov	r0, r3
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	58024400 	.word	0x58024400
 80049a4:	080082c0 	.word	0x080082c0

080049a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049ac:	b0ca      	sub	sp, #296	; 0x128
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049b4:	2300      	movs	r3, #0
 80049b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049ba:	2300      	movs	r3, #0
 80049bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80049cc:	2500      	movs	r5, #0
 80049ce:	ea54 0305 	orrs.w	r3, r4, r5
 80049d2:	d049      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80049d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049de:	d02f      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80049e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049e4:	d828      	bhi.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80049e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049ea:	d01a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049f0:	d822      	bhi.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80049f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049fa:	d007      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049fc:	e01c      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049fe:	4bb8      	ldr	r3, [pc, #736]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	4ab7      	ldr	r2, [pc, #732]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a0a:	e01a      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a10:	3308      	adds	r3, #8
 8004a12:	2102      	movs	r1, #2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f001 fc8f 	bl	8006338 <RCCEx_PLL2_Config>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a20:	e00f      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a26:	3328      	adds	r3, #40	; 0x28
 8004a28:	2102      	movs	r1, #2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f001 fd36 	bl	800649c <RCCEx_PLL3_Config>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a36:	e004      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a3e:	e000      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10a      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a4a:	4ba5      	ldr	r3, [pc, #660]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a58:	4aa1      	ldr	r2, [pc, #644]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a5a:	430b      	orrs	r3, r1
 8004a5c:	6513      	str	r3, [r2, #80]	; 0x50
 8004a5e:	e003      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a70:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004a74:	f04f 0900 	mov.w	r9, #0
 8004a78:	ea58 0309 	orrs.w	r3, r8, r9
 8004a7c:	d047      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d82a      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004a88:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004aa5 	.word	0x08004aa5
 8004a94:	08004ab3 	.word	0x08004ab3
 8004a98:	08004ac9 	.word	0x08004ac9
 8004a9c:	08004ae7 	.word	0x08004ae7
 8004aa0:	08004ae7 	.word	0x08004ae7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa4:	4b8e      	ldr	r3, [pc, #568]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	4a8d      	ldr	r2, [pc, #564]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ab0:	e01a      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f001 fc3c 	bl	8006338 <RCCEx_PLL2_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ac6:	e00f      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004acc:	3328      	adds	r3, #40	; 0x28
 8004ace:	2100      	movs	r1, #0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f001 fce3 	bl	800649c <RCCEx_PLL3_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004adc:	e004      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ae4:	e000      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004af0:	4b7b      	ldr	r3, [pc, #492]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af4:	f023 0107 	bic.w	r1, r3, #7
 8004af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afe:	4a78      	ldr	r2, [pc, #480]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b00:	430b      	orrs	r3, r1
 8004b02:	6513      	str	r3, [r2, #80]	; 0x50
 8004b04:	e003      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b16:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004b1a:	f04f 0b00 	mov.w	fp, #0
 8004b1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004b22:	d04c      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2e:	d030      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b34:	d829      	bhi.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b36:	2bc0      	cmp	r3, #192	; 0xc0
 8004b38:	d02d      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b3a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b3c:	d825      	bhi.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b3e:	2b80      	cmp	r3, #128	; 0x80
 8004b40:	d018      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004b42:	2b80      	cmp	r3, #128	; 0x80
 8004b44:	d821      	bhi.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	d007      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004b4e:	e01c      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b50:	4b63      	ldr	r3, [pc, #396]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	4a62      	ldr	r2, [pc, #392]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b5c:	e01c      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b62:	3308      	adds	r3, #8
 8004b64:	2100      	movs	r1, #0
 8004b66:	4618      	mov	r0, r3
 8004b68:	f001 fbe6 	bl	8006338 <RCCEx_PLL2_Config>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b72:	e011      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b78:	3328      	adds	r3, #40	; 0x28
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f001 fc8d 	bl	800649c <RCCEx_PLL3_Config>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b88:	e006      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b90:	e002      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004b92:	bf00      	nop
 8004b94:	e000      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004ba0:	4b4f      	ldr	r3, [pc, #316]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bae:	4a4c      	ldr	r2, [pc, #304]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	6513      	str	r3, [r2, #80]	; 0x50
 8004bb4:	e003      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004bca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bd4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	d053      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004be6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bea:	d035      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004bec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bf0:	d82e      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bf2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bf6:	d031      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004bf8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bfc:	d828      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c02:	d01a      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004c04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c08:	d822      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004c0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c12:	d007      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004c14:	e01c      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c16:	4b32      	ldr	r3, [pc, #200]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	4a31      	ldr	r2, [pc, #196]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c22:	e01c      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c28:	3308      	adds	r3, #8
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 fb83 	bl	8006338 <RCCEx_PLL2_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004c38:	e011      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c3e:	3328      	adds	r3, #40	; 0x28
 8004c40:	2100      	movs	r1, #0
 8004c42:	4618      	mov	r0, r3
 8004c44:	f001 fc2a 	bl	800649c <RCCEx_PLL3_Config>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c4e:	e006      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c56:	e002      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004c58:	bf00      	nop
 8004c5a:	e000      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10b      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c66:	4b1e      	ldr	r3, [pc, #120]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c76:	4a1a      	ldr	r2, [pc, #104]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c7c:	e003      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004c92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c96:	2300      	movs	r3, #0
 8004c98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c9c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	d056      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004caa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cb2:	d038      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004cb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cb8:	d831      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004cba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cbe:	d034      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004cc0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cc4:	d82b      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004cc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cca:	d01d      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004ccc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cd0:	d825      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d006      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004cd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004cdc:	e01f      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004cde:	bf00      	nop
 8004ce0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce4:	4ba2      	ldr	r3, [pc, #648]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	4aa1      	ldr	r2, [pc, #644]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cf0:	e01c      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf6:	3308      	adds	r3, #8
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 fb1c 	bl	8006338 <RCCEx_PLL2_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004d06:	e011      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d0c:	3328      	adds	r3, #40	; 0x28
 8004d0e:	2100      	movs	r1, #0
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 fbc3 	bl	800649c <RCCEx_PLL3_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d1c:	e006      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d24:	e002      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004d26:	bf00      	nop
 8004d28:	e000      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10b      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d34:	4b8e      	ldr	r3, [pc, #568]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d38:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d44:	4a8a      	ldr	r2, [pc, #552]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d46:	430b      	orrs	r3, r1
 8004d48:	6593      	str	r3, [r2, #88]	; 0x58
 8004d4a:	e003      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004d60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d64:	2300      	movs	r3, #0
 8004d66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d6a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4313      	orrs	r3, r2
 8004d72:	d03a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7a:	2b30      	cmp	r3, #48	; 0x30
 8004d7c:	d01f      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004d7e:	2b30      	cmp	r3, #48	; 0x30
 8004d80:	d819      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d00c      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d815      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d019      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004d8e:	2b10      	cmp	r3, #16
 8004d90:	d111      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d92:	4b77      	ldr	r3, [pc, #476]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	4a76      	ldr	r2, [pc, #472]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d9e:	e011      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da4:	3308      	adds	r3, #8
 8004da6:	2102      	movs	r1, #2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f001 fac5 	bl	8006338 <RCCEx_PLL2_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004db4:	e006      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dbc:	e002      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004dbe:	bf00      	nop
 8004dc0:	e000      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004dcc:	4b68      	ldr	r3, [pc, #416]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dda:	4a65      	ldr	r2, [pc, #404]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004de0:	e003      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004de6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004df6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e00:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4313      	orrs	r3, r2
 8004e08:	d051      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e14:	d035      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e1a:	d82e      	bhi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e20:	d031      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004e22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e26:	d828      	bhi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e2c:	d01a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e32:	d822      	bhi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3c:	d007      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004e3e:	e01c      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e40:	4b4b      	ldr	r3, [pc, #300]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	4a4a      	ldr	r2, [pc, #296]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e4c:	e01c      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e52:	3308      	adds	r3, #8
 8004e54:	2100      	movs	r1, #0
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 fa6e 	bl	8006338 <RCCEx_PLL2_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e62:	e011      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e68:	3328      	adds	r3, #40	; 0x28
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f001 fb15 	bl	800649c <RCCEx_PLL3_Config>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e78:	e006      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e80:	e002      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004e82:	bf00      	nop
 8004e84:	e000      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e90:	4b37      	ldr	r3, [pc, #220]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e94:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9e:	4a34      	ldr	r2, [pc, #208]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	6513      	str	r3, [r2, #80]	; 0x50
 8004ea4:	e003      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004eba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004ec4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	d056      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ed8:	d033      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004eda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ede:	d82c      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ee0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ee4:	d02f      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004ee6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eea:	d826      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004eec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ef0:	d02b      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004ef2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ef6:	d820      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ef8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004efc:	d012      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004efe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f02:	d81a      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d022      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0c:	d115      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f12:	3308      	adds	r3, #8
 8004f14:	2101      	movs	r1, #1
 8004f16:	4618      	mov	r0, r3
 8004f18:	f001 fa0e 	bl	8006338 <RCCEx_PLL2_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004f22:	e015      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f28:	3328      	adds	r3, #40	; 0x28
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f001 fab5 	bl	800649c <RCCEx_PLL3_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004f38:	e00a      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f40:	e006      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f42:	bf00      	nop
 8004f44:	e004      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f46:	bf00      	nop
 8004f48:	e002      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10d      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f66:	4a02      	ldr	r2, [pc, #8]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	6513      	str	r3, [r2, #80]	; 0x50
 8004f6c:	e006      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004f6e:	bf00      	nop
 8004f70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f84:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004f88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f92:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	d055      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fa8:	d033      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fae:	d82c      	bhi.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb4:	d02f      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fba:	d826      	bhi.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004fbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fc0:	d02b      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004fc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fc6:	d820      	bhi.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fcc:	d012      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fd2:	d81a      	bhi.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d022      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004fd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fdc:	d115      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f001 f9a6 	bl	8006338 <RCCEx_PLL2_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ff2:	e015      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff8:	3328      	adds	r3, #40	; 0x28
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f001 fa4d 	bl	800649c <RCCEx_PLL3_Config>
 8005002:	4603      	mov	r3, r0
 8005004:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005008:	e00a      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005010:	e006      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005012:	bf00      	nop
 8005014:	e004      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005016:	bf00      	nop
 8005018:	e002      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800501a:	bf00      	nop
 800501c:	e000      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800501e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005020:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10b      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005028:	4ba3      	ldr	r3, [pc, #652]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800502a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005034:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005038:	4a9f      	ldr	r2, [pc, #636]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800503a:	430b      	orrs	r3, r1
 800503c:	6593      	str	r3, [r2, #88]	; 0x58
 800503e:	e003      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005044:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005054:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005058:	2300      	movs	r3, #0
 800505a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800505e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005062:	460b      	mov	r3, r1
 8005064:	4313      	orrs	r3, r2
 8005066:	d037      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005072:	d00e      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005078:	d816      	bhi.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d018      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800507e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005082:	d111      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005084:	4b8c      	ldr	r3, [pc, #560]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	4a8b      	ldr	r2, [pc, #556]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800508a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800508e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005090:	e00f      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005096:	3308      	adds	r3, #8
 8005098:	2101      	movs	r1, #1
 800509a:	4618      	mov	r0, r3
 800509c:	f001 f94c 	bl	8006338 <RCCEx_PLL2_Config>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80050a6:	e004      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050ae:	e000      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80050b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050ba:	4b7f      	ldr	r3, [pc, #508]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050be:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80050c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c8:	4a7b      	ldr	r2, [pc, #492]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050ca:	430b      	orrs	r3, r1
 80050cc:	6513      	str	r3, [r2, #80]	; 0x50
 80050ce:	e003      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80050d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80050e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050e8:	2300      	movs	r3, #0
 80050ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80050ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4313      	orrs	r3, r2
 80050f6:	d039      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80050f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d81c      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	08005145 	.word	0x08005145
 800510c:	08005119 	.word	0x08005119
 8005110:	08005127 	.word	0x08005127
 8005114:	08005145 	.word	0x08005145
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005118:	4b67      	ldr	r3, [pc, #412]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	4a66      	ldr	r2, [pc, #408]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800511e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005122:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005124:	e00f      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800512a:	3308      	adds	r3, #8
 800512c:	2102      	movs	r1, #2
 800512e:	4618      	mov	r0, r3
 8005130:	f001 f902 	bl	8006338 <RCCEx_PLL2_Config>
 8005134:	4603      	mov	r3, r0
 8005136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800513a:	e004      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005142:	e000      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005146:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10a      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800514e:	4b5a      	ldr	r3, [pc, #360]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005152:	f023 0103 	bic.w	r1, r3, #3
 8005156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800515a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800515c:	4a56      	ldr	r2, [pc, #344]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800515e:	430b      	orrs	r3, r1
 8005160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005162:	e003      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005164:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005168:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800516c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005178:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800517c:	2300      	movs	r3, #0
 800517e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005182:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005186:	460b      	mov	r3, r1
 8005188:	4313      	orrs	r3, r2
 800518a:	f000 809f 	beq.w	80052cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800518e:	4b4b      	ldr	r3, [pc, #300]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a4a      	ldr	r2, [pc, #296]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005198:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800519a:	f7fd fb03 	bl	80027a4 <HAL_GetTick>
 800519e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051a2:	e00b      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a4:	f7fd fafe 	bl	80027a4 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b64      	cmp	r3, #100	; 0x64
 80051b2:	d903      	bls.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051ba:	e005      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051bc:	4b3f      	ldr	r3, [pc, #252]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0ed      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80051c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d179      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80051d0:	4b39      	ldr	r3, [pc, #228]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80051dc:	4053      	eors	r3, r2
 80051de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d015      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051e6:	4b34      	ldr	r3, [pc, #208]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051f2:	4b31      	ldr	r3, [pc, #196]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f6:	4a30      	ldr	r2, [pc, #192]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051fc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051fe:	4b2e      	ldr	r3, [pc, #184]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005202:	4a2d      	ldr	r2, [pc, #180]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005208:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800520a:	4a2b      	ldr	r2, [pc, #172]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800520c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005210:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005216:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800521a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521e:	d118      	bne.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005220:	f7fd fac0 	bl	80027a4 <HAL_GetTick>
 8005224:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005228:	e00d      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522a:	f7fd fabb 	bl	80027a4 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005234:	1ad2      	subs	r2, r2, r3
 8005236:	f241 3388 	movw	r3, #5000	; 0x1388
 800523a:	429a      	cmp	r2, r3
 800523c:	d903      	bls.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005244:	e005      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005246:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0eb      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005256:	2b00      	cmp	r3, #0
 8005258:	d129      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800526a:	d10e      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800526c:	4b12      	ldr	r3, [pc, #72]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005278:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800527c:	091a      	lsrs	r2, r3, #4
 800527e:	4b10      	ldr	r3, [pc, #64]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005280:	4013      	ands	r3, r2
 8005282:	4a0d      	ldr	r2, [pc, #52]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005284:	430b      	orrs	r3, r1
 8005286:	6113      	str	r3, [r2, #16]
 8005288:	e005      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005290:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005294:	6113      	str	r3, [r2, #16]
 8005296:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005298:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800529e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80052a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052a6:	4a04      	ldr	r2, [pc, #16]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052a8:	430b      	orrs	r3, r1
 80052aa:	6713      	str	r3, [r2, #112]	; 0x70
 80052ac:	e00e      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80052b6:	e009      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80052b8:	58024400 	.word	0x58024400
 80052bc:	58024800 	.word	0x58024800
 80052c0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80052cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f002 0301 	and.w	r3, r2, #1
 80052d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052dc:	2300      	movs	r3, #0
 80052de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f000 8089 	beq.w	8005400 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80052ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f4:	2b28      	cmp	r3, #40	; 0x28
 80052f6:	d86b      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80052f8:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80052fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fe:	bf00      	nop
 8005300:	080053d9 	.word	0x080053d9
 8005304:	080053d1 	.word	0x080053d1
 8005308:	080053d1 	.word	0x080053d1
 800530c:	080053d1 	.word	0x080053d1
 8005310:	080053d1 	.word	0x080053d1
 8005314:	080053d1 	.word	0x080053d1
 8005318:	080053d1 	.word	0x080053d1
 800531c:	080053d1 	.word	0x080053d1
 8005320:	080053a5 	.word	0x080053a5
 8005324:	080053d1 	.word	0x080053d1
 8005328:	080053d1 	.word	0x080053d1
 800532c:	080053d1 	.word	0x080053d1
 8005330:	080053d1 	.word	0x080053d1
 8005334:	080053d1 	.word	0x080053d1
 8005338:	080053d1 	.word	0x080053d1
 800533c:	080053d1 	.word	0x080053d1
 8005340:	080053bb 	.word	0x080053bb
 8005344:	080053d1 	.word	0x080053d1
 8005348:	080053d1 	.word	0x080053d1
 800534c:	080053d1 	.word	0x080053d1
 8005350:	080053d1 	.word	0x080053d1
 8005354:	080053d1 	.word	0x080053d1
 8005358:	080053d1 	.word	0x080053d1
 800535c:	080053d1 	.word	0x080053d1
 8005360:	080053d9 	.word	0x080053d9
 8005364:	080053d1 	.word	0x080053d1
 8005368:	080053d1 	.word	0x080053d1
 800536c:	080053d1 	.word	0x080053d1
 8005370:	080053d1 	.word	0x080053d1
 8005374:	080053d1 	.word	0x080053d1
 8005378:	080053d1 	.word	0x080053d1
 800537c:	080053d1 	.word	0x080053d1
 8005380:	080053d9 	.word	0x080053d9
 8005384:	080053d1 	.word	0x080053d1
 8005388:	080053d1 	.word	0x080053d1
 800538c:	080053d1 	.word	0x080053d1
 8005390:	080053d1 	.word	0x080053d1
 8005394:	080053d1 	.word	0x080053d1
 8005398:	080053d1 	.word	0x080053d1
 800539c:	080053d1 	.word	0x080053d1
 80053a0:	080053d9 	.word	0x080053d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a8:	3308      	adds	r3, #8
 80053aa:	2101      	movs	r1, #1
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 ffc3 	bl	8006338 <RCCEx_PLL2_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80053b8:	e00f      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053be:	3328      	adds	r3, #40	; 0x28
 80053c0:	2101      	movs	r1, #1
 80053c2:	4618      	mov	r0, r3
 80053c4:	f001 f86a 	bl	800649c <RCCEx_PLL3_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80053ce:	e004      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053d6:	e000      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80053d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80053e2:	4bbf      	ldr	r3, [pc, #764]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80053ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053f0:	4abb      	ldr	r2, [pc, #748]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053f2:	430b      	orrs	r3, r1
 80053f4:	6553      	str	r3, [r2, #84]	; 0x54
 80053f6:	e003      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f002 0302 	and.w	r3, r2, #2
 800540c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005410:	2300      	movs	r3, #0
 8005412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005416:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800541a:	460b      	mov	r3, r1
 800541c:	4313      	orrs	r3, r2
 800541e:	d041      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005426:	2b05      	cmp	r3, #5
 8005428:	d824      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800542a:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	0800547d 	.word	0x0800547d
 8005434:	08005449 	.word	0x08005449
 8005438:	0800545f 	.word	0x0800545f
 800543c:	0800547d 	.word	0x0800547d
 8005440:	0800547d 	.word	0x0800547d
 8005444:	0800547d 	.word	0x0800547d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544c:	3308      	adds	r3, #8
 800544e:	2101      	movs	r1, #1
 8005450:	4618      	mov	r0, r3
 8005452:	f000 ff71 	bl	8006338 <RCCEx_PLL2_Config>
 8005456:	4603      	mov	r3, r0
 8005458:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800545c:	e00f      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800545e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005462:	3328      	adds	r3, #40	; 0x28
 8005464:	2101      	movs	r1, #1
 8005466:	4618      	mov	r0, r3
 8005468:	f001 f818 	bl	800649c <RCCEx_PLL3_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005472:	e004      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800547a:	e000      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800547c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800547e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10a      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005486:	4b96      	ldr	r3, [pc, #600]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548a:	f023 0107 	bic.w	r1, r3, #7
 800548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005492:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005494:	4a92      	ldr	r2, [pc, #584]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005496:	430b      	orrs	r3, r1
 8005498:	6553      	str	r3, [r2, #84]	; 0x54
 800549a:	e003      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ac:	f002 0304 	and.w	r3, r2, #4
 80054b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054b4:	2300      	movs	r3, #0
 80054b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80054be:	460b      	mov	r3, r1
 80054c0:	4313      	orrs	r3, r2
 80054c2:	d044      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80054c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054cc:	2b05      	cmp	r3, #5
 80054ce:	d825      	bhi.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80054d0:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	08005525 	.word	0x08005525
 80054dc:	080054f1 	.word	0x080054f1
 80054e0:	08005507 	.word	0x08005507
 80054e4:	08005525 	.word	0x08005525
 80054e8:	08005525 	.word	0x08005525
 80054ec:	08005525 	.word	0x08005525
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f4:	3308      	adds	r3, #8
 80054f6:	2101      	movs	r1, #1
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 ff1d 	bl	8006338 <RCCEx_PLL2_Config>
 80054fe:	4603      	mov	r3, r0
 8005500:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005504:	e00f      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800550a:	3328      	adds	r3, #40	; 0x28
 800550c:	2101      	movs	r1, #1
 800550e:	4618      	mov	r0, r3
 8005510:	f000 ffc4 	bl	800649c <RCCEx_PLL3_Config>
 8005514:	4603      	mov	r3, r0
 8005516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800551a:	e004      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005522:	e000      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005526:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10b      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800552e:	4b6c      	ldr	r3, [pc, #432]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005532:	f023 0107 	bic.w	r1, r3, #7
 8005536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553e:	4a68      	ldr	r2, [pc, #416]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005540:	430b      	orrs	r3, r1
 8005542:	6593      	str	r3, [r2, #88]	; 0x58
 8005544:	e003      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800554a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	f002 0320 	and.w	r3, r2, #32
 800555a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800555e:	2300      	movs	r3, #0
 8005560:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005564:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005568:	460b      	mov	r3, r1
 800556a:	4313      	orrs	r3, r2
 800556c:	d055      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800556e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005576:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800557a:	d033      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800557c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005580:	d82c      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005586:	d02f      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558c:	d826      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800558e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005592:	d02b      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005594:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005598:	d820      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800559a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800559e:	d012      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80055a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a4:	d81a      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d022      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80055aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ae:	d115      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055b4:	3308      	adds	r3, #8
 80055b6:	2100      	movs	r1, #0
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 febd 	bl	8006338 <RCCEx_PLL2_Config>
 80055be:	4603      	mov	r3, r0
 80055c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80055c4:	e015      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ca:	3328      	adds	r3, #40	; 0x28
 80055cc:	2102      	movs	r1, #2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 ff64 	bl	800649c <RCCEx_PLL3_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80055da:	e00a      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055e2:	e006      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055e4:	bf00      	nop
 80055e6:	e004      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055e8:	bf00      	nop
 80055ea:	e002      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055ec:	bf00      	nop
 80055ee:	e000      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055fa:	4b39      	ldr	r3, [pc, #228]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560a:	4a35      	ldr	r2, [pc, #212]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800560c:	430b      	orrs	r3, r1
 800560e:	6553      	str	r3, [r2, #84]	; 0x54
 8005610:	e003      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005616:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800561a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800562a:	2300      	movs	r3, #0
 800562c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005630:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005634:	460b      	mov	r3, r1
 8005636:	4313      	orrs	r3, r2
 8005638:	d058      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005642:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005646:	d033      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005648:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800564c:	d82c      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800564e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005652:	d02f      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005658:	d826      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800565a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800565e:	d02b      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005660:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005664:	d820      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566a:	d012      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800566c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005670:	d81a      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005672:	2b00      	cmp	r3, #0
 8005674:	d022      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567a:	d115      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800567c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005680:	3308      	adds	r3, #8
 8005682:	2100      	movs	r1, #0
 8005684:	4618      	mov	r0, r3
 8005686:	f000 fe57 	bl	8006338 <RCCEx_PLL2_Config>
 800568a:	4603      	mov	r3, r0
 800568c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005690:	e015      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005696:	3328      	adds	r3, #40	; 0x28
 8005698:	2102      	movs	r1, #2
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fefe 	bl	800649c <RCCEx_PLL3_Config>
 80056a0:	4603      	mov	r3, r0
 80056a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80056a6:	e00a      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056ae:	e006      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80056b0:	bf00      	nop
 80056b2:	e004      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80056b4:	bf00      	nop
 80056b6:	e002      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80056b8:	bf00      	nop
 80056ba:	e000      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80056bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10e      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056c6:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80056ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056d6:	4a02      	ldr	r2, [pc, #8]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056d8:	430b      	orrs	r3, r1
 80056da:	6593      	str	r3, [r2, #88]	; 0x58
 80056dc:	e006      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80056de:	bf00      	nop
 80056e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80056ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80056f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056fc:	2300      	movs	r3, #0
 80056fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005702:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005706:	460b      	mov	r3, r1
 8005708:	4313      	orrs	r3, r2
 800570a:	d055      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800570c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005710:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005714:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005718:	d033      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800571a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800571e:	d82c      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005724:	d02f      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572a:	d826      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800572c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005730:	d02b      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005732:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005736:	d820      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800573c:	d012      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800573e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005742:	d81a      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005744:	2b00      	cmp	r3, #0
 8005746:	d022      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800574c:	d115      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800574e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005752:	3308      	adds	r3, #8
 8005754:	2100      	movs	r1, #0
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fdee 	bl	8006338 <RCCEx_PLL2_Config>
 800575c:	4603      	mov	r3, r0
 800575e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005762:	e015      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005768:	3328      	adds	r3, #40	; 0x28
 800576a:	2102      	movs	r1, #2
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fe95 	bl	800649c <RCCEx_PLL3_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005778:	e00a      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005780:	e006      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005782:	bf00      	nop
 8005784:	e004      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005786:	bf00      	nop
 8005788:	e002      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800578a:	bf00      	nop
 800578c:	e000      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800578e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005790:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10b      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005798:	4ba1      	ldr	r3, [pc, #644]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800579a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80057a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057a8:	4a9d      	ldr	r2, [pc, #628]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057aa:	430b      	orrs	r3, r1
 80057ac:	6593      	str	r3, [r2, #88]	; 0x58
 80057ae:	e003      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80057b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	f002 0308 	and.w	r3, r2, #8
 80057c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057c8:	2300      	movs	r3, #0
 80057ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80057d2:	460b      	mov	r3, r1
 80057d4:	4313      	orrs	r3, r2
 80057d6:	d01e      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80057d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e4:	d10c      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ea:	3328      	adds	r3, #40	; 0x28
 80057ec:	2102      	movs	r1, #2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fe54 	bl	800649c <RCCEx_PLL3_Config>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005800:	4b87      	ldr	r3, [pc, #540]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005804:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005810:	4a83      	ldr	r2, [pc, #524]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005812:	430b      	orrs	r3, r1
 8005814:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f002 0310 	and.w	r3, r2, #16
 8005822:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005826:	2300      	movs	r3, #0
 8005828:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800582c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005830:	460b      	mov	r3, r1
 8005832:	4313      	orrs	r3, r2
 8005834:	d01e      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800583a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800583e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005842:	d10c      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005848:	3328      	adds	r3, #40	; 0x28
 800584a:	2102      	movs	r1, #2
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fe25 	bl	800649c <RCCEx_PLL3_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800585e:	4b70      	ldr	r3, [pc, #448]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005862:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800586e:	4a6c      	ldr	r2, [pc, #432]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005870:	430b      	orrs	r3, r1
 8005872:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005884:	2300      	movs	r3, #0
 8005886:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800588a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800588e:	460b      	mov	r3, r1
 8005890:	4313      	orrs	r3, r2
 8005892:	d03e      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005898:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800589c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058a0:	d022      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80058a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058a6:	d81b      	bhi.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80058ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b0:	d00b      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80058b2:	e015      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b8:	3308      	adds	r3, #8
 80058ba:	2100      	movs	r1, #0
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fd3b 	bl	8006338 <RCCEx_PLL2_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80058c8:	e00f      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ce:	3328      	adds	r3, #40	; 0x28
 80058d0:	2102      	movs	r1, #2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fde2 	bl	800649c <RCCEx_PLL3_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80058de:	e004      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058e6:	e000      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80058e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10b      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058f2:	4b4b      	ldr	r3, [pc, #300]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80058fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005902:	4a47      	ldr	r2, [pc, #284]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005904:	430b      	orrs	r3, r1
 8005906:	6593      	str	r3, [r2, #88]	; 0x58
 8005908:	e003      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800590e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800591e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005920:	2300      	movs	r3, #0
 8005922:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005924:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005928:	460b      	mov	r3, r1
 800592a:	4313      	orrs	r3, r2
 800592c:	d03b      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800592e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005936:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800593a:	d01f      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800593c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005940:	d818      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005946:	d003      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005948:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800594c:	d007      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800594e:	e011      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005950:	4b33      	ldr	r3, [pc, #204]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	4a32      	ldr	r2, [pc, #200]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800595a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800595c:	e00f      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800595e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005962:	3328      	adds	r3, #40	; 0x28
 8005964:	2101      	movs	r1, #1
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fd98 	bl	800649c <RCCEx_PLL3_Config>
 800596c:	4603      	mov	r3, r0
 800596e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005972:	e004      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800597a:	e000      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800597c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800597e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005986:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800598e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005996:	4a22      	ldr	r2, [pc, #136]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005998:	430b      	orrs	r3, r1
 800599a:	6553      	str	r3, [r2, #84]	; 0x54
 800599c:	e003      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80059a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ae:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80059b2:	673b      	str	r3, [r7, #112]	; 0x70
 80059b4:	2300      	movs	r3, #0
 80059b6:	677b      	str	r3, [r7, #116]	; 0x74
 80059b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80059bc:	460b      	mov	r3, r1
 80059be:	4313      	orrs	r3, r2
 80059c0:	d034      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80059c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80059cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d0:	d007      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80059d2:	e011      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d4:	4b12      	ldr	r3, [pc, #72]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	4a11      	ldr	r2, [pc, #68]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80059e0:	e00e      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e6:	3308      	adds	r3, #8
 80059e8:	2102      	movs	r1, #2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fca4 	bl	8006338 <RCCEx_PLL2_Config>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80059f6:	e003      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10d      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a16:	4a02      	ldr	r2, [pc, #8]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a1c:	e006      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005a1e:	bf00      	nop
 8005a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005a38:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005a42:	460b      	mov	r3, r1
 8005a44:	4313      	orrs	r3, r2
 8005a46:	d00c      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a4c:	3328      	adds	r3, #40	; 0x28
 8005a4e:	2102      	movs	r1, #2
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fd23 	bl	800649c <RCCEx_PLL3_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005a6e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a70:	2300      	movs	r3, #0
 8005a72:	667b      	str	r3, [r7, #100]	; 0x64
 8005a74:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	d038      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a8a:	d018      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a90:	d811      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a96:	d014      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9c:	d80b      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d011      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aa6:	d106      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa8:	4bc3      	ldr	r3, [pc, #780]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	4ac2      	ldr	r2, [pc, #776]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005abc:	e004      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005abe:	bf00      	nop
 8005ac0:	e002      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005ac2:	bf00      	nop
 8005ac4:	e000      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10b      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ad0:	4bb9      	ldr	r3, [pc, #740]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ae0:	4ab5      	ldr	r2, [pc, #724]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ae2:	430b      	orrs	r3, r1
 8005ae4:	6553      	str	r3, [r2, #84]	; 0x54
 8005ae6:	e003      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005afc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005afe:	2300      	movs	r3, #0
 8005b00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b02:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005b06:	460b      	mov	r3, r1
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	d009      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b0c:	4baa      	ldr	r3, [pc, #680]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b1a:	4aa7      	ldr	r2, [pc, #668]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005b2c:	653b      	str	r3, [r7, #80]	; 0x50
 8005b2e:	2300      	movs	r3, #0
 8005b30:	657b      	str	r3, [r7, #84]	; 0x54
 8005b32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005b36:	460b      	mov	r3, r1
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	d00a      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005b3c:	4b9e      	ldr	r3, [pc, #632]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005b4c:	4a9a      	ldr	r2, [pc, #616]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b60:	2300      	movs	r3, #0
 8005b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b64:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b6e:	4b92      	ldr	r3, [pc, #584]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b72:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b7c:	4a8e      	ldr	r2, [pc, #568]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005b8e:	643b      	str	r3, [r7, #64]	; 0x40
 8005b90:	2300      	movs	r3, #0
 8005b92:	647b      	str	r3, [r7, #68]	; 0x44
 8005b94:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	d00e      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b9e:	4b86      	ldr	r3, [pc, #536]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	4a85      	ldr	r2, [pc, #532]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ba4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ba8:	6113      	str	r3, [r2, #16]
 8005baa:	4b83      	ldr	r3, [pc, #524]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bac:	6919      	ldr	r1, [r3, #16]
 8005bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005bb6:	4a80      	ldr	r2, [pc, #512]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005bc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bca:	2300      	movs	r3, #0
 8005bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	d009      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005bd8:	4b77      	ldr	r3, [pc, #476]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bdc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be6:	4a74      	ldr	r2, [pc, #464]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005be8:	430b      	orrs	r3, r1
 8005bea:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005bfe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005c02:	460b      	mov	r3, r1
 8005c04:	4313      	orrs	r3, r2
 8005c06:	d00a      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c08:	4b6b      	ldr	r3, [pc, #428]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c18:	4a67      	ldr	r2, [pc, #412]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	2100      	movs	r1, #0
 8005c28:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005c34:	460b      	mov	r3, r1
 8005c36:	4313      	orrs	r3, r2
 8005c38:	d011      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c3e:	3308      	adds	r3, #8
 8005c40:	2100      	movs	r1, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fb78 	bl	8006338 <RCCEx_PLL2_Config>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	2100      	movs	r1, #0
 8005c68:	6239      	str	r1, [r7, #32]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c70:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005c74:	460b      	mov	r3, r1
 8005c76:	4313      	orrs	r3, r2
 8005c78:	d011      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c7e:	3308      	adds	r3, #8
 8005c80:	2101      	movs	r1, #1
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fb58 	bl	8006338 <RCCEx_PLL2_Config>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	61b9      	str	r1, [r7, #24]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	61fb      	str	r3, [r7, #28]
 8005cb0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	d011      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	2102      	movs	r1, #2
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fb38 	bl	8006338 <RCCEx_PLL2_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	6139      	str	r1, [r7, #16]
 8005cea:	f003 0308 	and.w	r3, r3, #8
 8005cee:	617b      	str	r3, [r7, #20]
 8005cf0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	d011      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfe:	3328      	adds	r3, #40	; 0x28
 8005d00:	2100      	movs	r1, #0
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fbca 	bl	800649c <RCCEx_PLL3_Config>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	2100      	movs	r1, #0
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	f003 0310 	and.w	r3, r3, #16
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005d34:	460b      	mov	r3, r1
 8005d36:	4313      	orrs	r3, r2
 8005d38:	d011      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d3e:	3328      	adds	r3, #40	; 0x28
 8005d40:	2101      	movs	r1, #1
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fbaa 	bl	800649c <RCCEx_PLL3_Config>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d66:	2100      	movs	r1, #0
 8005d68:	6039      	str	r1, [r7, #0]
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	607b      	str	r3, [r7, #4]
 8005d70:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d74:	460b      	mov	r3, r1
 8005d76:	4313      	orrs	r3, r2
 8005d78:	d011      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d7e:	3328      	adds	r3, #40	; 0x28
 8005d80:	2102      	movs	r1, #2
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fb8a 	bl	800649c <RCCEx_PLL3_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005d9e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	e000      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005db2:	46bd      	mov	sp, r7
 8005db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005db8:	58024400 	.word	0x58024400

08005dbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005dc0:	f7fe fd96 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	091b      	lsrs	r3, r3, #4
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	4904      	ldr	r1, [pc, #16]	; (8005de4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005dd2:	5ccb      	ldrb	r3, [r1, r3]
 8005dd4:	f003 031f 	and.w	r3, r3, #31
 8005dd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	58024400 	.word	0x58024400
 8005de4:	080082c0 	.word	0x080082c0

08005de8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b089      	sub	sp, #36	; 0x24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005df0:	4ba1      	ldr	r3, [pc, #644]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	f003 0303 	and.w	r3, r3, #3
 8005df8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005dfa:	4b9f      	ldr	r3, [pc, #636]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	0b1b      	lsrs	r3, r3, #12
 8005e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005e06:	4b9c      	ldr	r3, [pc, #624]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	091b      	lsrs	r3, r3, #4
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005e12:	4b99      	ldr	r3, [pc, #612]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e16:	08db      	lsrs	r3, r3, #3
 8005e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	fb02 f303 	mul.w	r3, r2, r3
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 8111 	beq.w	8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	f000 8083 	beq.w	8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	f200 80a1 	bhi.w	8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d056      	beq.n	8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005e52:	e099      	b.n	8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e54:	4b88      	ldr	r3, [pc, #544]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d02d      	beq.n	8005ebc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e60:	4b85      	ldr	r3, [pc, #532]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	08db      	lsrs	r3, r3, #3
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	4a84      	ldr	r2, [pc, #528]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	ee07 3a90 	vmov	s15, r3
 8005e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8a:	4b7b      	ldr	r3, [pc, #492]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005eba:	e087      	b.n	8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006084 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ece:	4b6a      	ldr	r3, [pc, #424]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ee2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005efe:	e065      	b.n	8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006088 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f12:	4b59      	ldr	r3, [pc, #356]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f42:	e043      	b.n	8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800608c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f56:	4b48      	ldr	r3, [pc, #288]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f86:	e021      	b.n	8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006088 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f9a:	4b37      	ldr	r3, [pc, #220]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005fcc:	4b2a      	ldr	r3, [pc, #168]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	0a5b      	lsrs	r3, r3, #9
 8005fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff2:	ee17 2a90 	vmov	r2, s15
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005ffa:	4b1f      	ldr	r3, [pc, #124]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	0c1b      	lsrs	r3, r3, #16
 8006000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006010:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006014:	edd7 6a07 	vldr	s13, [r7, #28]
 8006018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800601c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006020:	ee17 2a90 	vmov	r2, s15
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006028:	4b13      	ldr	r3, [pc, #76]	; (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	0e1b      	lsrs	r3, r3, #24
 800602e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800603e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006042:	edd7 6a07 	vldr	s13, [r7, #28]
 8006046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800604a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800604e:	ee17 2a90 	vmov	r2, s15
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006056:	e008      	b.n	800606a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	609a      	str	r2, [r3, #8]
}
 800606a:	bf00      	nop
 800606c:	3724      	adds	r7, #36	; 0x24
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	58024400 	.word	0x58024400
 800607c:	03d09000 	.word	0x03d09000
 8006080:	46000000 	.word	0x46000000
 8006084:	4c742400 	.word	0x4c742400
 8006088:	4a742400 	.word	0x4a742400
 800608c:	4af42400 	.word	0x4af42400

08006090 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006090:	b480      	push	{r7}
 8006092:	b089      	sub	sp, #36	; 0x24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006098:	4ba1      	ldr	r3, [pc, #644]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80060a2:	4b9f      	ldr	r3, [pc, #636]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a6:	0d1b      	lsrs	r3, r3, #20
 80060a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80060ae:	4b9c      	ldr	r3, [pc, #624]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	0a1b      	lsrs	r3, r3, #8
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80060ba:	4b99      	ldr	r3, [pc, #612]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	08db      	lsrs	r3, r3, #3
 80060c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	fb02 f303 	mul.w	r3, r2, r3
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 8111 	beq.w	8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	f000 8083 	beq.w	80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	f200 80a1 	bhi.w	8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d056      	beq.n	80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80060fa:	e099      	b.n	8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060fc:	4b88      	ldr	r3, [pc, #544]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d02d      	beq.n	8006164 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006108:	4b85      	ldr	r3, [pc, #532]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	08db      	lsrs	r3, r3, #3
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	4a84      	ldr	r2, [pc, #528]	; (8006324 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006114:	fa22 f303 	lsr.w	r3, r2, r3
 8006118:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	ee07 3a90 	vmov	s15, r3
 8006120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006132:	4b7b      	ldr	r3, [pc, #492]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006142:	ed97 6a03 	vldr	s12, [r7, #12]
 8006146:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800614a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006162:	e087      	b.n	8006274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800632c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006176:	4b6a      	ldr	r3, [pc, #424]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006186:	ed97 6a03 	vldr	s12, [r7, #12]
 800618a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800618e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800619a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800619e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061a6:	e065      	b.n	8006274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006330 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80061b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ba:	4b59      	ldr	r3, [pc, #356]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ea:	e043      	b.n	8006274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006334 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80061fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061fe:	4b48      	ldr	r3, [pc, #288]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800620e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006212:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800621a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800621e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800622e:	e021      	b.n	8006274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006330 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800623e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006242:	4b37      	ldr	r3, [pc, #220]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006252:	ed97 6a03 	vldr	s12, [r7, #12]
 8006256:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800625a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800625e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800626a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006272:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006274:	4b2a      	ldr	r3, [pc, #168]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	0a5b      	lsrs	r3, r3, #9
 800627a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800628a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800628e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800629a:	ee17 2a90 	vmov	r2, s15
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80062a2:	4b1f      	ldr	r3, [pc, #124]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	0c1b      	lsrs	r3, r3, #16
 80062a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ac:	ee07 3a90 	vmov	s15, r3
 80062b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80062c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062c8:	ee17 2a90 	vmov	r2, s15
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80062d0:	4b13      	ldr	r3, [pc, #76]	; (8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	0e1b      	lsrs	r3, r3, #24
 80062d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80062ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f6:	ee17 2a90 	vmov	r2, s15
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062fe:	e008      	b.n	8006312 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	609a      	str	r2, [r3, #8]
}
 8006312:	bf00      	nop
 8006314:	3724      	adds	r7, #36	; 0x24
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	58024400 	.word	0x58024400
 8006324:	03d09000 	.word	0x03d09000
 8006328:	46000000 	.word	0x46000000
 800632c:	4c742400 	.word	0x4c742400
 8006330:	4a742400 	.word	0x4a742400
 8006334:	4af42400 	.word	0x4af42400

08006338 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006346:	4b53      	ldr	r3, [pc, #332]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	2b03      	cmp	r3, #3
 8006350:	d101      	bne.n	8006356 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e099      	b.n	800648a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006356:	4b4f      	ldr	r3, [pc, #316]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a4e      	ldr	r2, [pc, #312]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800635c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006360:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006362:	f7fc fa1f 	bl	80027a4 <HAL_GetTick>
 8006366:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006368:	e008      	b.n	800637c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800636a:	f7fc fa1b 	bl	80027a4 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d901      	bls.n	800637c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e086      	b.n	800648a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800637c:	4b45      	ldr	r3, [pc, #276]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1f0      	bne.n	800636a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006388:	4b42      	ldr	r3, [pc, #264]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	031b      	lsls	r3, r3, #12
 8006396:	493f      	ldr	r1, [pc, #252]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006398:	4313      	orrs	r3, r2
 800639a:	628b      	str	r3, [r1, #40]	; 0x28
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	025b      	lsls	r3, r3, #9
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	041b      	lsls	r3, r3, #16
 80063ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063be:	431a      	orrs	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	061b      	lsls	r3, r3, #24
 80063c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063cc:	4931      	ldr	r1, [pc, #196]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80063d2:	4b30      	ldr	r3, [pc, #192]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	492d      	ldr	r1, [pc, #180]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80063e4:	4b2b      	ldr	r3, [pc, #172]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	f023 0220 	bic.w	r2, r3, #32
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	4928      	ldr	r1, [pc, #160]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063f6:	4b27      	ldr	r3, [pc, #156]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	4a26      	ldr	r2, [pc, #152]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 80063fc:	f023 0310 	bic.w	r3, r3, #16
 8006400:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006402:	4b24      	ldr	r3, [pc, #144]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006406:	4b24      	ldr	r3, [pc, #144]	; (8006498 <RCCEx_PLL2_Config+0x160>)
 8006408:	4013      	ands	r3, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	69d2      	ldr	r2, [r2, #28]
 800640e:	00d2      	lsls	r2, r2, #3
 8006410:	4920      	ldr	r1, [pc, #128]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006412:	4313      	orrs	r3, r2
 8006414:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006416:	4b1f      	ldr	r3, [pc, #124]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	4a1e      	ldr	r2, [pc, #120]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800641c:	f043 0310 	orr.w	r3, r3, #16
 8006420:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d106      	bne.n	8006436 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006428:	4b1a      	ldr	r3, [pc, #104]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	4a19      	ldr	r2, [pc, #100]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800642e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006432:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006434:	e00f      	b.n	8006456 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d106      	bne.n	800644a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800643c:	4b15      	ldr	r3, [pc, #84]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	4a14      	ldr	r2, [pc, #80]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006446:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006448:	e005      	b.n	8006456 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800644a:	4b12      	ldr	r3, [pc, #72]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	4a11      	ldr	r2, [pc, #68]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006450:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006454:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006456:	4b0f      	ldr	r3, [pc, #60]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a0e      	ldr	r2, [pc, #56]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800645c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006462:	f7fc f99f 	bl	80027a4 <HAL_GetTick>
 8006466:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006468:	e008      	b.n	800647c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800646a:	f7fc f99b 	bl	80027a4 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d901      	bls.n	800647c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e006      	b.n	800648a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800647c:	4b05      	ldr	r3, [pc, #20]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0f0      	beq.n	800646a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	58024400 	.word	0x58024400
 8006498:	ffff0007 	.word	0xffff0007

0800649c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064aa:	4b53      	ldr	r3, [pc, #332]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d101      	bne.n	80064ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e099      	b.n	80065ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80064ba:	4b4f      	ldr	r3, [pc, #316]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a4e      	ldr	r2, [pc, #312]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80064c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c6:	f7fc f96d 	bl	80027a4 <HAL_GetTick>
 80064ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064cc:	e008      	b.n	80064e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80064ce:	f7fc f969 	bl	80027a4 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e086      	b.n	80065ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064e0:	4b45      	ldr	r3, [pc, #276]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f0      	bne.n	80064ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80064ec:	4b42      	ldr	r3, [pc, #264]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	051b      	lsls	r3, r3, #20
 80064fa:	493f      	ldr	r1, [pc, #252]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	628b      	str	r3, [r1, #40]	; 0x28
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	3b01      	subs	r3, #1
 8006506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	3b01      	subs	r3, #1
 8006510:	025b      	lsls	r3, r3, #9
 8006512:	b29b      	uxth	r3, r3
 8006514:	431a      	orrs	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	3b01      	subs	r3, #1
 800651c:	041b      	lsls	r3, r3, #16
 800651e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	3b01      	subs	r3, #1
 800652a:	061b      	lsls	r3, r3, #24
 800652c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006530:	4931      	ldr	r1, [pc, #196]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006532:	4313      	orrs	r3, r2
 8006534:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006536:	4b30      	ldr	r3, [pc, #192]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	492d      	ldr	r1, [pc, #180]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006544:	4313      	orrs	r3, r2
 8006546:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006548:	4b2b      	ldr	r3, [pc, #172]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	4928      	ldr	r1, [pc, #160]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006556:	4313      	orrs	r3, r2
 8006558:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800655a:	4b27      	ldr	r3, [pc, #156]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	4a26      	ldr	r2, [pc, #152]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006564:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006566:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800656a:	4b24      	ldr	r3, [pc, #144]	; (80065fc <RCCEx_PLL3_Config+0x160>)
 800656c:	4013      	ands	r3, r2
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	69d2      	ldr	r2, [r2, #28]
 8006572:	00d2      	lsls	r2, r2, #3
 8006574:	4920      	ldr	r1, [pc, #128]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006576:	4313      	orrs	r3, r2
 8006578:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800657a:	4b1f      	ldr	r3, [pc, #124]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 800657c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657e:	4a1e      	ldr	r2, [pc, #120]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006584:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d106      	bne.n	800659a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800658c:	4b1a      	ldr	r3, [pc, #104]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	4a19      	ldr	r2, [pc, #100]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006592:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006596:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006598:	e00f      	b.n	80065ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d106      	bne.n	80065ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80065a0:	4b15      	ldr	r3, [pc, #84]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	4a14      	ldr	r2, [pc, #80]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80065a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065ac:	e005      	b.n	80065ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80065ae:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80065b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b2:	4a11      	ldr	r2, [pc, #68]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80065b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80065ba:	4b0f      	ldr	r3, [pc, #60]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a0e      	ldr	r2, [pc, #56]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80065c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065c6:	f7fc f8ed 	bl	80027a4 <HAL_GetTick>
 80065ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065cc:	e008      	b.n	80065e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80065ce:	f7fc f8e9 	bl	80027a4 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d901      	bls.n	80065e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e006      	b.n	80065ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065e0:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0f0      	beq.n	80065ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	58024400 	.word	0x58024400
 80065fc:	ffff0007 	.word	0xffff0007

08006600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e042      	b.n	8006698 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006618:	2b00      	cmp	r3, #0
 800661a:	d106      	bne.n	800662a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7fb fe95 	bl	8002354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2224      	movs	r2, #36	; 0x24
 800662e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0201 	bic.w	r2, r2, #1
 8006640:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f82c 	bl	80066a0 <UART_SetConfig>
 8006648:	4603      	mov	r3, r0
 800664a:	2b01      	cmp	r3, #1
 800664c:	d101      	bne.n	8006652 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e022      	b.n	8006698 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fd88 	bl	8007170 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800666e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800667e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fe0f 	bl	80072b4 <UART_CheckIdleState>
 8006696:	4603      	mov	r3, r0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a4:	b092      	sub	sp, #72	; 0x48
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	431a      	orrs	r2, r3
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	431a      	orrs	r2, r3
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4bbe      	ldr	r3, [pc, #760]	; (80069c8 <UART_SetConfig+0x328>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	6812      	ldr	r2, [r2, #0]
 80066d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066d8:	430b      	orrs	r3, r1
 80066da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4ab3      	ldr	r2, [pc, #716]	; (80069cc <UART_SetConfig+0x32c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006708:	4313      	orrs	r3, r2
 800670a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	4baf      	ldr	r3, [pc, #700]	; (80069d0 <UART_SetConfig+0x330>)
 8006714:	4013      	ands	r3, r2
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800671c:	430b      	orrs	r3, r1
 800671e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006726:	f023 010f 	bic.w	r1, r3, #15
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4aa6      	ldr	r2, [pc, #664]	; (80069d4 <UART_SetConfig+0x334>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d177      	bne.n	8006830 <UART_SetConfig+0x190>
 8006740:	4ba5      	ldr	r3, [pc, #660]	; (80069d8 <UART_SetConfig+0x338>)
 8006742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006744:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006748:	2b28      	cmp	r3, #40	; 0x28
 800674a:	d86d      	bhi.n	8006828 <UART_SetConfig+0x188>
 800674c:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <UART_SetConfig+0xb4>)
 800674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006752:	bf00      	nop
 8006754:	080067f9 	.word	0x080067f9
 8006758:	08006829 	.word	0x08006829
 800675c:	08006829 	.word	0x08006829
 8006760:	08006829 	.word	0x08006829
 8006764:	08006829 	.word	0x08006829
 8006768:	08006829 	.word	0x08006829
 800676c:	08006829 	.word	0x08006829
 8006770:	08006829 	.word	0x08006829
 8006774:	08006801 	.word	0x08006801
 8006778:	08006829 	.word	0x08006829
 800677c:	08006829 	.word	0x08006829
 8006780:	08006829 	.word	0x08006829
 8006784:	08006829 	.word	0x08006829
 8006788:	08006829 	.word	0x08006829
 800678c:	08006829 	.word	0x08006829
 8006790:	08006829 	.word	0x08006829
 8006794:	08006809 	.word	0x08006809
 8006798:	08006829 	.word	0x08006829
 800679c:	08006829 	.word	0x08006829
 80067a0:	08006829 	.word	0x08006829
 80067a4:	08006829 	.word	0x08006829
 80067a8:	08006829 	.word	0x08006829
 80067ac:	08006829 	.word	0x08006829
 80067b0:	08006829 	.word	0x08006829
 80067b4:	08006811 	.word	0x08006811
 80067b8:	08006829 	.word	0x08006829
 80067bc:	08006829 	.word	0x08006829
 80067c0:	08006829 	.word	0x08006829
 80067c4:	08006829 	.word	0x08006829
 80067c8:	08006829 	.word	0x08006829
 80067cc:	08006829 	.word	0x08006829
 80067d0:	08006829 	.word	0x08006829
 80067d4:	08006819 	.word	0x08006819
 80067d8:	08006829 	.word	0x08006829
 80067dc:	08006829 	.word	0x08006829
 80067e0:	08006829 	.word	0x08006829
 80067e4:	08006829 	.word	0x08006829
 80067e8:	08006829 	.word	0x08006829
 80067ec:	08006829 	.word	0x08006829
 80067f0:	08006829 	.word	0x08006829
 80067f4:	08006821 	.word	0x08006821
 80067f8:	2301      	movs	r3, #1
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067fe:	e222      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006800:	2304      	movs	r3, #4
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006806:	e21e      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006808:	2308      	movs	r3, #8
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800680e:	e21a      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006810:	2310      	movs	r3, #16
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006816:	e216      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006818:	2320      	movs	r3, #32
 800681a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800681e:	e212      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006820:	2340      	movs	r3, #64	; 0x40
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006826:	e20e      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006828:	2380      	movs	r3, #128	; 0x80
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800682e:	e20a      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a69      	ldr	r2, [pc, #420]	; (80069dc <UART_SetConfig+0x33c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d130      	bne.n	800689c <UART_SetConfig+0x1fc>
 800683a:	4b67      	ldr	r3, [pc, #412]	; (80069d8 <UART_SetConfig+0x338>)
 800683c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	2b05      	cmp	r3, #5
 8006844:	d826      	bhi.n	8006894 <UART_SetConfig+0x1f4>
 8006846:	a201      	add	r2, pc, #4	; (adr r2, 800684c <UART_SetConfig+0x1ac>)
 8006848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684c:	08006865 	.word	0x08006865
 8006850:	0800686d 	.word	0x0800686d
 8006854:	08006875 	.word	0x08006875
 8006858:	0800687d 	.word	0x0800687d
 800685c:	08006885 	.word	0x08006885
 8006860:	0800688d 	.word	0x0800688d
 8006864:	2300      	movs	r3, #0
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800686a:	e1ec      	b.n	8006c46 <UART_SetConfig+0x5a6>
 800686c:	2304      	movs	r3, #4
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006872:	e1e8      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006874:	2308      	movs	r3, #8
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800687a:	e1e4      	b.n	8006c46 <UART_SetConfig+0x5a6>
 800687c:	2310      	movs	r3, #16
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006882:	e1e0      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006884:	2320      	movs	r3, #32
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800688a:	e1dc      	b.n	8006c46 <UART_SetConfig+0x5a6>
 800688c:	2340      	movs	r3, #64	; 0x40
 800688e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006892:	e1d8      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006894:	2380      	movs	r3, #128	; 0x80
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689a:	e1d4      	b.n	8006c46 <UART_SetConfig+0x5a6>
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a4f      	ldr	r2, [pc, #316]	; (80069e0 <UART_SetConfig+0x340>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d130      	bne.n	8006908 <UART_SetConfig+0x268>
 80068a6:	4b4c      	ldr	r3, [pc, #304]	; (80069d8 <UART_SetConfig+0x338>)
 80068a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	2b05      	cmp	r3, #5
 80068b0:	d826      	bhi.n	8006900 <UART_SetConfig+0x260>
 80068b2:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <UART_SetConfig+0x218>)
 80068b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b8:	080068d1 	.word	0x080068d1
 80068bc:	080068d9 	.word	0x080068d9
 80068c0:	080068e1 	.word	0x080068e1
 80068c4:	080068e9 	.word	0x080068e9
 80068c8:	080068f1 	.word	0x080068f1
 80068cc:	080068f9 	.word	0x080068f9
 80068d0:	2300      	movs	r3, #0
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068d6:	e1b6      	b.n	8006c46 <UART_SetConfig+0x5a6>
 80068d8:	2304      	movs	r3, #4
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068de:	e1b2      	b.n	8006c46 <UART_SetConfig+0x5a6>
 80068e0:	2308      	movs	r3, #8
 80068e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068e6:	e1ae      	b.n	8006c46 <UART_SetConfig+0x5a6>
 80068e8:	2310      	movs	r3, #16
 80068ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ee:	e1aa      	b.n	8006c46 <UART_SetConfig+0x5a6>
 80068f0:	2320      	movs	r3, #32
 80068f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068f6:	e1a6      	b.n	8006c46 <UART_SetConfig+0x5a6>
 80068f8:	2340      	movs	r3, #64	; 0x40
 80068fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068fe:	e1a2      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006900:	2380      	movs	r3, #128	; 0x80
 8006902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006906:	e19e      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a35      	ldr	r2, [pc, #212]	; (80069e4 <UART_SetConfig+0x344>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d130      	bne.n	8006974 <UART_SetConfig+0x2d4>
 8006912:	4b31      	ldr	r3, [pc, #196]	; (80069d8 <UART_SetConfig+0x338>)
 8006914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	2b05      	cmp	r3, #5
 800691c:	d826      	bhi.n	800696c <UART_SetConfig+0x2cc>
 800691e:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <UART_SetConfig+0x284>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	0800693d 	.word	0x0800693d
 8006928:	08006945 	.word	0x08006945
 800692c:	0800694d 	.word	0x0800694d
 8006930:	08006955 	.word	0x08006955
 8006934:	0800695d 	.word	0x0800695d
 8006938:	08006965 	.word	0x08006965
 800693c:	2300      	movs	r3, #0
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006942:	e180      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006944:	2304      	movs	r3, #4
 8006946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800694a:	e17c      	b.n	8006c46 <UART_SetConfig+0x5a6>
 800694c:	2308      	movs	r3, #8
 800694e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006952:	e178      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006954:	2310      	movs	r3, #16
 8006956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800695a:	e174      	b.n	8006c46 <UART_SetConfig+0x5a6>
 800695c:	2320      	movs	r3, #32
 800695e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006962:	e170      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006964:	2340      	movs	r3, #64	; 0x40
 8006966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800696a:	e16c      	b.n	8006c46 <UART_SetConfig+0x5a6>
 800696c:	2380      	movs	r3, #128	; 0x80
 800696e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006972:	e168      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1b      	ldr	r2, [pc, #108]	; (80069e8 <UART_SetConfig+0x348>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d142      	bne.n	8006a04 <UART_SetConfig+0x364>
 800697e:	4b16      	ldr	r3, [pc, #88]	; (80069d8 <UART_SetConfig+0x338>)
 8006980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006982:	f003 0307 	and.w	r3, r3, #7
 8006986:	2b05      	cmp	r3, #5
 8006988:	d838      	bhi.n	80069fc <UART_SetConfig+0x35c>
 800698a:	a201      	add	r2, pc, #4	; (adr r2, 8006990 <UART_SetConfig+0x2f0>)
 800698c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006990:	080069a9 	.word	0x080069a9
 8006994:	080069b1 	.word	0x080069b1
 8006998:	080069b9 	.word	0x080069b9
 800699c:	080069c1 	.word	0x080069c1
 80069a0:	080069ed 	.word	0x080069ed
 80069a4:	080069f5 	.word	0x080069f5
 80069a8:	2300      	movs	r3, #0
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ae:	e14a      	b.n	8006c46 <UART_SetConfig+0x5a6>
 80069b0:	2304      	movs	r3, #4
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069b6:	e146      	b.n	8006c46 <UART_SetConfig+0x5a6>
 80069b8:	2308      	movs	r3, #8
 80069ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069be:	e142      	b.n	8006c46 <UART_SetConfig+0x5a6>
 80069c0:	2310      	movs	r3, #16
 80069c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069c6:	e13e      	b.n	8006c46 <UART_SetConfig+0x5a6>
 80069c8:	cfff69f3 	.word	0xcfff69f3
 80069cc:	58000c00 	.word	0x58000c00
 80069d0:	11fff4ff 	.word	0x11fff4ff
 80069d4:	40011000 	.word	0x40011000
 80069d8:	58024400 	.word	0x58024400
 80069dc:	40004400 	.word	0x40004400
 80069e0:	40004800 	.word	0x40004800
 80069e4:	40004c00 	.word	0x40004c00
 80069e8:	40005000 	.word	0x40005000
 80069ec:	2320      	movs	r3, #32
 80069ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069f2:	e128      	b.n	8006c46 <UART_SetConfig+0x5a6>
 80069f4:	2340      	movs	r3, #64	; 0x40
 80069f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069fa:	e124      	b.n	8006c46 <UART_SetConfig+0x5a6>
 80069fc:	2380      	movs	r3, #128	; 0x80
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a02:	e120      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4acb      	ldr	r2, [pc, #812]	; (8006d38 <UART_SetConfig+0x698>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d176      	bne.n	8006afc <UART_SetConfig+0x45c>
 8006a0e:	4bcb      	ldr	r3, [pc, #812]	; (8006d3c <UART_SetConfig+0x69c>)
 8006a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a16:	2b28      	cmp	r3, #40	; 0x28
 8006a18:	d86c      	bhi.n	8006af4 <UART_SetConfig+0x454>
 8006a1a:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <UART_SetConfig+0x380>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006ac5 	.word	0x08006ac5
 8006a24:	08006af5 	.word	0x08006af5
 8006a28:	08006af5 	.word	0x08006af5
 8006a2c:	08006af5 	.word	0x08006af5
 8006a30:	08006af5 	.word	0x08006af5
 8006a34:	08006af5 	.word	0x08006af5
 8006a38:	08006af5 	.word	0x08006af5
 8006a3c:	08006af5 	.word	0x08006af5
 8006a40:	08006acd 	.word	0x08006acd
 8006a44:	08006af5 	.word	0x08006af5
 8006a48:	08006af5 	.word	0x08006af5
 8006a4c:	08006af5 	.word	0x08006af5
 8006a50:	08006af5 	.word	0x08006af5
 8006a54:	08006af5 	.word	0x08006af5
 8006a58:	08006af5 	.word	0x08006af5
 8006a5c:	08006af5 	.word	0x08006af5
 8006a60:	08006ad5 	.word	0x08006ad5
 8006a64:	08006af5 	.word	0x08006af5
 8006a68:	08006af5 	.word	0x08006af5
 8006a6c:	08006af5 	.word	0x08006af5
 8006a70:	08006af5 	.word	0x08006af5
 8006a74:	08006af5 	.word	0x08006af5
 8006a78:	08006af5 	.word	0x08006af5
 8006a7c:	08006af5 	.word	0x08006af5
 8006a80:	08006add 	.word	0x08006add
 8006a84:	08006af5 	.word	0x08006af5
 8006a88:	08006af5 	.word	0x08006af5
 8006a8c:	08006af5 	.word	0x08006af5
 8006a90:	08006af5 	.word	0x08006af5
 8006a94:	08006af5 	.word	0x08006af5
 8006a98:	08006af5 	.word	0x08006af5
 8006a9c:	08006af5 	.word	0x08006af5
 8006aa0:	08006ae5 	.word	0x08006ae5
 8006aa4:	08006af5 	.word	0x08006af5
 8006aa8:	08006af5 	.word	0x08006af5
 8006aac:	08006af5 	.word	0x08006af5
 8006ab0:	08006af5 	.word	0x08006af5
 8006ab4:	08006af5 	.word	0x08006af5
 8006ab8:	08006af5 	.word	0x08006af5
 8006abc:	08006af5 	.word	0x08006af5
 8006ac0:	08006aed 	.word	0x08006aed
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aca:	e0bc      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006acc:	2304      	movs	r3, #4
 8006ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ad2:	e0b8      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ada:	e0b4      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006adc:	2310      	movs	r3, #16
 8006ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ae2:	e0b0      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006ae4:	2320      	movs	r3, #32
 8006ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aea:	e0ac      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006aec:	2340      	movs	r3, #64	; 0x40
 8006aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af2:	e0a8      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006af4:	2380      	movs	r3, #128	; 0x80
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afa:	e0a4      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a8f      	ldr	r2, [pc, #572]	; (8006d40 <UART_SetConfig+0x6a0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d130      	bne.n	8006b68 <UART_SetConfig+0x4c8>
 8006b06:	4b8d      	ldr	r3, [pc, #564]	; (8006d3c <UART_SetConfig+0x69c>)
 8006b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	2b05      	cmp	r3, #5
 8006b10:	d826      	bhi.n	8006b60 <UART_SetConfig+0x4c0>
 8006b12:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <UART_SetConfig+0x478>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b31 	.word	0x08006b31
 8006b1c:	08006b39 	.word	0x08006b39
 8006b20:	08006b41 	.word	0x08006b41
 8006b24:	08006b49 	.word	0x08006b49
 8006b28:	08006b51 	.word	0x08006b51
 8006b2c:	08006b59 	.word	0x08006b59
 8006b30:	2300      	movs	r3, #0
 8006b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b36:	e086      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006b38:	2304      	movs	r3, #4
 8006b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b3e:	e082      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006b40:	2308      	movs	r3, #8
 8006b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b46:	e07e      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006b48:	2310      	movs	r3, #16
 8006b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b4e:	e07a      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006b50:	2320      	movs	r3, #32
 8006b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b56:	e076      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006b58:	2340      	movs	r3, #64	; 0x40
 8006b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b5e:	e072      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006b60:	2380      	movs	r3, #128	; 0x80
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b66:	e06e      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a75      	ldr	r2, [pc, #468]	; (8006d44 <UART_SetConfig+0x6a4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d130      	bne.n	8006bd4 <UART_SetConfig+0x534>
 8006b72:	4b72      	ldr	r3, [pc, #456]	; (8006d3c <UART_SetConfig+0x69c>)
 8006b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	2b05      	cmp	r3, #5
 8006b7c:	d826      	bhi.n	8006bcc <UART_SetConfig+0x52c>
 8006b7e:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <UART_SetConfig+0x4e4>)
 8006b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b84:	08006b9d 	.word	0x08006b9d
 8006b88:	08006ba5 	.word	0x08006ba5
 8006b8c:	08006bad 	.word	0x08006bad
 8006b90:	08006bb5 	.word	0x08006bb5
 8006b94:	08006bbd 	.word	0x08006bbd
 8006b98:	08006bc5 	.word	0x08006bc5
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ba2:	e050      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006baa:	e04c      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006bac:	2308      	movs	r3, #8
 8006bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bb2:	e048      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006bb4:	2310      	movs	r3, #16
 8006bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bba:	e044      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006bbc:	2320      	movs	r3, #32
 8006bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bc2:	e040      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006bc4:	2340      	movs	r3, #64	; 0x40
 8006bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bca:	e03c      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006bcc:	2380      	movs	r3, #128	; 0x80
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bd2:	e038      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a5b      	ldr	r2, [pc, #364]	; (8006d48 <UART_SetConfig+0x6a8>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d130      	bne.n	8006c40 <UART_SetConfig+0x5a0>
 8006bde:	4b57      	ldr	r3, [pc, #348]	; (8006d3c <UART_SetConfig+0x69c>)
 8006be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	2b05      	cmp	r3, #5
 8006be8:	d826      	bhi.n	8006c38 <UART_SetConfig+0x598>
 8006bea:	a201      	add	r2, pc, #4	; (adr r2, 8006bf0 <UART_SetConfig+0x550>)
 8006bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf0:	08006c09 	.word	0x08006c09
 8006bf4:	08006c11 	.word	0x08006c11
 8006bf8:	08006c19 	.word	0x08006c19
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c29 	.word	0x08006c29
 8006c04:	08006c31 	.word	0x08006c31
 8006c08:	2302      	movs	r3, #2
 8006c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0e:	e01a      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006c10:	2304      	movs	r3, #4
 8006c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c16:	e016      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006c18:	2308      	movs	r3, #8
 8006c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1e:	e012      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006c20:	2310      	movs	r3, #16
 8006c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c26:	e00e      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006c28:	2320      	movs	r3, #32
 8006c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c2e:	e00a      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006c30:	2340      	movs	r3, #64	; 0x40
 8006c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c36:	e006      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006c38:	2380      	movs	r3, #128	; 0x80
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c3e:	e002      	b.n	8006c46 <UART_SetConfig+0x5a6>
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a3f      	ldr	r2, [pc, #252]	; (8006d48 <UART_SetConfig+0x6a8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	f040 80f8 	bne.w	8006e42 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c56:	2b20      	cmp	r3, #32
 8006c58:	dc46      	bgt.n	8006ce8 <UART_SetConfig+0x648>
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	f2c0 8082 	blt.w	8006d64 <UART_SetConfig+0x6c4>
 8006c60:	3b02      	subs	r3, #2
 8006c62:	2b1e      	cmp	r3, #30
 8006c64:	d87e      	bhi.n	8006d64 <UART_SetConfig+0x6c4>
 8006c66:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <UART_SetConfig+0x5cc>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006cef 	.word	0x08006cef
 8006c70:	08006d65 	.word	0x08006d65
 8006c74:	08006cf7 	.word	0x08006cf7
 8006c78:	08006d65 	.word	0x08006d65
 8006c7c:	08006d65 	.word	0x08006d65
 8006c80:	08006d65 	.word	0x08006d65
 8006c84:	08006d07 	.word	0x08006d07
 8006c88:	08006d65 	.word	0x08006d65
 8006c8c:	08006d65 	.word	0x08006d65
 8006c90:	08006d65 	.word	0x08006d65
 8006c94:	08006d65 	.word	0x08006d65
 8006c98:	08006d65 	.word	0x08006d65
 8006c9c:	08006d65 	.word	0x08006d65
 8006ca0:	08006d65 	.word	0x08006d65
 8006ca4:	08006d17 	.word	0x08006d17
 8006ca8:	08006d65 	.word	0x08006d65
 8006cac:	08006d65 	.word	0x08006d65
 8006cb0:	08006d65 	.word	0x08006d65
 8006cb4:	08006d65 	.word	0x08006d65
 8006cb8:	08006d65 	.word	0x08006d65
 8006cbc:	08006d65 	.word	0x08006d65
 8006cc0:	08006d65 	.word	0x08006d65
 8006cc4:	08006d65 	.word	0x08006d65
 8006cc8:	08006d65 	.word	0x08006d65
 8006ccc:	08006d65 	.word	0x08006d65
 8006cd0:	08006d65 	.word	0x08006d65
 8006cd4:	08006d65 	.word	0x08006d65
 8006cd8:	08006d65 	.word	0x08006d65
 8006cdc:	08006d65 	.word	0x08006d65
 8006ce0:	08006d65 	.word	0x08006d65
 8006ce4:	08006d57 	.word	0x08006d57
 8006ce8:	2b40      	cmp	r3, #64	; 0x40
 8006cea:	d037      	beq.n	8006d5c <UART_SetConfig+0x6bc>
 8006cec:	e03a      	b.n	8006d64 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006cee:	f7ff f865 	bl	8005dbc <HAL_RCCEx_GetD3PCLK1Freq>
 8006cf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006cf4:	e03c      	b.n	8006d70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff f874 	bl	8005de8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d04:	e034      	b.n	8006d70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d06:	f107 0318 	add.w	r3, r7, #24
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7ff f9c0 	bl	8006090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d14:	e02c      	b.n	8006d70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d16:	4b09      	ldr	r3, [pc, #36]	; (8006d3c <UART_SetConfig+0x69c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d016      	beq.n	8006d50 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d22:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <UART_SetConfig+0x69c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	08db      	lsrs	r3, r3, #3
 8006d28:	f003 0303 	and.w	r3, r3, #3
 8006d2c:	4a07      	ldr	r2, [pc, #28]	; (8006d4c <UART_SetConfig+0x6ac>)
 8006d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d34:	e01c      	b.n	8006d70 <UART_SetConfig+0x6d0>
 8006d36:	bf00      	nop
 8006d38:	40011400 	.word	0x40011400
 8006d3c:	58024400 	.word	0x58024400
 8006d40:	40007800 	.word	0x40007800
 8006d44:	40007c00 	.word	0x40007c00
 8006d48:	58000c00 	.word	0x58000c00
 8006d4c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006d50:	4b9d      	ldr	r3, [pc, #628]	; (8006fc8 <UART_SetConfig+0x928>)
 8006d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d54:	e00c      	b.n	8006d70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d56:	4b9d      	ldr	r3, [pc, #628]	; (8006fcc <UART_SetConfig+0x92c>)
 8006d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d5a:	e009      	b.n	8006d70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d62:	e005      	b.n	8006d70 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006d6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 81de 	beq.w	8007134 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	4a94      	ldr	r2, [pc, #592]	; (8006fd0 <UART_SetConfig+0x930>)
 8006d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d82:	461a      	mov	r2, r3
 8006d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d86:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d8a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	4413      	add	r3, r2
 8006d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d305      	bcc.n	8006da8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d903      	bls.n	8006db0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006dae:	e1c1      	b.n	8007134 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db2:	2200      	movs	r2, #0
 8006db4:	60bb      	str	r3, [r7, #8]
 8006db6:	60fa      	str	r2, [r7, #12]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	4a84      	ldr	r2, [pc, #528]	; (8006fd0 <UART_SetConfig+0x930>)
 8006dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	603b      	str	r3, [r7, #0]
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dd2:	f7f9 fa81 	bl	80002d8 <__aeabi_uldivmod>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	4610      	mov	r0, r2
 8006ddc:	4619      	mov	r1, r3
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	f04f 0300 	mov.w	r3, #0
 8006de6:	020b      	lsls	r3, r1, #8
 8006de8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dec:	0202      	lsls	r2, r0, #8
 8006dee:	6979      	ldr	r1, [r7, #20]
 8006df0:	6849      	ldr	r1, [r1, #4]
 8006df2:	0849      	lsrs	r1, r1, #1
 8006df4:	2000      	movs	r0, #0
 8006df6:	460c      	mov	r4, r1
 8006df8:	4605      	mov	r5, r0
 8006dfa:	eb12 0804 	adds.w	r8, r2, r4
 8006dfe:	eb43 0905 	adc.w	r9, r3, r5
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	469a      	mov	sl, r3
 8006e0a:	4693      	mov	fp, r2
 8006e0c:	4652      	mov	r2, sl
 8006e0e:	465b      	mov	r3, fp
 8006e10:	4640      	mov	r0, r8
 8006e12:	4649      	mov	r1, r9
 8006e14:	f7f9 fa60 	bl	80002d8 <__aeabi_uldivmod>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e26:	d308      	bcc.n	8006e3a <UART_SetConfig+0x79a>
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e2e:	d204      	bcs.n	8006e3a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e36:	60da      	str	r2, [r3, #12]
 8006e38:	e17c      	b.n	8007134 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006e40:	e178      	b.n	8007134 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e4a:	f040 80c5 	bne.w	8006fd8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006e4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e52:	2b20      	cmp	r3, #32
 8006e54:	dc48      	bgt.n	8006ee8 <UART_SetConfig+0x848>
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	db7b      	blt.n	8006f52 <UART_SetConfig+0x8b2>
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	d879      	bhi.n	8006f52 <UART_SetConfig+0x8b2>
 8006e5e:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <UART_SetConfig+0x7c4>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006eef 	.word	0x08006eef
 8006e68:	08006ef7 	.word	0x08006ef7
 8006e6c:	08006f53 	.word	0x08006f53
 8006e70:	08006f53 	.word	0x08006f53
 8006e74:	08006eff 	.word	0x08006eff
 8006e78:	08006f53 	.word	0x08006f53
 8006e7c:	08006f53 	.word	0x08006f53
 8006e80:	08006f53 	.word	0x08006f53
 8006e84:	08006f0f 	.word	0x08006f0f
 8006e88:	08006f53 	.word	0x08006f53
 8006e8c:	08006f53 	.word	0x08006f53
 8006e90:	08006f53 	.word	0x08006f53
 8006e94:	08006f53 	.word	0x08006f53
 8006e98:	08006f53 	.word	0x08006f53
 8006e9c:	08006f53 	.word	0x08006f53
 8006ea0:	08006f53 	.word	0x08006f53
 8006ea4:	08006f1f 	.word	0x08006f1f
 8006ea8:	08006f53 	.word	0x08006f53
 8006eac:	08006f53 	.word	0x08006f53
 8006eb0:	08006f53 	.word	0x08006f53
 8006eb4:	08006f53 	.word	0x08006f53
 8006eb8:	08006f53 	.word	0x08006f53
 8006ebc:	08006f53 	.word	0x08006f53
 8006ec0:	08006f53 	.word	0x08006f53
 8006ec4:	08006f53 	.word	0x08006f53
 8006ec8:	08006f53 	.word	0x08006f53
 8006ecc:	08006f53 	.word	0x08006f53
 8006ed0:	08006f53 	.word	0x08006f53
 8006ed4:	08006f53 	.word	0x08006f53
 8006ed8:	08006f53 	.word	0x08006f53
 8006edc:	08006f53 	.word	0x08006f53
 8006ee0:	08006f53 	.word	0x08006f53
 8006ee4:	08006f45 	.word	0x08006f45
 8006ee8:	2b40      	cmp	r3, #64	; 0x40
 8006eea:	d02e      	beq.n	8006f4a <UART_SetConfig+0x8aa>
 8006eec:	e031      	b.n	8006f52 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eee:	f7fd fd2f 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 8006ef2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ef4:	e033      	b.n	8006f5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ef6:	f7fd fd41 	bl	800497c <HAL_RCC_GetPCLK2Freq>
 8006efa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006efc:	e02f      	b.n	8006f5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fe ff70 	bl	8005de8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f0c:	e027      	b.n	8006f5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f0e:	f107 0318 	add.w	r3, r7, #24
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff f8bc 	bl	8006090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f1c:	e01f      	b.n	8006f5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f1e:	4b2d      	ldr	r3, [pc, #180]	; (8006fd4 <UART_SetConfig+0x934>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0320 	and.w	r3, r3, #32
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d009      	beq.n	8006f3e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f2a:	4b2a      	ldr	r3, [pc, #168]	; (8006fd4 <UART_SetConfig+0x934>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	08db      	lsrs	r3, r3, #3
 8006f30:	f003 0303 	and.w	r3, r3, #3
 8006f34:	4a24      	ldr	r2, [pc, #144]	; (8006fc8 <UART_SetConfig+0x928>)
 8006f36:	fa22 f303 	lsr.w	r3, r2, r3
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f3c:	e00f      	b.n	8006f5e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006f3e:	4b22      	ldr	r3, [pc, #136]	; (8006fc8 <UART_SetConfig+0x928>)
 8006f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f42:	e00c      	b.n	8006f5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f44:	4b21      	ldr	r3, [pc, #132]	; (8006fcc <UART_SetConfig+0x92c>)
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f48:	e009      	b.n	8006f5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f50:	e005      	b.n	8006f5e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006f5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 80e7 	beq.w	8007134 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	4a19      	ldr	r2, [pc, #100]	; (8006fd0 <UART_SetConfig+0x930>)
 8006f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f70:	461a      	mov	r2, r3
 8006f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f78:	005a      	lsls	r2, r3, #1
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	085b      	lsrs	r3, r3, #1
 8006f80:	441a      	add	r2, r3
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f8a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	2b0f      	cmp	r3, #15
 8006f90:	d916      	bls.n	8006fc0 <UART_SetConfig+0x920>
 8006f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f98:	d212      	bcs.n	8006fc0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	f023 030f 	bic.w	r3, r3, #15
 8006fa2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa6:	085b      	lsrs	r3, r3, #1
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f003 0307 	and.w	r3, r3, #7
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006fbc:	60da      	str	r2, [r3, #12]
 8006fbe:	e0b9      	b.n	8007134 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006fc6:	e0b5      	b.n	8007134 <UART_SetConfig+0xa94>
 8006fc8:	03d09000 	.word	0x03d09000
 8006fcc:	003d0900 	.word	0x003d0900
 8006fd0:	080082e4 	.word	0x080082e4
 8006fd4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fd8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006fdc:	2b20      	cmp	r3, #32
 8006fde:	dc49      	bgt.n	8007074 <UART_SetConfig+0x9d4>
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	db7c      	blt.n	80070de <UART_SetConfig+0xa3e>
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	d87a      	bhi.n	80070de <UART_SetConfig+0xa3e>
 8006fe8:	a201      	add	r2, pc, #4	; (adr r2, 8006ff0 <UART_SetConfig+0x950>)
 8006fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fee:	bf00      	nop
 8006ff0:	0800707b 	.word	0x0800707b
 8006ff4:	08007083 	.word	0x08007083
 8006ff8:	080070df 	.word	0x080070df
 8006ffc:	080070df 	.word	0x080070df
 8007000:	0800708b 	.word	0x0800708b
 8007004:	080070df 	.word	0x080070df
 8007008:	080070df 	.word	0x080070df
 800700c:	080070df 	.word	0x080070df
 8007010:	0800709b 	.word	0x0800709b
 8007014:	080070df 	.word	0x080070df
 8007018:	080070df 	.word	0x080070df
 800701c:	080070df 	.word	0x080070df
 8007020:	080070df 	.word	0x080070df
 8007024:	080070df 	.word	0x080070df
 8007028:	080070df 	.word	0x080070df
 800702c:	080070df 	.word	0x080070df
 8007030:	080070ab 	.word	0x080070ab
 8007034:	080070df 	.word	0x080070df
 8007038:	080070df 	.word	0x080070df
 800703c:	080070df 	.word	0x080070df
 8007040:	080070df 	.word	0x080070df
 8007044:	080070df 	.word	0x080070df
 8007048:	080070df 	.word	0x080070df
 800704c:	080070df 	.word	0x080070df
 8007050:	080070df 	.word	0x080070df
 8007054:	080070df 	.word	0x080070df
 8007058:	080070df 	.word	0x080070df
 800705c:	080070df 	.word	0x080070df
 8007060:	080070df 	.word	0x080070df
 8007064:	080070df 	.word	0x080070df
 8007068:	080070df 	.word	0x080070df
 800706c:	080070df 	.word	0x080070df
 8007070:	080070d1 	.word	0x080070d1
 8007074:	2b40      	cmp	r3, #64	; 0x40
 8007076:	d02e      	beq.n	80070d6 <UART_SetConfig+0xa36>
 8007078:	e031      	b.n	80070de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800707a:	f7fd fc69 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 800707e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007080:	e033      	b.n	80070ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007082:	f7fd fc7b 	bl	800497c <HAL_RCC_GetPCLK2Freq>
 8007086:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007088:	e02f      	b.n	80070ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800708a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe feaa 	bl	8005de8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007098:	e027      	b.n	80070ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800709a:	f107 0318 	add.w	r3, r7, #24
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe fff6 	bl	8006090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070a8:	e01f      	b.n	80070ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070aa:	4b2d      	ldr	r3, [pc, #180]	; (8007160 <UART_SetConfig+0xac0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070b6:	4b2a      	ldr	r3, [pc, #168]	; (8007160 <UART_SetConfig+0xac0>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	08db      	lsrs	r3, r3, #3
 80070bc:	f003 0303 	and.w	r3, r3, #3
 80070c0:	4a28      	ldr	r2, [pc, #160]	; (8007164 <UART_SetConfig+0xac4>)
 80070c2:	fa22 f303 	lsr.w	r3, r2, r3
 80070c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070c8:	e00f      	b.n	80070ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80070ca:	4b26      	ldr	r3, [pc, #152]	; (8007164 <UART_SetConfig+0xac4>)
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ce:	e00c      	b.n	80070ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070d0:	4b25      	ldr	r3, [pc, #148]	; (8007168 <UART_SetConfig+0xac8>)
 80070d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070d4:	e009      	b.n	80070ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070dc:	e005      	b.n	80070ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80070e8:	bf00      	nop
    }

    if (pclk != 0U)
 80070ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d021      	beq.n	8007134 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	4a1d      	ldr	r2, [pc, #116]	; (800716c <UART_SetConfig+0xacc>)
 80070f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070fa:	461a      	mov	r2, r3
 80070fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	085b      	lsrs	r3, r3, #1
 8007108:	441a      	add	r2, r3
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007112:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	2b0f      	cmp	r3, #15
 8007118:	d909      	bls.n	800712e <UART_SetConfig+0xa8e>
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007120:	d205      	bcs.n	800712e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007124:	b29a      	uxth	r2, r3
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60da      	str	r2, [r3, #12]
 800712c:	e002      	b.n	8007134 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2201      	movs	r2, #1
 8007138:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2201      	movs	r2, #1
 8007140:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2200      	movs	r2, #0
 8007148:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2200      	movs	r2, #0
 800714e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007150:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007154:	4618      	mov	r0, r3
 8007156:	3748      	adds	r7, #72	; 0x48
 8007158:	46bd      	mov	sp, r7
 800715a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800715e:	bf00      	nop
 8007160:	58024400 	.word	0x58024400
 8007164:	03d09000 	.word	0x03d09000
 8007168:	003d0900 	.word	0x003d0900
 800716c:	080082e4 	.word	0x080082e4

08007170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00a      	beq.n	800719a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	f003 0308 	and.w	r3, r3, #8
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00a      	beq.n	8007200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007204:	f003 0310 	and.w	r3, r3, #16
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00a      	beq.n	8007222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01a      	beq.n	8007286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800726e:	d10a      	bne.n	8007286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	605a      	str	r2, [r3, #4]
  }
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b098      	sub	sp, #96	; 0x60
 80072b8:	af02      	add	r7, sp, #8
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072c4:	f7fb fa6e 	bl	80027a4 <HAL_GetTick>
 80072c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0308 	and.w	r3, r3, #8
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d12f      	bne.n	8007338 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072e0:	2200      	movs	r2, #0
 80072e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f88e 	bl	8007408 <UART_WaitOnFlagUntilTimeout>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d022      	beq.n	8007338 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	e853 3f00 	ldrex	r3, [r3]
 80072fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007306:	653b      	str	r3, [r7, #80]	; 0x50
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	461a      	mov	r2, r3
 800730e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007310:	647b      	str	r3, [r7, #68]	; 0x44
 8007312:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007314:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007318:	e841 2300 	strex	r3, r2, [r1]
 800731c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800731e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e6      	bne.n	80072f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2220      	movs	r2, #32
 8007328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e063      	b.n	8007400 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b04      	cmp	r3, #4
 8007344:	d149      	bne.n	80073da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007346:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800734e:	2200      	movs	r2, #0
 8007350:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f857 	bl	8007408 <UART_WaitOnFlagUntilTimeout>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d03c      	beq.n	80073da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	623b      	str	r3, [r7, #32]
   return(result);
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007374:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800737e:	633b      	str	r3, [r7, #48]	; 0x30
 8007380:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e6      	bne.n	8007360 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3308      	adds	r3, #8
 8007398:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f023 0301 	bic.w	r3, r3, #1
 80073a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3308      	adds	r3, #8
 80073b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073b2:	61fa      	str	r2, [r7, #28]
 80073b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	69b9      	ldr	r1, [r7, #24]
 80073b8:	69fa      	ldr	r2, [r7, #28]
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	617b      	str	r3, [r7, #20]
   return(result);
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e5      	bne.n	8007392 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e012      	b.n	8007400 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2220      	movs	r2, #32
 80073de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3758      	adds	r7, #88	; 0x58
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	4613      	mov	r3, r2
 8007416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007418:	e049      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007420:	d045      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007422:	f7fb f9bf 	bl	80027a4 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	429a      	cmp	r2, r3
 8007430:	d302      	bcc.n	8007438 <UART_WaitOnFlagUntilTimeout+0x30>
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e048      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0304 	and.w	r3, r3, #4
 8007446:	2b00      	cmp	r3, #0
 8007448:	d031      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	f003 0308 	and.w	r3, r3, #8
 8007454:	2b08      	cmp	r3, #8
 8007456:	d110      	bne.n	800747a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2208      	movs	r2, #8
 800745e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f839 	bl	80074d8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2208      	movs	r2, #8
 800746a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e029      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007488:	d111      	bne.n	80074ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f81f 	bl	80074d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2220      	movs	r2, #32
 800749e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e00f      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69da      	ldr	r2, [r3, #28]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4013      	ands	r3, r2
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	bf0c      	ite	eq
 80074be:	2301      	moveq	r3, #1
 80074c0:	2300      	movne	r3, #0
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d0a6      	beq.n	800741a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074d8:	b480      	push	{r7}
 80074da:	b095      	sub	sp, #84	; 0x54
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007500:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800750c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e6      	bne.n	80074e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	61fb      	str	r3, [r7, #28]
   return(result);
 8007522:	69fa      	ldr	r2, [r7, #28]
 8007524:	4b1e      	ldr	r3, [pc, #120]	; (80075a0 <UART_EndRxTransfer+0xc8>)
 8007526:	4013      	ands	r3, r2
 8007528:	64bb      	str	r3, [r7, #72]	; 0x48
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3308      	adds	r3, #8
 8007530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e5      	bne.n	8007512 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800754a:	2b01      	cmp	r3, #1
 800754c:	d118      	bne.n	8007580 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	60bb      	str	r3, [r7, #8]
   return(result);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f023 0310 	bic.w	r3, r3, #16
 8007562:	647b      	str	r3, [r7, #68]	; 0x44
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	6979      	ldr	r1, [r7, #20]
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	613b      	str	r3, [r7, #16]
   return(result);
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e6      	bne.n	800754e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2220      	movs	r2, #32
 8007584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007594:	bf00      	nop
 8007596:	3754      	adds	r7, #84	; 0x54
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	effffffe 	.word	0xeffffffe

080075a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d101      	bne.n	80075ba <HAL_UARTEx_DisableFifoMode+0x16>
 80075b6:	2302      	movs	r3, #2
 80075b8:	e027      	b.n	800760a <HAL_UARTEx_DisableFifoMode+0x66>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2224      	movs	r2, #36	; 0x24
 80075c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0201 	bic.w	r2, r2, #1
 80075e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80075e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2220      	movs	r2, #32
 80075fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007626:	2b01      	cmp	r3, #1
 8007628:	d101      	bne.n	800762e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800762a:	2302      	movs	r3, #2
 800762c:	e02d      	b.n	800768a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2224      	movs	r2, #36	; 0x24
 800763a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0201 	bic.w	r2, r2, #1
 8007654:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f850 	bl	8007710 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2220      	movs	r2, #32
 800767c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e02d      	b.n	8007706 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2224      	movs	r2, #36	; 0x24
 80076b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0201 	bic.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f812 	bl	8007710 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800771c:	2b00      	cmp	r3, #0
 800771e:	d108      	bne.n	8007732 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007730:	e031      	b.n	8007796 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007732:	2310      	movs	r3, #16
 8007734:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007736:	2310      	movs	r3, #16
 8007738:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	0e5b      	lsrs	r3, r3, #25
 8007742:	b2db      	uxtb	r3, r3
 8007744:	f003 0307 	and.w	r3, r3, #7
 8007748:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	0f5b      	lsrs	r3, r3, #29
 8007752:	b2db      	uxtb	r3, r3
 8007754:	f003 0307 	and.w	r3, r3, #7
 8007758:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	7b3a      	ldrb	r2, [r7, #12]
 800775e:	4911      	ldr	r1, [pc, #68]	; (80077a4 <UARTEx_SetNbDataToProcess+0x94>)
 8007760:	5c8a      	ldrb	r2, [r1, r2]
 8007762:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007766:	7b3a      	ldrb	r2, [r7, #12]
 8007768:	490f      	ldr	r1, [pc, #60]	; (80077a8 <UARTEx_SetNbDataToProcess+0x98>)
 800776a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800776c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007770:	b29a      	uxth	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	7b7a      	ldrb	r2, [r7, #13]
 800777c:	4909      	ldr	r1, [pc, #36]	; (80077a4 <UARTEx_SetNbDataToProcess+0x94>)
 800777e:	5c8a      	ldrb	r2, [r1, r2]
 8007780:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007784:	7b7a      	ldrb	r2, [r7, #13]
 8007786:	4908      	ldr	r1, [pc, #32]	; (80077a8 <UARTEx_SetNbDataToProcess+0x98>)
 8007788:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800778a:	fb93 f3f2 	sdiv	r3, r3, r2
 800778e:	b29a      	uxth	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007796:	bf00      	nop
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	080082fc 	.word	0x080082fc
 80077a8:	08008304 	.word	0x08008304

080077ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077ac:	b084      	sub	sp, #16
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	f107 001c 	add.w	r0, r7, #28
 80077ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d120      	bne.n	8007806 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68da      	ldr	r2, [r3, #12]
 80077d4:	4b2a      	ldr	r3, [pc, #168]	; (8007880 <USB_CoreInit+0xd4>)
 80077d6:	4013      	ands	r3, r2
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d105      	bne.n	80077fa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 faac 	bl	8007d58 <USB_CoreReset>
 8007800:	4603      	mov	r3, r0
 8007802:	73fb      	strb	r3, [r7, #15]
 8007804:	e01a      	b.n	800783c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 faa0 	bl	8007d58 <USB_CoreReset>
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800781c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800781e:	2b00      	cmp	r3, #0
 8007820:	d106      	bne.n	8007830 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007826:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	639a      	str	r2, [r3, #56]	; 0x38
 800782e:	e005      	b.n	800783c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	2b01      	cmp	r3, #1
 8007840:	d116      	bne.n	8007870 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007846:	b29a      	uxth	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007850:	4b0c      	ldr	r3, [pc, #48]	; (8007884 <USB_CoreInit+0xd8>)
 8007852:	4313      	orrs	r3, r2
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f043 0206 	orr.w	r2, r3, #6
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f043 0220 	orr.w	r2, r3, #32
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800787c:	b004      	add	sp, #16
 800787e:	4770      	bx	lr
 8007880:	ffbdffbf 	.word	0xffbdffbf
 8007884:	03ee0000 	.word	0x03ee0000

08007888 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f023 0201 	bic.w	r2, r3, #1
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	460b      	mov	r3, r1
 80078b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078c6:	78fb      	ldrb	r3, [r7, #3]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d115      	bne.n	80078f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078d8:	2001      	movs	r0, #1
 80078da:	f7fa ff6f 	bl	80027bc <HAL_Delay>
      ms++;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3301      	adds	r3, #1
 80078e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fa29 	bl	8007d3c <USB_GetMode>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d01e      	beq.n	800792e <USB_SetCurrentMode+0x84>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b31      	cmp	r3, #49	; 0x31
 80078f4:	d9f0      	bls.n	80078d8 <USB_SetCurrentMode+0x2e>
 80078f6:	e01a      	b.n	800792e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d115      	bne.n	800792a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800790a:	2001      	movs	r0, #1
 800790c:	f7fa ff56 	bl	80027bc <HAL_Delay>
      ms++;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	3301      	adds	r3, #1
 8007914:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fa10 	bl	8007d3c <USB_GetMode>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d005      	beq.n	800792e <USB_SetCurrentMode+0x84>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b31      	cmp	r3, #49	; 0x31
 8007926:	d9f0      	bls.n	800790a <USB_SetCurrentMode+0x60>
 8007928:	e001      	b.n	800792e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e005      	b.n	800793a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b32      	cmp	r3, #50	; 0x32
 8007932:	d101      	bne.n	8007938 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e000      	b.n	800793a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007944:	b084      	sub	sp, #16
 8007946:	b580      	push	{r7, lr}
 8007948:	b086      	sub	sp, #24
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800795e:	2300      	movs	r3, #0
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	e009      	b.n	8007978 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	3340      	adds	r3, #64	; 0x40
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	2200      	movs	r2, #0
 8007970:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	3301      	adds	r3, #1
 8007976:	613b      	str	r3, [r7, #16]
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	2b0e      	cmp	r3, #14
 800797c:	d9f2      	bls.n	8007964 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800797e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007980:	2b00      	cmp	r3, #0
 8007982:	d11c      	bne.n	80079be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007992:	f043 0302 	orr.w	r3, r3, #2
 8007996:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	e005      	b.n	80079ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079d0:	461a      	mov	r2, r3
 80079d2:	2300      	movs	r3, #0
 80079d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079dc:	4619      	mov	r1, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e4:	461a      	mov	r2, r3
 80079e6:	680b      	ldr	r3, [r1, #0]
 80079e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d10c      	bne.n	8007a0a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d104      	bne.n	8007a00 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079f6:	2100      	movs	r1, #0
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f965 	bl	8007cc8 <USB_SetDevSpeed>
 80079fe:	e008      	b.n	8007a12 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007a00:	2101      	movs	r1, #1
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f960 	bl	8007cc8 <USB_SetDevSpeed>
 8007a08:	e003      	b.n	8007a12 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a0a:	2103      	movs	r1, #3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f95b 	bl	8007cc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a12:	2110      	movs	r1, #16
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f8f3 	bl	8007c00 <USB_FlushTxFifo>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f91f 	bl	8007c68 <USB_FlushRxFifo>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d001      	beq.n	8007a34 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a46:	461a      	mov	r2, r3
 8007a48:	2300      	movs	r3, #0
 8007a4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a52:	461a      	mov	r2, r3
 8007a54:	2300      	movs	r3, #0
 8007a56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	613b      	str	r3, [r7, #16]
 8007a5c:	e043      	b.n	8007ae6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a74:	d118      	bne.n	8007aa8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10a      	bne.n	8007a92 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a88:	461a      	mov	r2, r3
 8007a8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a8e:	6013      	str	r3, [r2, #0]
 8007a90:	e013      	b.n	8007aba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	e008      	b.n	8007aba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	2300      	movs	r3, #0
 8007aca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad8:	461a      	mov	r2, r3
 8007ada:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ade:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	613b      	str	r3, [r7, #16]
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d3b7      	bcc.n	8007a5e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aee:	2300      	movs	r3, #0
 8007af0:	613b      	str	r3, [r7, #16]
 8007af2:	e043      	b.n	8007b7c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b0a:	d118      	bne.n	8007b3e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1e:	461a      	mov	r2, r3
 8007b20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	e013      	b.n	8007b50 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b34:	461a      	mov	r2, r3
 8007b36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	e008      	b.n	8007b50 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	2300      	movs	r3, #0
 8007b60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	613b      	str	r3, [r7, #16]
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d3b7      	bcc.n	8007af4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ba4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d105      	bne.n	8007bb8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	f043 0210 	orr.w	r2, r3, #16
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	699a      	ldr	r2, [r3, #24]
 8007bbc:	4b0e      	ldr	r3, [pc, #56]	; (8007bf8 <USB_DevInit+0x2b4>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d005      	beq.n	8007bd6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	f043 0208 	orr.w	r2, r3, #8
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d105      	bne.n	8007be8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	699a      	ldr	r2, [r3, #24]
 8007be0:	4b06      	ldr	r3, [pc, #24]	; (8007bfc <USB_DevInit+0x2b8>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bf4:	b004      	add	sp, #16
 8007bf6:	4770      	bx	lr
 8007bf8:	803c3800 	.word	0x803c3800
 8007bfc:	40000004 	.word	0x40000004

08007c00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3301      	adds	r3, #1
 8007c12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4a13      	ldr	r2, [pc, #76]	; (8007c64 <USB_FlushTxFifo+0x64>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d901      	bls.n	8007c20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e01b      	b.n	8007c58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	daf2      	bge.n	8007c0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	019b      	lsls	r3, r3, #6
 8007c30:	f043 0220 	orr.w	r2, r3, #32
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4a08      	ldr	r2, [pc, #32]	; (8007c64 <USB_FlushTxFifo+0x64>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d901      	bls.n	8007c4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e006      	b.n	8007c58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b20      	cmp	r3, #32
 8007c54:	d0f0      	beq.n	8007c38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	00030d40 	.word	0x00030d40

08007c68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3301      	adds	r3, #1
 8007c78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4a11      	ldr	r2, [pc, #68]	; (8007cc4 <USB_FlushRxFifo+0x5c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d901      	bls.n	8007c86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e018      	b.n	8007cb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	daf2      	bge.n	8007c74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2210      	movs	r2, #16
 8007c96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4a08      	ldr	r2, [pc, #32]	; (8007cc4 <USB_FlushRxFifo+0x5c>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d901      	bls.n	8007caa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e006      	b.n	8007cb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	f003 0310 	and.w	r3, r3, #16
 8007cb2:	2b10      	cmp	r3, #16
 8007cb4:	d0f0      	beq.n	8007c98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	00030d40 	.word	0x00030d40

08007cc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	68f9      	ldr	r1, [r7, #12]
 8007ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d14:	f023 0303 	bic.w	r3, r3, #3
 8007d18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d28:	f043 0302 	orr.w	r3, r3, #2
 8007d2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	f003 0301 	and.w	r3, r3, #1
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3301      	adds	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	4a13      	ldr	r2, [pc, #76]	; (8007dbc <USB_CoreReset+0x64>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d901      	bls.n	8007d76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e01b      	b.n	8007dae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	daf2      	bge.n	8007d64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	f043 0201 	orr.w	r2, r3, #1
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3301      	adds	r3, #1
 8007d92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4a09      	ldr	r2, [pc, #36]	; (8007dbc <USB_CoreReset+0x64>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d901      	bls.n	8007da0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e006      	b.n	8007dae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d0f0      	beq.n	8007d8e <USB_CoreReset+0x36>

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	00030d40 	.word	0x00030d40

08007dc0 <_ZdlPv>:
 8007dc0:	f000 b8ea 	b.w	8007f98 <free>

08007dc4 <_ZdlPvj>:
 8007dc4:	f7ff bffc 	b.w	8007dc0 <_ZdlPv>

08007dc8 <_Znwj>:
 8007dc8:	2801      	cmp	r0, #1
 8007dca:	bf38      	it	cc
 8007dcc:	2001      	movcc	r0, #1
 8007dce:	b510      	push	{r4, lr}
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 f8d8 	bl	8007f88 <malloc>
 8007dd8:	b100      	cbz	r0, 8007ddc <_Znwj+0x14>
 8007dda:	bd10      	pop	{r4, pc}
 8007ddc:	f000 f8c4 	bl	8007f68 <_ZSt15get_new_handlerv>
 8007de0:	b908      	cbnz	r0, 8007de6 <_Znwj+0x1e>
 8007de2:	f000 f8c9 	bl	8007f78 <abort>
 8007de6:	4780      	blx	r0
 8007de8:	e7f3      	b.n	8007dd2 <_Znwj+0xa>

08007dea <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8007dea:	68c3      	ldr	r3, [r0, #12]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	60c2      	str	r2, [r0, #12]
 8007df0:	b510      	push	{r4, lr}
 8007df2:	b102      	cbz	r2, 8007df6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8007df4:	6050      	str	r0, [r2, #4]
 8007df6:	6842      	ldr	r2, [r0, #4]
 8007df8:	605a      	str	r2, [r3, #4]
 8007dfa:	680c      	ldr	r4, [r1, #0]
 8007dfc:	4284      	cmp	r4, r0
 8007dfe:	d103      	bne.n	8007e08 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8007e00:	600b      	str	r3, [r1, #0]
 8007e02:	6098      	str	r0, [r3, #8]
 8007e04:	6043      	str	r3, [r0, #4]
 8007e06:	bd10      	pop	{r4, pc}
 8007e08:	6891      	ldr	r1, [r2, #8]
 8007e0a:	4281      	cmp	r1, r0
 8007e0c:	bf0c      	ite	eq
 8007e0e:	6093      	streq	r3, [r2, #8]
 8007e10:	60d3      	strne	r3, [r2, #12]
 8007e12:	e7f6      	b.n	8007e02 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08007e14 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8007e14:	6883      	ldr	r3, [r0, #8]
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	6082      	str	r2, [r0, #8]
 8007e1a:	b510      	push	{r4, lr}
 8007e1c:	b102      	cbz	r2, 8007e20 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8007e1e:	6050      	str	r0, [r2, #4]
 8007e20:	6842      	ldr	r2, [r0, #4]
 8007e22:	605a      	str	r2, [r3, #4]
 8007e24:	680c      	ldr	r4, [r1, #0]
 8007e26:	4284      	cmp	r4, r0
 8007e28:	d103      	bne.n	8007e32 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8007e2a:	600b      	str	r3, [r1, #0]
 8007e2c:	60d8      	str	r0, [r3, #12]
 8007e2e:	6043      	str	r3, [r0, #4]
 8007e30:	bd10      	pop	{r4, pc}
 8007e32:	68d1      	ldr	r1, [r2, #12]
 8007e34:	4281      	cmp	r1, r0
 8007e36:	bf0c      	ite	eq
 8007e38:	60d3      	streq	r3, [r2, #12]
 8007e3a:	6093      	strne	r3, [r2, #8]
 8007e3c:	e7f6      	b.n	8007e2c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08007e3e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8007e3e:	68c3      	ldr	r3, [r0, #12]
 8007e40:	b123      	cbz	r3, 8007e4c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8007e42:	4618      	mov	r0, r3
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1fb      	bne.n	8007e42 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8007e4a:	4770      	bx	lr
 8007e4c:	6843      	ldr	r3, [r0, #4]
 8007e4e:	68da      	ldr	r2, [r3, #12]
 8007e50:	4282      	cmp	r2, r0
 8007e52:	d004      	beq.n	8007e5e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8007e54:	68c2      	ldr	r2, [r0, #12]
 8007e56:	4293      	cmp	r3, r2
 8007e58:	bf18      	it	ne
 8007e5a:	4618      	movne	r0, r3
 8007e5c:	4770      	bx	lr
 8007e5e:	4618      	mov	r0, r3
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	e7f4      	b.n	8007e4e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08007e64 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8007e64:	7803      	ldrb	r3, [r0, #0]
 8007e66:	b933      	cbnz	r3, 8007e76 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8007e68:	6843      	ldr	r3, [r0, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	4283      	cmp	r3, r0
 8007e6e:	d102      	bne.n	8007e76 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	4618      	mov	r0, r3
 8007e74:	4770      	bx	lr
 8007e76:	6882      	ldr	r2, [r0, #8]
 8007e78:	b122      	cbz	r2, 8007e84 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	68d2      	ldr	r2, [r2, #12]
 8007e7e:	2a00      	cmp	r2, #0
 8007e80:	d1fb      	bne.n	8007e7a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8007e82:	e7f6      	b.n	8007e72 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8007e84:	6843      	ldr	r3, [r0, #4]
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	4282      	cmp	r2, r0
 8007e8a:	d1f2      	bne.n	8007e72 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	e7f9      	b.n	8007e86 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08007e92 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8007e92:	f7ff bfd4 	b.w	8007e3e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08007e96 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8007e96:	f7ff bfe5 	b.w	8007e64 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08007e9a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8007e9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e9e:	461d      	mov	r5, r3
 8007ea0:	f103 0804 	add.w	r8, r3, #4
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8007eaa:	460c      	mov	r4, r1
 8007eac:	604a      	str	r2, [r1, #4]
 8007eae:	700b      	strb	r3, [r1, #0]
 8007eb0:	b198      	cbz	r0, 8007eda <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8007eb2:	4295      	cmp	r5, r2
 8007eb4:	6091      	str	r1, [r2, #8]
 8007eb6:	d102      	bne.n	8007ebe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x24>
 8007eb8:	6069      	str	r1, [r5, #4]
 8007eba:	60ec      	str	r4, [r5, #12]
 8007ebc:	e003      	b.n	8007ec6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2c>
 8007ebe:	68ab      	ldr	r3, [r5, #8]
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	bf08      	it	eq
 8007ec4:	60a9      	streq	r1, [r5, #8]
 8007ec6:	2701      	movs	r7, #1
 8007ec8:	f04f 0900 	mov.w	r9, #0
 8007ecc:	686b      	ldr	r3, [r5, #4]
 8007ece:	42a3      	cmp	r3, r4
 8007ed0:	d130      	bne.n	8007f34 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9a>
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eda:	60d1      	str	r1, [r2, #12]
 8007edc:	68eb      	ldr	r3, [r5, #12]
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d1f1      	bne.n	8007ec6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2c>
 8007ee2:	e7ea      	b.n	8007eba <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8007ee4:	68c3      	ldr	r3, [r0, #12]
 8007ee6:	42a3      	cmp	r3, r4
 8007ee8:	d103      	bne.n	8007ef2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8007eea:	4641      	mov	r1, r8
 8007eec:	f7ff ff7d 	bl	8007dea <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	6863      	ldr	r3, [r4, #4]
 8007ef4:	4641      	mov	r1, r8
 8007ef6:	701f      	strb	r7, [r3, #0]
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f886 9000 	strb.w	r9, [r6]
 8007efe:	f7ff ff89 	bl	8007e14 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8007f02:	4626      	mov	r6, r4
 8007f04:	e027      	b.n	8007f56 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbc>
 8007f06:	b12b      	cbz	r3, 8007f14 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7a>
 8007f08:	781a      	ldrb	r2, [r3, #0]
 8007f0a:	b91a      	cbnz	r2, 8007f14 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7a>
 8007f0c:	7007      	strb	r7, [r0, #0]
 8007f0e:	701f      	strb	r7, [r3, #0]
 8007f10:	7032      	strb	r2, [r6, #0]
 8007f12:	e020      	b.n	8007f56 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbc>
 8007f14:	6883      	ldr	r3, [r0, #8]
 8007f16:	42a3      	cmp	r3, r4
 8007f18:	d103      	bne.n	8007f22 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x88>
 8007f1a:	4641      	mov	r1, r8
 8007f1c:	f7ff ff7a 	bl	8007e14 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8007f20:	4604      	mov	r4, r0
 8007f22:	6863      	ldr	r3, [r4, #4]
 8007f24:	4641      	mov	r1, r8
 8007f26:	701f      	strb	r7, [r3, #0]
 8007f28:	4630      	mov	r0, r6
 8007f2a:	f886 9000 	strb.w	r9, [r6]
 8007f2e:	f7ff ff5c 	bl	8007dea <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8007f32:	e7e6      	b.n	8007f02 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x68>
 8007f34:	6860      	ldr	r0, [r4, #4]
 8007f36:	7802      	ldrb	r2, [r0, #0]
 8007f38:	2a00      	cmp	r2, #0
 8007f3a:	d1ca      	bne.n	8007ed2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8007f3c:	6846      	ldr	r6, [r0, #4]
 8007f3e:	68b3      	ldr	r3, [r6, #8]
 8007f40:	4283      	cmp	r3, r0
 8007f42:	d1e0      	bne.n	8007f06 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8007f44:	68f2      	ldr	r2, [r6, #12]
 8007f46:	2a00      	cmp	r2, #0
 8007f48:	d0cc      	beq.n	8007ee4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8007f4a:	7811      	ldrb	r1, [r2, #0]
 8007f4c:	2900      	cmp	r1, #0
 8007f4e:	d1c9      	bne.n	8007ee4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8007f50:	701f      	strb	r7, [r3, #0]
 8007f52:	7017      	strb	r7, [r2, #0]
 8007f54:	7031      	strb	r1, [r6, #0]
 8007f56:	4634      	mov	r4, r6
 8007f58:	e7b8      	b.n	8007ecc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08007f5a <_ZSt17__throw_bad_allocv>:
 8007f5a:	b508      	push	{r3, lr}
 8007f5c:	f000 f80c 	bl	8007f78 <abort>

08007f60 <_ZSt28__throw_bad_array_new_lengthv>:
 8007f60:	b508      	push	{r3, lr}
 8007f62:	f000 f809 	bl	8007f78 <abort>
	...

08007f68 <_ZSt15get_new_handlerv>:
 8007f68:	4b02      	ldr	r3, [pc, #8]	; (8007f74 <_ZSt15get_new_handlerv+0xc>)
 8007f6a:	6818      	ldr	r0, [r3, #0]
 8007f6c:	f3bf 8f5b 	dmb	ish
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	240007e0 	.word	0x240007e0

08007f78 <abort>:
 8007f78:	b508      	push	{r3, lr}
 8007f7a:	2006      	movs	r0, #6
 8007f7c:	f000 f8f0 	bl	8008160 <raise>
 8007f80:	2001      	movs	r0, #1
 8007f82:	f7fa fb1f 	bl	80025c4 <_exit>
	...

08007f88 <malloc>:
 8007f88:	4b02      	ldr	r3, [pc, #8]	; (8007f94 <malloc+0xc>)
 8007f8a:	4601      	mov	r1, r0
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	f000 b82b 	b.w	8007fe8 <_malloc_r>
 8007f92:	bf00      	nop
 8007f94:	24000060 	.word	0x24000060

08007f98 <free>:
 8007f98:	4b02      	ldr	r3, [pc, #8]	; (8007fa4 <free+0xc>)
 8007f9a:	4601      	mov	r1, r0
 8007f9c:	6818      	ldr	r0, [r3, #0]
 8007f9e:	f000 b937 	b.w	8008210 <_free_r>
 8007fa2:	bf00      	nop
 8007fa4:	24000060 	.word	0x24000060

08007fa8 <sbrk_aligned>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	4e0e      	ldr	r6, [pc, #56]	; (8007fe4 <sbrk_aligned+0x3c>)
 8007fac:	460c      	mov	r4, r1
 8007fae:	6831      	ldr	r1, [r6, #0]
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	b911      	cbnz	r1, 8007fba <sbrk_aligned+0x12>
 8007fb4:	f000 f8f0 	bl	8008198 <_sbrk_r>
 8007fb8:	6030      	str	r0, [r6, #0]
 8007fba:	4621      	mov	r1, r4
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	f000 f8eb 	bl	8008198 <_sbrk_r>
 8007fc2:	1c43      	adds	r3, r0, #1
 8007fc4:	d00a      	beq.n	8007fdc <sbrk_aligned+0x34>
 8007fc6:	1cc4      	adds	r4, r0, #3
 8007fc8:	f024 0403 	bic.w	r4, r4, #3
 8007fcc:	42a0      	cmp	r0, r4
 8007fce:	d007      	beq.n	8007fe0 <sbrk_aligned+0x38>
 8007fd0:	1a21      	subs	r1, r4, r0
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f000 f8e0 	bl	8008198 <_sbrk_r>
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d101      	bne.n	8007fe0 <sbrk_aligned+0x38>
 8007fdc:	f04f 34ff 	mov.w	r4, #4294967295
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	bd70      	pop	{r4, r5, r6, pc}
 8007fe4:	240007e8 	.word	0x240007e8

08007fe8 <_malloc_r>:
 8007fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fec:	1ccd      	adds	r5, r1, #3
 8007fee:	f025 0503 	bic.w	r5, r5, #3
 8007ff2:	3508      	adds	r5, #8
 8007ff4:	2d0c      	cmp	r5, #12
 8007ff6:	bf38      	it	cc
 8007ff8:	250c      	movcc	r5, #12
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	4607      	mov	r7, r0
 8007ffe:	db01      	blt.n	8008004 <_malloc_r+0x1c>
 8008000:	42a9      	cmp	r1, r5
 8008002:	d905      	bls.n	8008010 <_malloc_r+0x28>
 8008004:	230c      	movs	r3, #12
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	2600      	movs	r6, #0
 800800a:	4630      	mov	r0, r6
 800800c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008010:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80080e4 <_malloc_r+0xfc>
 8008014:	f000 f868 	bl	80080e8 <__malloc_lock>
 8008018:	f8d8 3000 	ldr.w	r3, [r8]
 800801c:	461c      	mov	r4, r3
 800801e:	bb5c      	cbnz	r4, 8008078 <_malloc_r+0x90>
 8008020:	4629      	mov	r1, r5
 8008022:	4638      	mov	r0, r7
 8008024:	f7ff ffc0 	bl	8007fa8 <sbrk_aligned>
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	4604      	mov	r4, r0
 800802c:	d155      	bne.n	80080da <_malloc_r+0xf2>
 800802e:	f8d8 4000 	ldr.w	r4, [r8]
 8008032:	4626      	mov	r6, r4
 8008034:	2e00      	cmp	r6, #0
 8008036:	d145      	bne.n	80080c4 <_malloc_r+0xdc>
 8008038:	2c00      	cmp	r4, #0
 800803a:	d048      	beq.n	80080ce <_malloc_r+0xe6>
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	4631      	mov	r1, r6
 8008040:	4638      	mov	r0, r7
 8008042:	eb04 0903 	add.w	r9, r4, r3
 8008046:	f000 f8a7 	bl	8008198 <_sbrk_r>
 800804a:	4581      	cmp	r9, r0
 800804c:	d13f      	bne.n	80080ce <_malloc_r+0xe6>
 800804e:	6821      	ldr	r1, [r4, #0]
 8008050:	1a6d      	subs	r5, r5, r1
 8008052:	4629      	mov	r1, r5
 8008054:	4638      	mov	r0, r7
 8008056:	f7ff ffa7 	bl	8007fa8 <sbrk_aligned>
 800805a:	3001      	adds	r0, #1
 800805c:	d037      	beq.n	80080ce <_malloc_r+0xe6>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	442b      	add	r3, r5
 8008062:	6023      	str	r3, [r4, #0]
 8008064:	f8d8 3000 	ldr.w	r3, [r8]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d038      	beq.n	80080de <_malloc_r+0xf6>
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	42a2      	cmp	r2, r4
 8008070:	d12b      	bne.n	80080ca <_malloc_r+0xe2>
 8008072:	2200      	movs	r2, #0
 8008074:	605a      	str	r2, [r3, #4]
 8008076:	e00f      	b.n	8008098 <_malloc_r+0xb0>
 8008078:	6822      	ldr	r2, [r4, #0]
 800807a:	1b52      	subs	r2, r2, r5
 800807c:	d41f      	bmi.n	80080be <_malloc_r+0xd6>
 800807e:	2a0b      	cmp	r2, #11
 8008080:	d917      	bls.n	80080b2 <_malloc_r+0xca>
 8008082:	1961      	adds	r1, r4, r5
 8008084:	42a3      	cmp	r3, r4
 8008086:	6025      	str	r5, [r4, #0]
 8008088:	bf18      	it	ne
 800808a:	6059      	strne	r1, [r3, #4]
 800808c:	6863      	ldr	r3, [r4, #4]
 800808e:	bf08      	it	eq
 8008090:	f8c8 1000 	streq.w	r1, [r8]
 8008094:	5162      	str	r2, [r4, r5]
 8008096:	604b      	str	r3, [r1, #4]
 8008098:	4638      	mov	r0, r7
 800809a:	f104 060b 	add.w	r6, r4, #11
 800809e:	f000 f829 	bl	80080f4 <__malloc_unlock>
 80080a2:	f026 0607 	bic.w	r6, r6, #7
 80080a6:	1d23      	adds	r3, r4, #4
 80080a8:	1af2      	subs	r2, r6, r3
 80080aa:	d0ae      	beq.n	800800a <_malloc_r+0x22>
 80080ac:	1b9b      	subs	r3, r3, r6
 80080ae:	50a3      	str	r3, [r4, r2]
 80080b0:	e7ab      	b.n	800800a <_malloc_r+0x22>
 80080b2:	42a3      	cmp	r3, r4
 80080b4:	6862      	ldr	r2, [r4, #4]
 80080b6:	d1dd      	bne.n	8008074 <_malloc_r+0x8c>
 80080b8:	f8c8 2000 	str.w	r2, [r8]
 80080bc:	e7ec      	b.n	8008098 <_malloc_r+0xb0>
 80080be:	4623      	mov	r3, r4
 80080c0:	6864      	ldr	r4, [r4, #4]
 80080c2:	e7ac      	b.n	800801e <_malloc_r+0x36>
 80080c4:	4634      	mov	r4, r6
 80080c6:	6876      	ldr	r6, [r6, #4]
 80080c8:	e7b4      	b.n	8008034 <_malloc_r+0x4c>
 80080ca:	4613      	mov	r3, r2
 80080cc:	e7cc      	b.n	8008068 <_malloc_r+0x80>
 80080ce:	230c      	movs	r3, #12
 80080d0:	603b      	str	r3, [r7, #0]
 80080d2:	4638      	mov	r0, r7
 80080d4:	f000 f80e 	bl	80080f4 <__malloc_unlock>
 80080d8:	e797      	b.n	800800a <_malloc_r+0x22>
 80080da:	6025      	str	r5, [r4, #0]
 80080dc:	e7dc      	b.n	8008098 <_malloc_r+0xb0>
 80080de:	605b      	str	r3, [r3, #4]
 80080e0:	deff      	udf	#255	; 0xff
 80080e2:	bf00      	nop
 80080e4:	240007e4 	.word	0x240007e4

080080e8 <__malloc_lock>:
 80080e8:	4801      	ldr	r0, [pc, #4]	; (80080f0 <__malloc_lock+0x8>)
 80080ea:	f000 b88f 	b.w	800820c <__retarget_lock_acquire_recursive>
 80080ee:	bf00      	nop
 80080f0:	24000928 	.word	0x24000928

080080f4 <__malloc_unlock>:
 80080f4:	4801      	ldr	r0, [pc, #4]	; (80080fc <__malloc_unlock+0x8>)
 80080f6:	f000 b88a 	b.w	800820e <__retarget_lock_release_recursive>
 80080fa:	bf00      	nop
 80080fc:	24000928 	.word	0x24000928

08008100 <memset>:
 8008100:	4402      	add	r2, r0
 8008102:	4603      	mov	r3, r0
 8008104:	4293      	cmp	r3, r2
 8008106:	d100      	bne.n	800810a <memset+0xa>
 8008108:	4770      	bx	lr
 800810a:	f803 1b01 	strb.w	r1, [r3], #1
 800810e:	e7f9      	b.n	8008104 <memset+0x4>

08008110 <_raise_r>:
 8008110:	291f      	cmp	r1, #31
 8008112:	b538      	push	{r3, r4, r5, lr}
 8008114:	4604      	mov	r4, r0
 8008116:	460d      	mov	r5, r1
 8008118:	d904      	bls.n	8008124 <_raise_r+0x14>
 800811a:	2316      	movs	r3, #22
 800811c:	6003      	str	r3, [r0, #0]
 800811e:	f04f 30ff 	mov.w	r0, #4294967295
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008126:	b112      	cbz	r2, 800812e <_raise_r+0x1e>
 8008128:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800812c:	b94b      	cbnz	r3, 8008142 <_raise_r+0x32>
 800812e:	4620      	mov	r0, r4
 8008130:	f000 f830 	bl	8008194 <_getpid_r>
 8008134:	462a      	mov	r2, r5
 8008136:	4601      	mov	r1, r0
 8008138:	4620      	mov	r0, r4
 800813a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800813e:	f000 b817 	b.w	8008170 <_kill_r>
 8008142:	2b01      	cmp	r3, #1
 8008144:	d00a      	beq.n	800815c <_raise_r+0x4c>
 8008146:	1c59      	adds	r1, r3, #1
 8008148:	d103      	bne.n	8008152 <_raise_r+0x42>
 800814a:	2316      	movs	r3, #22
 800814c:	6003      	str	r3, [r0, #0]
 800814e:	2001      	movs	r0, #1
 8008150:	e7e7      	b.n	8008122 <_raise_r+0x12>
 8008152:	2400      	movs	r4, #0
 8008154:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008158:	4628      	mov	r0, r5
 800815a:	4798      	blx	r3
 800815c:	2000      	movs	r0, #0
 800815e:	e7e0      	b.n	8008122 <_raise_r+0x12>

08008160 <raise>:
 8008160:	4b02      	ldr	r3, [pc, #8]	; (800816c <raise+0xc>)
 8008162:	4601      	mov	r1, r0
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	f7ff bfd3 	b.w	8008110 <_raise_r>
 800816a:	bf00      	nop
 800816c:	24000060 	.word	0x24000060

08008170 <_kill_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d07      	ldr	r5, [pc, #28]	; (8008190 <_kill_r+0x20>)
 8008174:	2300      	movs	r3, #0
 8008176:	4604      	mov	r4, r0
 8008178:	4608      	mov	r0, r1
 800817a:	4611      	mov	r1, r2
 800817c:	602b      	str	r3, [r5, #0]
 800817e:	f7fa fa11 	bl	80025a4 <_kill>
 8008182:	1c43      	adds	r3, r0, #1
 8008184:	d102      	bne.n	800818c <_kill_r+0x1c>
 8008186:	682b      	ldr	r3, [r5, #0]
 8008188:	b103      	cbz	r3, 800818c <_kill_r+0x1c>
 800818a:	6023      	str	r3, [r4, #0]
 800818c:	bd38      	pop	{r3, r4, r5, pc}
 800818e:	bf00      	nop
 8008190:	24000924 	.word	0x24000924

08008194 <_getpid_r>:
 8008194:	f7fa b9fe 	b.w	8002594 <_getpid>

08008198 <_sbrk_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4d06      	ldr	r5, [pc, #24]	; (80081b4 <_sbrk_r+0x1c>)
 800819c:	2300      	movs	r3, #0
 800819e:	4604      	mov	r4, r0
 80081a0:	4608      	mov	r0, r1
 80081a2:	602b      	str	r3, [r5, #0]
 80081a4:	f7fa fa18 	bl	80025d8 <_sbrk>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d102      	bne.n	80081b2 <_sbrk_r+0x1a>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	b103      	cbz	r3, 80081b2 <_sbrk_r+0x1a>
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	24000924 	.word	0x24000924

080081b8 <__errno>:
 80081b8:	4b01      	ldr	r3, [pc, #4]	; (80081c0 <__errno+0x8>)
 80081ba:	6818      	ldr	r0, [r3, #0]
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	24000060 	.word	0x24000060

080081c4 <__libc_init_array>:
 80081c4:	b570      	push	{r4, r5, r6, lr}
 80081c6:	4d0d      	ldr	r5, [pc, #52]	; (80081fc <__libc_init_array+0x38>)
 80081c8:	4c0d      	ldr	r4, [pc, #52]	; (8008200 <__libc_init_array+0x3c>)
 80081ca:	1b64      	subs	r4, r4, r5
 80081cc:	10a4      	asrs	r4, r4, #2
 80081ce:	2600      	movs	r6, #0
 80081d0:	42a6      	cmp	r6, r4
 80081d2:	d109      	bne.n	80081e8 <__libc_init_array+0x24>
 80081d4:	4d0b      	ldr	r5, [pc, #44]	; (8008204 <__libc_init_array+0x40>)
 80081d6:	4c0c      	ldr	r4, [pc, #48]	; (8008208 <__libc_init_array+0x44>)
 80081d8:	f000 f866 	bl	80082a8 <_init>
 80081dc:	1b64      	subs	r4, r4, r5
 80081de:	10a4      	asrs	r4, r4, #2
 80081e0:	2600      	movs	r6, #0
 80081e2:	42a6      	cmp	r6, r4
 80081e4:	d105      	bne.n	80081f2 <__libc_init_array+0x2e>
 80081e6:	bd70      	pop	{r4, r5, r6, pc}
 80081e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ec:	4798      	blx	r3
 80081ee:	3601      	adds	r6, #1
 80081f0:	e7ee      	b.n	80081d0 <__libc_init_array+0xc>
 80081f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081f6:	4798      	blx	r3
 80081f8:	3601      	adds	r6, #1
 80081fa:	e7f2      	b.n	80081e2 <__libc_init_array+0x1e>
 80081fc:	08008314 	.word	0x08008314
 8008200:	08008314 	.word	0x08008314
 8008204:	08008314 	.word	0x08008314
 8008208:	08008318 	.word	0x08008318

0800820c <__retarget_lock_acquire_recursive>:
 800820c:	4770      	bx	lr

0800820e <__retarget_lock_release_recursive>:
 800820e:	4770      	bx	lr

08008210 <_free_r>:
 8008210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008212:	2900      	cmp	r1, #0
 8008214:	d044      	beq.n	80082a0 <_free_r+0x90>
 8008216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800821a:	9001      	str	r0, [sp, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f1a1 0404 	sub.w	r4, r1, #4
 8008222:	bfb8      	it	lt
 8008224:	18e4      	addlt	r4, r4, r3
 8008226:	f7ff ff5f 	bl	80080e8 <__malloc_lock>
 800822a:	4a1e      	ldr	r2, [pc, #120]	; (80082a4 <_free_r+0x94>)
 800822c:	9801      	ldr	r0, [sp, #4]
 800822e:	6813      	ldr	r3, [r2, #0]
 8008230:	b933      	cbnz	r3, 8008240 <_free_r+0x30>
 8008232:	6063      	str	r3, [r4, #4]
 8008234:	6014      	str	r4, [r2, #0]
 8008236:	b003      	add	sp, #12
 8008238:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800823c:	f7ff bf5a 	b.w	80080f4 <__malloc_unlock>
 8008240:	42a3      	cmp	r3, r4
 8008242:	d908      	bls.n	8008256 <_free_r+0x46>
 8008244:	6825      	ldr	r5, [r4, #0]
 8008246:	1961      	adds	r1, r4, r5
 8008248:	428b      	cmp	r3, r1
 800824a:	bf01      	itttt	eq
 800824c:	6819      	ldreq	r1, [r3, #0]
 800824e:	685b      	ldreq	r3, [r3, #4]
 8008250:	1949      	addeq	r1, r1, r5
 8008252:	6021      	streq	r1, [r4, #0]
 8008254:	e7ed      	b.n	8008232 <_free_r+0x22>
 8008256:	461a      	mov	r2, r3
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	b10b      	cbz	r3, 8008260 <_free_r+0x50>
 800825c:	42a3      	cmp	r3, r4
 800825e:	d9fa      	bls.n	8008256 <_free_r+0x46>
 8008260:	6811      	ldr	r1, [r2, #0]
 8008262:	1855      	adds	r5, r2, r1
 8008264:	42a5      	cmp	r5, r4
 8008266:	d10b      	bne.n	8008280 <_free_r+0x70>
 8008268:	6824      	ldr	r4, [r4, #0]
 800826a:	4421      	add	r1, r4
 800826c:	1854      	adds	r4, r2, r1
 800826e:	42a3      	cmp	r3, r4
 8008270:	6011      	str	r1, [r2, #0]
 8008272:	d1e0      	bne.n	8008236 <_free_r+0x26>
 8008274:	681c      	ldr	r4, [r3, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	6053      	str	r3, [r2, #4]
 800827a:	440c      	add	r4, r1
 800827c:	6014      	str	r4, [r2, #0]
 800827e:	e7da      	b.n	8008236 <_free_r+0x26>
 8008280:	d902      	bls.n	8008288 <_free_r+0x78>
 8008282:	230c      	movs	r3, #12
 8008284:	6003      	str	r3, [r0, #0]
 8008286:	e7d6      	b.n	8008236 <_free_r+0x26>
 8008288:	6825      	ldr	r5, [r4, #0]
 800828a:	1961      	adds	r1, r4, r5
 800828c:	428b      	cmp	r3, r1
 800828e:	bf04      	itt	eq
 8008290:	6819      	ldreq	r1, [r3, #0]
 8008292:	685b      	ldreq	r3, [r3, #4]
 8008294:	6063      	str	r3, [r4, #4]
 8008296:	bf04      	itt	eq
 8008298:	1949      	addeq	r1, r1, r5
 800829a:	6021      	streq	r1, [r4, #0]
 800829c:	6054      	str	r4, [r2, #4]
 800829e:	e7ca      	b.n	8008236 <_free_r+0x26>
 80082a0:	b003      	add	sp, #12
 80082a2:	bd30      	pop	{r4, r5, pc}
 80082a4:	240007e4 	.word	0x240007e4

080082a8 <_init>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr

080082b4 <_fini>:
 80082b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b6:	bf00      	nop
 80082b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ba:	bc08      	pop	{r3}
 80082bc:	469e      	mov	lr, r3
 80082be:	4770      	bx	lr
