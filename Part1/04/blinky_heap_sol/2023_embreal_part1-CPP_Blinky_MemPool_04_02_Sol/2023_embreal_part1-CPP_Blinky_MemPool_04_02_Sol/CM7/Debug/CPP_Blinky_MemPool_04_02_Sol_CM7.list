
CPP_Blinky_MemPool_04_02_Sol_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d7c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007014  08007014  00017014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800704c  0800704c  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  0800704c  0800704c  0001704c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007054  08007054  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007054  08007054  00017054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007058  08007058  00017058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  0800705c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000060  080070bc  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000c0  0800711c  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000800  24000120  0800717c  00020120  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000920  0800717c  00020920  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 15 .debug_info   000227fa  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003eb8  00000000  00000000  0004298b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000012d0  00000000  00000000  00046848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000e5a  00000000  00000000  00047b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00040640  00000000  00000000  00048972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001a9a3  00000000  00000000  00088fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018a3ea  00000000  00000000  000a3955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000533c  00000000  00000000  0022dd40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000c2  00000000  00000000  0023307c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000120 	.word	0x24000120
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006ffc 	.word	0x08006ffc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000124 	.word	0x24000124
 80002d4:	08006ffc 	.word	0x08006ffc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <cpp_main>:

#include "MemPool.hpp"

//YOUR CODE ENDS HERE

void cpp_main(){
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0



	//YOUR CODE STARTS HERE
    auto SmartPointerOnLedMEmPool  = std::make_unique <MemPool<BlinkingLed,4>> ();
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f851 	bl	80007b0 <_ZSt11make_uniqueI7MemPoolI11BlinkingLedLj4EEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>

    ///TODO There is a problem with the first object in the pool
    /// bad work around: initialise first a dummy  object
    BlinkingLed *Led0Blinker=SmartPointerOnLedMEmPool->Allocate();
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4618      	mov	r0, r3
 8000712:	f000 f861 	bl	80007d8 <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEptEv>
 8000716:	4603      	mov	r3, r0
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f869 	bl	80007f0 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv>
 800071e:	6178      	str	r0, [r7, #20]
    BlinkingLed *Led1Blinker=SmartPointerOnLedMEmPool->Allocate();
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f858 	bl	80007d8 <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEptEv>
 8000728:	4603      	mov	r3, r0
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f860 	bl	80007f0 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv>
 8000730:	6138      	str	r0, [r7, #16]
	Led1Blinker->setFrequency(0.5);
 8000732:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000736:	6938      	ldr	r0, [r7, #16]
 8000738:	f000 fedd 	bl	80014f6 <_ZN11BlinkingLed12setFrequencyEf>
	Led1Blinker->setPinPort(LD1_GPIO_Port,LD1_Pin);
 800073c:	2201      	movs	r2, #1
 800073e:	491a      	ldr	r1, [pc, #104]	; (80007a8 <cpp_main+0xa8>)
 8000740:	6938      	ldr	r0, [r7, #16]
 8000742:	f000 fee7 	bl	8001514 <_ZN11BlinkingLed10setPinPortEP12GPIO_TypeDeft>

    BlinkingLed *Led2Blinker=SmartPointerOnLedMEmPool->Allocate();
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f845 	bl	80007d8 <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEptEv>
 800074e:	4603      	mov	r3, r0
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f84d 	bl	80007f0 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv>
 8000756:	60f8      	str	r0, [r7, #12]
    Led2Blinker->setFrequency(1.0);
 8000758:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f000 feca 	bl	80014f6 <_ZN11BlinkingLed12setFrequencyEf>
    Led2Blinker->setPinPort(LD2_GPIO_Port,LD2_Pin);
 8000762:	2202      	movs	r2, #2
 8000764:	4911      	ldr	r1, [pc, #68]	; (80007ac <cpp_main+0xac>)
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f000 fed4 	bl	8001514 <_ZN11BlinkingLed10setPinPortEP12GPIO_TypeDeft>

    BlinkingLed *Led3Blinker=SmartPointerOnLedMEmPool->Allocate();
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f832 	bl	80007d8 <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEptEv>
 8000774:	4603      	mov	r3, r0
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f83a 	bl	80007f0 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv>
 800077c:	60b8      	str	r0, [r7, #8]
    Led3Blinker->setFrequency(2.0);
 800077e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000782:	68b8      	ldr	r0, [r7, #8]
 8000784:	f000 feb7 	bl	80014f6 <_ZN11BlinkingLed12setFrequencyEf>
    Led3Blinker->setPinPort(LD3_GPIO_Port,LD3_Pin);
 8000788:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078c:	4906      	ldr	r1, [pc, #24]	; (80007a8 <cpp_main+0xa8>)
 800078e:	68b8      	ldr	r0, [r7, #8]
 8000790:	f000 fec0 	bl	8001514 <_ZN11BlinkingLed10setPinPortEP12GPIO_TypeDeft>
   	//YOUR CODE ENDS HERE

while (1)
	{
	//YOUR CODE STARTS HERE
	Led1Blinker->processBlinking();
 8000794:	6938      	ldr	r0, [r7, #16]
 8000796:	f000 fed1 	bl	800153c <_ZN11BlinkingLed15processBlinkingEv>
	Led2Blinker->processBlinking();
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f000 fece 	bl	800153c <_ZN11BlinkingLed15processBlinkingEv>
	Led3Blinker->processBlinking();
 80007a0:	68b8      	ldr	r0, [r7, #8]
 80007a2:	f000 fecb 	bl	800153c <_ZN11BlinkingLed15processBlinkingEv>
	Led1Blinker->processBlinking();
 80007a6:	e7f5      	b.n	8000794 <cpp_main+0x94>
 80007a8:	58020400 	.word	0x58020400
 80007ac:	58021000 	.word	0x58021000

080007b0 <_ZSt11make_uniqueI7MemPoolI11BlinkingLedLj4EEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
  /// @endcond

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80007b8:	2098      	movs	r0, #152	; 0x98
 80007ba:	f006 fac1 	bl	8006d40 <_Znwj>
 80007be:	4603      	mov	r3, r0
 80007c0:	461c      	mov	r4, r3
 80007c2:	4620      	mov	r0, r4
 80007c4:	f000 f85c 	bl	8000880 <_ZN7MemPoolI11BlinkingLedLj4EEC1Ev>
 80007c8:	4621      	mov	r1, r4
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f88b 	bl	80008e6 <_ZNSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEC1IS4_vEEPS2_>
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd90      	pop	{r4, r7, pc}

080007d8 <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEptEv>:
      operator->() const noexcept
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	return get();
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 f89c 	bl	800091e <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE3getEv>
 80007e6:	4603      	mov	r3, r0
      }
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv>:
    mem_beg_ = nullptr;
}


template<typename T, size_t NumCells>
T* MemPool<T, NumCells>::Allocate()
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
{
    if ( num_init_ < num_cells_ )
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	d20f      	bcs.n	8000824 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv+0x34>
    {
        uint32_t* p = reinterpret_cast<uint32_t*>( AddrFromIndex( num_init_ ) );
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	4619      	mov	r1, r3
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f894 	bl	8000938 <_ZNK7MemPoolI11BlinkingLedLj4EE13AddrFromIndexEm>
 8000810:	60b8      	str	r0, [r7, #8]
        *p = ++num_init_;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	68da      	ldr	r2, [r3, #12]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	601a      	str	r2, [r3, #0]
    }

    T* res = nullptr;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]

    if ( num_free_cells_ > 0 )
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d022      	beq.n	8000876 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv+0x86>
    {
        res = reinterpret_cast<T*>( next_ );
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000836:	60fb      	str	r3, [r7, #12]

        if ( --num_free_cells_ > 0 )
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	1e5a      	subs	r2, r3, #1
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	2b00      	cmp	r3, #0
 8000848:	bf14      	ite	ne
 800084a:	2301      	movne	r3, #1
 800084c:	2300      	moveq	r3, #0
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00c      	beq.n	800086e <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv+0x7e>
        {
            next_ = AddrFromIndex( *reinterpret_cast<uint32_t*>( next_ ) );
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f86a 	bl	8000938 <_ZNK7MemPoolI11BlinkingLedLj4EE13AddrFromIndexEm>
 8000864:	4602      	mov	r2, r0
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800086c:	e003      	b.n	8000876 <_ZN7MemPoolI11BlinkingLedLj4EE8AllocateEv+0x86>
        }
        else
        {
            next_ = nullptr;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
    }

    return res;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_ZN7MemPoolI11BlinkingLedLj4EEC1Ev>:
MemPool<T, NumCells>::MemPool()
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2220      	movs	r2, #32
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2204      	movs	r2, #4
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2204      	movs	r2, #4
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f103 0210 	add.w	r2, r3, #16
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <_ZNSt15__uniq_ptr_dataI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEPS2_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
 80008ce:	6039      	str	r1, [r7, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f842 	bl	8000960 <_ZNSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEC1EPS2_>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_ZNSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEC1IS4_vEEPS2_>:
	unique_ptr(pointer __p) noexcept
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6839      	ldr	r1, [r7, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ffe6 	bl	80008c6 <_ZNSt15__uniq_ptr_dataI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEPS2_>
        { }
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <_ZNSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f83a 	bl	8000988 <_ZSt3getILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8000914:	4603      	mov	r3, r0
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_ZNKSt10unique_ptrI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE3getEv>:
      get() const noexcept
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4618      	mov	r0, r3
 800092a:	f000 f83a 	bl	80009a2 <_ZNKSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE6_M_ptrEv>
 800092e:	4603      	mov	r3, r0
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <_ZNK7MemPoolI11BlinkingLedLj4EE13AddrFromIndexEm>:
    ++num_free_cells_;
}


template<typename T, size_t NumCells>
uint8_t* MemPool<T,NumCells>::AddrFromIndex( uint32_t i ) const
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
{
    return mem_beg_ + ( i * cell_size_ );
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6839      	ldr	r1, [r7, #0]
 800094e:	fb01 f303 	mul.w	r3, r1, r3
 8000952:	4413      	add	r3, r2
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <_ZNSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEC1EPS2_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f826 	bl	80009be <_ZNSt5tupleIJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ffc6 	bl	8000904 <_ZNSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE6_M_ptrEv>
 8000978:	4602      	mov	r2, r0
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <_ZSt3getILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f820 	bl	80009d8 <_ZSt12__get_helperILj0EP7MemPoolI11BlinkingLedLj4EEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8000998:	4603      	mov	r3, r0
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <_ZNKSt15__uniq_ptr_implI7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f81f 	bl	80009f0 <_ZSt3getILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80009b2:	4603      	mov	r3, r0
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <_ZNSt5tupleIJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>:
	tuple()
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 f81e 	bl	8000a0a <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEEC1Ev>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <_ZSt12__get_helperILj0EP7MemPoolI11BlinkingLedLj4EEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 f822 	bl	8000a2a <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEE7_M_headERS6_>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_ZSt3getILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f822 	bl	8000a44 <_ZSt12__get_helperILj0EP7MemPoolI11BlinkingLedLj4EEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8000a00:	4603      	mov	r3, r0
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEEC1Ev>:
      constexpr _Tuple_impl()
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f000 f822 	bl	8000a5c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7MemPoolI11BlinkingLedLj4EEEEEC1Ev>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f82a 	bl	8000a74 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EEC1Ev>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 f82b 	bl	8000a90 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EE7_M_headERS4_>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_ZSt12__get_helperILj0EP7MemPoolI11BlinkingLedLj4EEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f000 f82a 	bl	8000aa6 <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEE7_M_headERKS6_>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7MemPoolI11BlinkingLedLj4EEEEEC1Ev>:
      _Tuple_impl()
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 f82b 	bl	8000ac0 <_ZNSt10_Head_baseILj1ESt14default_deleteI7MemPoolI11BlinkingLedLj4EEELb1EEC1Ev>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EEC1Ev>:
      constexpr _Head_base()
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <_ZNSt11_Tuple_implILj0EJP7MemPoolI11BlinkingLedLj4EESt14default_deleteIS2_EEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 f810 	bl	8000ad6 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EE7_M_headERKS4_>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <_ZNSt10_Head_baseILj1ESt14default_deleteI7MemPoolI11BlinkingLedLj4EEELb1EEC1Ev>:
      constexpr _Head_base()
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_ZNSt10_Head_baseILj0EP7MemPoolI11BlinkingLedLj4EELb0EE7_M_headERKS4_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000af6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000af8:	bf00      	nop
 8000afa:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <main+0xa0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d004      	beq.n	8000b10 <main+0x24>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	1e5a      	subs	r2, r3, #1
 8000b0a:	607a      	str	r2, [r7, #4]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	dcf4      	bgt.n	8000afa <main+0xe>
  if ( timeout < 0 )
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	da01      	bge.n	8000b1a <main+0x2e>
  {
  Error_Handler();
 8000b16:	f000 fa5f 	bl	8000fd8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1a:	f000 fd7d 	bl	8001618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1e:	f000 f837 	bl	8000b90 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <main+0xa0>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	4a18      	ldr	r2, [pc, #96]	; (8000b8c <main+0xa0>)
 8000b2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <main+0xa0>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f001 fd2b 	bl	800259c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b46:	2100      	movs	r1, #0
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f001 fd41 	bl	80025d0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b52:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b54:	bf00      	nop
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <main+0xa0>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d104      	bne.n	8000b6c <main+0x80>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	1e5a      	subs	r2, r3, #1
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	dcf4      	bgt.n	8000b56 <main+0x6a>
if ( timeout < 0 )
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	da01      	bge.n	8000b76 <main+0x8a>
{
Error_Handler();
 8000b72:	f000 fa31 	bl	8000fd8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b76:	f000 f953 	bl	8000e20 <MX_GPIO_Init>
  MX_ETH_Init();
 8000b7a:	f000 f887 	bl	8000c8c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b7e:	f000 f8d1 	bl	8000d24 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b82:	f000 f91b 	bl	8000dbc <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cpp_main();
 8000b86:	f7ff fdbb 	bl	8000700 <cpp_main>
 8000b8a:	e7fc      	b.n	8000b86 <main+0x9a>
 8000b8c:	58024400 	.word	0x58024400

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b09c      	sub	sp, #112	; 0x70
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	224c      	movs	r2, #76	; 0x4c
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f006 f9a4 	bl	8006eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 f99e 	bl	8006eec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bb0:	2004      	movs	r0, #4
 8000bb2:	f001 fe69 	bl	8002888 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <SystemClock_Config+0xf4>)
 8000bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbe:	4a31      	ldr	r2, [pc, #196]	; (8000c84 <SystemClock_Config+0xf4>)
 8000bc0:	f023 0301 	bic.w	r3, r3, #1
 8000bc4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <SystemClock_Config+0xf4>)
 8000bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <SystemClock_Config+0xf8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bd8:	4a2b      	ldr	r2, [pc, #172]	; (8000c88 <SystemClock_Config+0xf8>)
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <SystemClock_Config+0xf8>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bec:	bf00      	nop
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <SystemClock_Config+0xf8>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bfa:	d1f8      	bne.n	8000bee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c00:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c06:	2302      	movs	r3, #2
 8000c08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000c12:	2312      	movs	r3, #18
 8000c14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c22:	230c      	movs	r3, #12
 8000c24:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000c26:	2302      	movs	r3, #2
 8000c28:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000c2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 fe91 	bl	800295c <HAL_RCC_OscConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c40:	f000 f9ca 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c44:	233f      	movs	r3, #63	; 0x3f
 8000c46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c54:	2340      	movs	r3, #64	; 0x40
 8000c56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c58:	2340      	movs	r3, #64	; 0x40
 8000c5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c62:	2340      	movs	r3, #64	; 0x40
 8000c64:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2101      	movs	r1, #1
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 fad0 	bl	8003210 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000c76:	f000 f9af 	bl	8000fd8 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3770      	adds	r7, #112	; 0x70
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	58000400 	.word	0x58000400
 8000c88:	58024800 	.word	0x58024800

08000c8c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <MX_ETH_Init+0x80>)
 8000c92:	4a1f      	ldr	r2, [pc, #124]	; (8000d10 <MX_ETH_Init+0x84>)
 8000c94:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c96:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <MX_ETH_Init+0x88>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_ETH_Init+0x88>)
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_ETH_Init+0x88>)
 8000ca4:	22e1      	movs	r2, #225	; 0xe1
 8000ca6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_ETH_Init+0x88>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_ETH_Init+0x88>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_ETH_Init+0x88>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_ETH_Init+0x80>)
 8000cbc:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <MX_ETH_Init+0x88>)
 8000cbe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_ETH_Init+0x80>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_ETH_Init+0x80>)
 8000cc8:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <MX_ETH_Init+0x8c>)
 8000cca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_ETH_Init+0x80>)
 8000cce:	4a13      	ldr	r2, [pc, #76]	; (8000d1c <MX_ETH_Init+0x90>)
 8000cd0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_ETH_Init+0x80>)
 8000cd4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000cd8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cda:	480c      	ldr	r0, [pc, #48]	; (8000d0c <MX_ETH_Init+0x80>)
 8000cdc:	f000 fe56 	bl	800198c <HAL_ETH_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ce6:	f000 f977 	bl	8000fd8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000cea:	2238      	movs	r2, #56	; 0x38
 8000cec:	2100      	movs	r1, #0
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <MX_ETH_Init+0x94>)
 8000cf0:	f006 f8fc 	bl	8006eec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <MX_ETH_Init+0x94>)
 8000cf6:	2221      	movs	r2, #33	; 0x21
 8000cf8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_ETH_Init+0x94>)
 8000cfc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d00:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <MX_ETH_Init+0x94>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	24000174 	.word	0x24000174
 8000d10:	40028000 	.word	0x40028000
 8000d14:	240007c4 	.word	0x240007c4
 8000d18:	240000c0 	.word	0x240000c0
 8000d1c:	24000060 	.word	0x24000060
 8000d20:	2400013c 	.word	0x2400013c

08000d24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d2a:	4a23      	ldr	r2, [pc, #140]	; (8000db8 <MX_USART3_UART_Init+0x94>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d6c:	4811      	ldr	r0, [pc, #68]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d6e:	f004 fc07 	bl	8005580 <HAL_UART_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d78:	f000 f92e 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	480d      	ldr	r0, [pc, #52]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d80:	f005 fc09 	bl	8006596 <HAL_UARTEx_SetTxFifoThreshold>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d8a:	f000 f925 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4808      	ldr	r0, [pc, #32]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000d92:	f005 fc3e 	bl	8006612 <HAL_UARTEx_SetRxFifoThreshold>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d9c:	f000 f91c 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000da0:	4804      	ldr	r0, [pc, #16]	; (8000db4 <MX_USART3_UART_Init+0x90>)
 8000da2:	f005 fbbf 	bl	8006524 <HAL_UARTEx_DisableFifoMode>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dac:	f000 f914 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	24000224 	.word	0x24000224
 8000db8:	40004800 	.word	0x40004800

08000dbc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc2:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc8:	2209      	movs	r2, #9
 8000dca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e04:	f001 fbf8 	bl	80025f8 <HAL_PCD_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e0e:	f000 f8e3 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	240002b8 	.word	0x240002b8
 8000e1c:	40080000 	.word	0x40080000

08000e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	4b62      	ldr	r3, [pc, #392]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	4a60      	ldr	r2, [pc, #384]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e3e:	f043 0304 	orr.w	r3, r3, #4
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e46:	4b5e      	ldr	r3, [pc, #376]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e54:	4b5a      	ldr	r3, [pc, #360]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5a:	4a59      	ldr	r2, [pc, #356]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e64:	4b56      	ldr	r3, [pc, #344]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b53      	ldr	r3, [pc, #332]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e78:	4a51      	ldr	r2, [pc, #324]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e82:	4b4f      	ldr	r3, [pc, #316]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b4b      	ldr	r3, [pc, #300]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e96:	4a4a      	ldr	r2, [pc, #296]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea0:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eae:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	4a42      	ldr	r2, [pc, #264]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebe:	4b40      	ldr	r3, [pc, #256]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ecc:	4b3c      	ldr	r3, [pc, #240]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	4a3b      	ldr	r2, [pc, #236]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000edc:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eea:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	4a33      	ldr	r2, [pc, #204]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efa:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	f003 0310 	and.w	r3, r3, #16
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f0e:	482d      	ldr	r0, [pc, #180]	; (8000fc4 <MX_GPIO_Init+0x1a4>)
 8000f10:	f001 fb10 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	482b      	ldr	r0, [pc, #172]	; (8000fc8 <MX_GPIO_Init+0x1a8>)
 8000f1c:	f001 fb0a 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2102      	movs	r1, #2
 8000f24:	4829      	ldr	r0, [pc, #164]	; (8000fcc <MX_GPIO_Init+0x1ac>)
 8000f26:	f001 fb05 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4824      	ldr	r0, [pc, #144]	; (8000fd0 <MX_GPIO_Init+0x1b0>)
 8000f40:	f001 f948 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f44:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4819      	ldr	r0, [pc, #100]	; (8000fc4 <MX_GPIO_Init+0x1a4>)
 8000f5e:	f001 f939 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4813      	ldr	r0, [pc, #76]	; (8000fc8 <MX_GPIO_Init+0x1a8>)
 8000f7c:	f001 f92a 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <MX_GPIO_Init+0x1b4>)
 8000f96:	f001 f91d 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4806      	ldr	r0, [pc, #24]	; (8000fcc <MX_GPIO_Init+0x1ac>)
 8000fb2:	f001 f90f 	bl	80021d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3730      	adds	r7, #48	; 0x30
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58020400 	.word	0x58020400
 8000fc8:	58020c00 	.word	0x58020c00
 8000fcc:	58021000 	.word	0x58021000
 8000fd0:	58020800 	.word	0x58020800
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <Error_Handler+0x8>
	...

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_MspInit+0x30>)
 8000fec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff0:	4a08      	ldr	r2, [pc, #32]	; (8001014 <HAL_MspInit+0x30>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_MspInit+0x30>)
 8000ffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	58024400 	.word	0x58024400

08001018 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	; 0x38
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a59      	ldr	r2, [pc, #356]	; (800119c <HAL_ETH_MspInit+0x184>)
 8001036:	4293      	cmp	r3, r2
 8001038:	f040 80ab 	bne.w	8001192 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800103c:	4b58      	ldr	r3, [pc, #352]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 800103e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001042:	4a57      	ldr	r2, [pc, #348]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 8001044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001048:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800104c:	4b54      	ldr	r3, [pc, #336]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 800104e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001056:	623b      	str	r3, [r7, #32]
 8001058:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800105a:	4b51      	ldr	r3, [pc, #324]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 800105c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001060:	4a4f      	ldr	r2, [pc, #316]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 8001062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001066:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800106a:	4b4d      	ldr	r3, [pc, #308]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 800106c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001078:	4b49      	ldr	r3, [pc, #292]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 800107a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800107e:	4a48      	ldr	r2, [pc, #288]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001088:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 800108a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	4b42      	ldr	r3, [pc, #264]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	4a40      	ldr	r2, [pc, #256]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a6:	4b3e      	ldr	r3, [pc, #248]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ba:	4a39      	ldr	r2, [pc, #228]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c4:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4b33      	ldr	r3, [pc, #204]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d8:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f6:	4a2a      	ldr	r2, [pc, #168]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 80010f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <HAL_ETH_MspInit+0x188>)
 8001102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800110e:	2332      	movs	r3, #50	; 0x32
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800111e:	230b      	movs	r3, #11
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001126:	4619      	mov	r1, r3
 8001128:	481e      	ldr	r0, [pc, #120]	; (80011a4 <HAL_ETH_MspInit+0x18c>)
 800112a:	f001 f853 	bl	80021d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800112e:	2386      	movs	r3, #134	; 0x86
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800113e:	230b      	movs	r3, #11
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	4817      	ldr	r0, [pc, #92]	; (80011a8 <HAL_ETH_MspInit+0x190>)
 800114a:	f001 f843 	bl	80021d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800114e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001160:	230b      	movs	r3, #11
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	4810      	ldr	r0, [pc, #64]	; (80011ac <HAL_ETH_MspInit+0x194>)
 800116c:	f001 f832 	bl	80021d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001170:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001182:	230b      	movs	r3, #11
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <HAL_ETH_MspInit+0x198>)
 800118e:	f001 f821 	bl	80021d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	3738      	adds	r7, #56	; 0x38
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40028000 	.word	0x40028000
 80011a0:	58024400 	.word	0x58024400
 80011a4:	58020800 	.word	0x58020800
 80011a8:	58020000 	.word	0x58020000
 80011ac:	58020400 	.word	0x58020400
 80011b0:	58021800 	.word	0x58021800

080011b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0ba      	sub	sp, #232	; 0xe8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	22c0      	movs	r2, #192	; 0xc0
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f005 fe89 	bl	8006eec <memset>
  if(huart->Instance==USART3)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a27      	ldr	r2, [pc, #156]	; (800127c <HAL_UART_MspInit+0xc8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d146      	bne.n	8001272 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011e4:	f04f 0202 	mov.w	r2, #2
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fb94 	bl	8003928 <HAL_RCCEx_PeriphCLKConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001206:	f7ff fee7 	bl	8000fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_UART_MspInit+0xcc>)
 800120c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <HAL_UART_MspInit+0xcc>)
 8001212:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001216:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_UART_MspInit+0xcc>)
 800121c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_UART_MspInit+0xcc>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <HAL_UART_MspInit+0xcc>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_UART_MspInit+0xcc>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001246:	f44f 7340 	mov.w	r3, #768	; 0x300
 800124a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001260:	2307      	movs	r3, #7
 8001262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001266:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <HAL_UART_MspInit+0xd0>)
 800126e:	f000 ffb1 	bl	80021d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001272:	bf00      	nop
 8001274:	37e8      	adds	r7, #232	; 0xe8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40004800 	.word	0x40004800
 8001280:	58024400 	.word	0x58024400
 8001284:	58020c00 	.word	0x58020c00

08001288 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b0ba      	sub	sp, #232	; 0xe8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	22c0      	movs	r2, #192	; 0xc0
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f005 fe1f 	bl	8006eec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a38      	ldr	r2, [pc, #224]	; (8001394 <HAL_PCD_MspInit+0x10c>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d169      	bne.n	800138c <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80012c8:	2312      	movs	r3, #18
 80012ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80012d0:	2303      	movs	r3, #3
 80012d2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80012d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80012de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012e2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80012e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 fb19 	bl	8003928 <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 80012fc:	f7ff fe6c 	bl	8000fd8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001300:	f001 fb1c 	bl	800293c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <HAL_PCD_MspInit+0x110>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	4a23      	ldr	r2, [pc, #140]	; (8001398 <HAL_PCD_MspInit+0x110>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001314:	4b20      	ldr	r3, [pc, #128]	; (8001398 <HAL_PCD_MspInit+0x110>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001322:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800133c:	230a      	movs	r3, #10
 800133e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001346:	4619      	mov	r1, r3
 8001348:	4814      	ldr	r0, [pc, #80]	; (800139c <HAL_PCD_MspInit+0x114>)
 800134a:	f000 ff43 	bl	80021d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800134e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <HAL_PCD_MspInit+0x114>)
 800136a:	f000 ff33 	bl	80021d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_PCD_MspInit+0x110>)
 8001370:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_PCD_MspInit+0x110>)
 8001376:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800137a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_PCD_MspInit+0x110>)
 8001380:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	37e8      	adds	r7, #232	; 0xe8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40080000 	.word	0x40080000
 8001398:	58024400 	.word	0x58024400
 800139c:	58020000 	.word	0x58020000

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler+0x4>

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ec:	f000 f986 	bl	80016fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return 1;
 80013f8:	2301      	movs	r3, #1
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_kill>:

int _kill(int pid, int sig)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800140e:	f005 fdc9 	bl	8006fa4 <__errno>
 8001412:	4603      	mov	r3, r0
 8001414:	2216      	movs	r2, #22
 8001416:	601a      	str	r2, [r3, #0]
  return -1;
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_exit>:

void _exit (int status)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ffe7 	bl	8001404 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001436:	e7fe      	b.n	8001436 <_exit+0x12>

08001438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <_sbrk+0x5c>)
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <_sbrk+0x60>)
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <_sbrk+0x64>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <_sbrk+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	429a      	cmp	r2, r3
 8001466:	d207      	bcs.n	8001478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001468:	f005 fd9c 	bl	8006fa4 <__errno>
 800146c:	4603      	mov	r3, r0
 800146e:	220c      	movs	r2, #12
 8001470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	e009      	b.n	800148c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <_sbrk+0x64>)
 8001488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	24080000 	.word	0x24080000
 8001498:	00000400 	.word	0x00000400
 800149c:	240007cc 	.word	0x240007cc
 80014a0:	24000920 	.word	0x24000920

080014a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014a8:	f7ff f894 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ae:	490d      	ldr	r1, [pc, #52]	; (80014e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b4:	e002      	b.n	80014bc <LoopCopyDataInit>

080014b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ba:	3304      	adds	r3, #4

080014bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c0:	d3f9      	bcc.n	80014b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c4:	4c0a      	ldr	r4, [pc, #40]	; (80014f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c8:	e001      	b.n	80014ce <LoopFillZerobss>

080014ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014cc:	3204      	adds	r2, #4

080014ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d0:	d3fb      	bcc.n	80014ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d2:	f005 fd6d 	bl	8006fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d6:	f7ff fb09 	bl	8000aec <main>
  bx  lr
 80014da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014e4:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80014e8:	0800705c 	.word	0x0800705c
  ldr r2, =_sbss
 80014ec:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 80014f0:	24000920 	.word	0x24000920

080014f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f4:	e7fe      	b.n	80014f4 <ADC3_IRQHandler>

080014f6 <_ZN11BlinkingLed12setFrequencyEf>:

void BlinkingLed::setDutyCycle(const uint8_t DutyCycle){
	BlinkingLed::DutyCycle=DutyCycle;
}

void BlinkingLed::setFrequency(const float Frequency){
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	ed87 0a00 	vstr	s0, [r7]
	BlinkingLed::Frequency=Frequency;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	619a      	str	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <_ZN11BlinkingLed10setPinPortEP12GPIO_TypeDeft>:

void BlinkingLed::setPinPort( GPIO_TypeDef *Port, uint16_t Pin){
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	4613      	mov	r3, r2
 8001520:	80fb      	strh	r3, [r7, #6]
	BlinkingLed::Port=Port;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	605a      	str	r2, [r3, #4]
	BlinkingLed::Pin=Pin;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	88fa      	ldrh	r2, [r7, #6]
 800152c:	811a      	strh	r2, [r3, #8]
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <_ZN11BlinkingLed15processBlinkingEv>:

void BlinkingLed::processBlinking(void){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	if(BlinkingLed::checkExpiration())
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	330c      	adds	r3, #12
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f838 	bl	80015be <_ZN5myhal16NonBlockingDelay15checkExpirationEv>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf14      	ite	ne
 8001554:	2301      	movne	r3, #1
 8001556:	2300      	moveq	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d018      	beq.n	8001590 <_ZN11BlinkingLed15processBlinkingEv+0x54>
	  {
		BlinkingLed::initialise(1/Frequency*1000);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f103 020c 	add.w	r2, r3, #12
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	ed93 7a06 	vldr	s14, [r3, #24]
 800156a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800156e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001572:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001598 <_ZN11BlinkingLed15processBlinkingEv+0x5c>
 8001576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800157a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800157e:	ee17 1a90 	vmov	r1, s15
 8001582:	4610      	mov	r0, r2
 8001584:	f000 f80a 	bl	800159c <_ZN5myhal16NonBlockingDelay10initialiseEm>
		BlinkingLed::toggleLED();
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f834 	bl	80015f8 <_ZN5myhal11STM32H7_led9toggleLEDEv>
	  }
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	447a0000 	.word	0x447a0000

0800159c <_ZN5myhal16NonBlockingDelay10initialiseEm>:
NonBlockingDelay::~NonBlockingDelay() {
	// TODO Auto-generated destructor stub
}


void NonBlockingDelay::initialise(const uint32_t delay){
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	waitTime = delay;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	605a      	str	r2, [r3, #4]
	tickstart = HAL_GetTick(); // "start timer" by setting reference point
 80015ac:	f000 f8ba 	bl	8001724 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	609a      	str	r2, [r3, #8]
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_ZN5myhal16NonBlockingDelay15checkExpirationEv>:

// returns 0 if not expired and 0xFF if expired or not yet set
uint8_t NonBlockingDelay::checkExpiration(){
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - tickstart) < waitTime){ // timer counting, not yet expired
 80015c6:	f000 f8ad 	bl	8001724 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	1ad2      	subs	r2, r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	bf34      	ite	cc
 80015da:	2301      	movcc	r3, #1
 80015dc:	2300      	movcs	r3, #0
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <_ZN5myhal16NonBlockingDelay15checkExpirationEv+0x2a>
		return 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e003      	b.n	80015f0 <_ZN5myhal16NonBlockingDelay15checkExpirationEv+0x32>
	}
	else{ // timer expired (or not set)
		waitTime = 0;// reset waitTime
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
		return 0xFF;
 80015ee:	23ff      	movs	r3, #255	; 0xff
	}
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_ZN5myhal11STM32H7_led9toggleLEDEv>:

myhal::STM32H7_led::~STM32H7_led() {
	// TODO Auto-generated destructor stub
}

void myhal::STM32H7_led::toggleLED(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_TogglePin(Port, Pin);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	891b      	ldrh	r3, [r3, #8]
 8001608:	4619      	mov	r1, r3
 800160a:	4610      	mov	r0, r2
 800160c:	f000 ffab 	bl	8002566 <HAL_GPIO_TogglePin>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161e:	2003      	movs	r0, #3
 8001620:	f000 f982 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001624:	f001 ffaa 	bl	800357c <HAL_RCC_GetSysClockFreq>
 8001628:	4602      	mov	r2, r0
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_Init+0x68>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	4913      	ldr	r1, [pc, #76]	; (8001684 <HAL_Init+0x6c>)
 8001636:	5ccb      	ldrb	r3, [r1, r3]
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
 8001640:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_Init+0x68>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_Init+0x6c>)
 800164c:	5cd3      	ldrb	r3, [r2, r3]
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	fa22 f303 	lsr.w	r3, r2, r3
 8001658:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <HAL_Init+0x70>)
 800165a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800165c:	4a0b      	ldr	r2, [pc, #44]	; (800168c <HAL_Init+0x74>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001662:	2000      	movs	r0, #0
 8001664:	f000 f814 	bl	8001690 <HAL_InitTick>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e002      	b.n	8001678 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001672:	f7ff fcb7 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	58024400 	.word	0x58024400
 8001684:	08007014 	.word	0x08007014
 8001688:	24000004 	.word	0x24000004
 800168c:	24000000 	.word	0x24000000

08001690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_InitTick+0x60>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e021      	b.n	80016e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_InitTick+0x64>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_InitTick+0x60>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f959 	bl	8001972 <HAL_SYSTICK_Config>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00e      	b.n	80016e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d80a      	bhi.n	80016e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d0:	2200      	movs	r2, #0
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f000 f931 	bl	800193e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <HAL_InitTick+0x68>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e000      	b.n	80016e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2400000c 	.word	0x2400000c
 80016f4:	24000000 	.word	0x24000000
 80016f8:	24000008 	.word	0x24000008

080016fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x24>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <HAL_IncTick+0x24>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	2400000c 	.word	0x2400000c
 8001720:	240007d0 	.word	0x240007d0

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_GetTick+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	240007d0 	.word	0x240007d0

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff ffee 	bl	8001724 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_Delay+0x44>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffde 	bl	8001724 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2400000c 	.word	0x2400000c

08001784 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <HAL_GetREVID+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0c1b      	lsrs	r3, r3, #16
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	5c001000 	.word	0x5c001000

0800179c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80017ac:	4904      	ldr	r1, [pc, #16]	; (80017c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	58000400 	.word	0x58000400

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <__NVIC_SetPriorityGrouping+0x40>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <__NVIC_SetPriorityGrouping+0x40>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00
 8001808:	05fa0000 	.word	0x05fa0000

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff47 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff5e 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff90 	bl	800187c <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5f 	bl	8001828 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffb2 	bl	80018e4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e0cf      	b.n	8001b3e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d106      	bne.n	80019b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2223      	movs	r2, #35	; 0x23
 80019ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fb31 	bl	8001018 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	4b64      	ldr	r3, [pc, #400]	; (8001b48 <HAL_ETH_Init+0x1bc>)
 80019b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019bc:	4a62      	ldr	r2, [pc, #392]	; (8001b48 <HAL_ETH_Init+0x1bc>)
 80019be:	f043 0302 	orr.w	r3, r3, #2
 80019c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019c6:	4b60      	ldr	r3, [pc, #384]	; (8001b48 <HAL_ETH_Init+0x1bc>)
 80019c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7a1b      	ldrb	r3, [r3, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d103      	bne.n	80019e4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff fedd 	bl	800179c <HAL_SYSCFG_ETHInterfaceSelect>
 80019e2:	e003      	b.n	80019ec <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80019e4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80019e8:	f7ff fed8 	bl	800179c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80019ec:	4b57      	ldr	r3, [pc, #348]	; (8001b4c <HAL_ETH_Init+0x1c0>)
 80019ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a08:	f7ff fe8c 	bl	8001724 <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a0e:	e011      	b.n	8001a34 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a10:	f7ff fe88 	bl	8001724 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a1e:	d909      	bls.n	8001a34 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2204      	movs	r2, #4
 8001a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	22e0      	movs	r2, #224	; 0xe0
 8001a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e084      	b.n	8001b3e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1e4      	bne.n	8001a10 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f886 	bl	8001b58 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a4c:	f001 ff10 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a3f      	ldr	r2, [pc, #252]	; (8001b50 <HAL_ETH_Init+0x1c4>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	0c9a      	lsrs	r2, r3, #18
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3a01      	subs	r2, #1
 8001a60:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 fa71 	bl	8001f4c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001a76:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a86:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	22e0      	movs	r2, #224	; 0xe0
 8001aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e049      	b.n	8001b3e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001ab6:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <HAL_ETH_Init+0x1c8>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6952      	ldr	r2, [r2, #20]
 8001abe:	0051      	lsls	r1, r2, #1
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aca:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fad9 	bl	8002086 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fb1f 	bl	8002118 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	3305      	adds	r3, #5
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	021a      	lsls	r2, r3, #8
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	3303      	adds	r3, #3
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	061a      	lsls	r2, r3, #24
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	3302      	adds	r3, #2
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	041b      	lsls	r3, r3, #16
 8001b0c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	3301      	adds	r3, #1
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b18:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b26:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2210      	movs	r2, #16
 8001b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	58024400 	.word	0x58024400
 8001b4c:	58000400 	.word	0x58000400
 8001b50:	431bde83 	.word	0x431bde83
 8001b54:	ffff8001 	.word	0xffff8001

08001b58 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b72:	f001 fe7d 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 8001b76:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4a1e      	ldr	r2, [pc, #120]	; (8001bf4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d908      	bls.n	8001b92 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d804      	bhi.n	8001b92 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e027      	b.n	8001be2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	4a18      	ldr	r2, [pc, #96]	; (8001bf8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d908      	bls.n	8001bac <HAL_ETH_SetMDIOClockRange+0x54>
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d204      	bcs.n	8001bac <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	e01a      	b.n	8001be2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d303      	bcc.n	8001bbc <HAL_ETH_SetMDIOClockRange+0x64>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d911      	bls.n	8001be0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4a10      	ldr	r2, [pc, #64]	; (8001c00 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d908      	bls.n	8001bd6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d804      	bhi.n	8001bd6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	e005      	b.n	8001be2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	e000      	b.n	8001be2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001be0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	01312cff 	.word	0x01312cff
 8001bf8:	02160ebf 	.word	0x02160ebf
 8001bfc:	03938700 	.word	0x03938700
 8001c00:	05f5e0ff 	.word	0x05f5e0ff
 8001c04:	08f0d17f 	.word	0x08f0d17f

08001c08 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001c1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	791b      	ldrb	r3, [r3, #4]
 8001c20:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001c22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	7b1b      	ldrb	r3, [r3, #12]
 8001c28:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001c2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	7b5b      	ldrb	r3, [r3, #13]
 8001c30:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	7b9b      	ldrb	r3, [r3, #14]
 8001c38:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	7bdb      	ldrb	r3, [r3, #15]
 8001c40:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c42:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	7c12      	ldrb	r2, [r2, #16]
 8001c48:	2a00      	cmp	r2, #0
 8001c4a:	d102      	bne.n	8001c52 <ETH_SetMACConfig+0x4a>
 8001c4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c50:	e000      	b.n	8001c54 <ETH_SetMACConfig+0x4c>
 8001c52:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c54:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	7c52      	ldrb	r2, [r2, #17]
 8001c5a:	2a00      	cmp	r2, #0
 8001c5c:	d102      	bne.n	8001c64 <ETH_SetMACConfig+0x5c>
 8001c5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c62:	e000      	b.n	8001c66 <ETH_SetMACConfig+0x5e>
 8001c64:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	7c9b      	ldrb	r3, [r3, #18]
 8001c6c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c6e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001c74:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001c7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	7f1b      	ldrb	r3, [r3, #28]
 8001c80:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001c82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	7f5b      	ldrb	r3, [r3, #29]
 8001c88:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001c8a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	7f92      	ldrb	r2, [r2, #30]
 8001c90:	2a00      	cmp	r2, #0
 8001c92:	d102      	bne.n	8001c9a <ETH_SetMACConfig+0x92>
 8001c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c98:	e000      	b.n	8001c9c <ETH_SetMACConfig+0x94>
 8001c9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001c9c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	7fdb      	ldrb	r3, [r3, #31]
 8001ca2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001ca4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001cac:	2a00      	cmp	r2, #0
 8001cae:	d102      	bne.n	8001cb6 <ETH_SetMACConfig+0xae>
 8001cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb4:	e000      	b.n	8001cb8 <ETH_SetMACConfig+0xb0>
 8001cb6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001cb8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001cbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cc6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001cc8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b56      	ldr	r3, [pc, #344]	; (8001e34 <ETH_SetMACConfig+0x22c>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	68f9      	ldr	r1, [r7, #12]
 8001ce2:	430b      	orrs	r3, r1
 8001ce4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cf2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001cf4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cfc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001cfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d06:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d08:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001d10:	2a00      	cmp	r2, #0
 8001d12:	d102      	bne.n	8001d1a <ETH_SetMACConfig+0x112>
 8001d14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d18:	e000      	b.n	8001d1c <ETH_SetMACConfig+0x114>
 8001d1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d1c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	4b42      	ldr	r3, [pc, #264]	; (8001e38 <ETH_SetMACConfig+0x230>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	430b      	orrs	r3, r1
 8001d38:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d40:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <ETH_SetMACConfig+0x234>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	68f9      	ldr	r1, [r7, #12]
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d64:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d6a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d72:	2a00      	cmp	r2, #0
 8001d74:	d101      	bne.n	8001d7a <ETH_SetMACConfig+0x172>
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	e000      	b.n	8001d7c <ETH_SetMACConfig+0x174>
 8001d7a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001d7c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d82:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d8e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001d92:	4013      	ands	r3, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001da4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001dac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dba:	f023 0103 	bic.w	r1, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001dd2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001dee:	2a00      	cmp	r2, #0
 8001df0:	d101      	bne.n	8001df6 <ETH_SetMACConfig+0x1ee>
 8001df2:	2240      	movs	r2, #64	; 0x40
 8001df4:	e000      	b.n	8001df8 <ETH_SetMACConfig+0x1f0>
 8001df6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001df8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001e00:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001e0a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001e18:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	00048083 	.word	0x00048083
 8001e38:	c0f88000 	.word	0xc0f88000
 8001e3c:	fffffef0 	.word	0xfffffef0

08001e40 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <ETH_SetDMAConfig+0xf8>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	6811      	ldr	r1, [r2, #0]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e66:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	791b      	ldrb	r3, [r3, #4]
 8001e6c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e72:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	7b1b      	ldrb	r3, [r3, #12]
 8001e78:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <ETH_SetDMAConfig+0xfc>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	68f9      	ldr	r1, [r7, #12]
 8001e92:	430b      	orrs	r3, r1
 8001e94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e98:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	7b5b      	ldrb	r3, [r3, #13]
 8001e9e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001eb4:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <ETH_SetDMAConfig+0x100>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	68f9      	ldr	r1, [r7, #12]
 8001ebe:	430b      	orrs	r3, r1
 8001ec0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ec4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	7d1b      	ldrb	r3, [r3, #20]
 8001ed0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ed2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	7f5b      	ldrb	r3, [r3, #29]
 8001ed8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <ETH_SetDMAConfig+0x104>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	68f9      	ldr	r1, [r7, #12]
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001efa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	7f1b      	ldrb	r3, [r3, #28]
 8001f02:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f14:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <ETH_SetDMAConfig+0x108>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	68f9      	ldr	r1, [r7, #12]
 8001f22:	430b      	orrs	r3, r1
 8001f24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f28:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	ffff87fd 	.word	0xffff87fd
 8001f3c:	ffff2ffe 	.word	0xffff2ffe
 8001f40:	fffec000 	.word	0xfffec000
 8001f44:	ffc0efef 	.word	0xffc0efef
 8001f48:	7fc0ffff 	.word	0x7fc0ffff

08001f4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b0a4      	sub	sp, #144	; 0x90
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001f70:	2301      	movs	r3, #1
 8001f72:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f76:	2301      	movs	r3, #1
 8001f78:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001f82:	2301      	movs	r3, #1
 8001f84:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f8c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001fa4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001fa8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001fea:	2301      	movs	r3, #1
 8001fec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001ff6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ffc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002000:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002008:	2302      	movs	r3, #2
 800200a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002020:	2301      	movs	r3, #1
 8002022:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002026:	2300      	movs	r3, #0
 8002028:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800202a:	2301      	movs	r3, #1
 800202c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fde6 	bl	8001c08 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800203c:	2301      	movs	r3, #1
 800203e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002040:	2301      	movs	r3, #1
 8002042:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002056:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800205a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002064:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800206c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	4619      	mov	r1, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fee1 	bl	8001e40 <ETH_SetDMAConfig>
}
 800207e:	bf00      	nop
 8002080:	3790      	adds	r7, #144	; 0x90
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002086:	b480      	push	{r7}
 8002088:	b085      	sub	sp, #20
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	e01d      	b.n	80020d0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68d9      	ldr	r1, [r3, #12]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2200      	movs	r2, #0
 80020b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	3206      	adds	r2, #6
 80020c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3301      	adds	r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d9de      	bls.n	8002094 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e4:	461a      	mov	r2, r3
 80020e6:	2303      	movs	r3, #3
 80020e8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002108:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e023      	b.n	800216e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6919      	ldr	r1, [r3, #16]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2200      	movs	r2, #0
 8002142:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2200      	movs	r2, #0
 800215a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	3212      	adds	r2, #18
 8002164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3301      	adds	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d9d8      	bls.n	8002126 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219a:	461a      	mov	r2, r3
 800219c:	2303      	movs	r3, #3
 800219e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ae:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021e2:	4b89      	ldr	r3, [pc, #548]	; (8002408 <HAL_GPIO_Init+0x234>)
 80021e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021e6:	e194      	b.n	8002512 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	2101      	movs	r1, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8186 	beq.w	800250c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d005      	beq.n	8002218 <HAL_GPIO_Init+0x44>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d130      	bne.n	800227a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800224e:	2201      	movs	r2, #1
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	f003 0201 	and.w	r2, r3, #1
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b03      	cmp	r3, #3
 8002284:	d017      	beq.n	80022b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	2203      	movs	r2, #3
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d123      	bne.n	800230a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	08da      	lsrs	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3208      	adds	r2, #8
 80022ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	220f      	movs	r2, #15
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	08da      	lsrs	r2, r3, #3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3208      	adds	r2, #8
 8002304:	69b9      	ldr	r1, [r7, #24]
 8002306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	2203      	movs	r2, #3
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0203 	and.w	r2, r3, #3
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 80e0 	beq.w	800250c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234c:	4b2f      	ldr	r3, [pc, #188]	; (800240c <HAL_GPIO_Init+0x238>)
 800234e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002352:	4a2e      	ldr	r2, [pc, #184]	; (800240c <HAL_GPIO_Init+0x238>)
 8002354:	f043 0302 	orr.w	r3, r3, #2
 8002358:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800235c:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_GPIO_Init+0x238>)
 800235e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800236a:	4a29      	ldr	r2, [pc, #164]	; (8002410 <HAL_GPIO_Init+0x23c>)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	3302      	adds	r3, #2
 8002372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	220f      	movs	r2, #15
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a20      	ldr	r2, [pc, #128]	; (8002414 <HAL_GPIO_Init+0x240>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d052      	beq.n	800243c <HAL_GPIO_Init+0x268>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a1f      	ldr	r2, [pc, #124]	; (8002418 <HAL_GPIO_Init+0x244>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d031      	beq.n	8002402 <HAL_GPIO_Init+0x22e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a1e      	ldr	r2, [pc, #120]	; (800241c <HAL_GPIO_Init+0x248>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d02b      	beq.n	80023fe <HAL_GPIO_Init+0x22a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a1d      	ldr	r2, [pc, #116]	; (8002420 <HAL_GPIO_Init+0x24c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d025      	beq.n	80023fa <HAL_GPIO_Init+0x226>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a1c      	ldr	r2, [pc, #112]	; (8002424 <HAL_GPIO_Init+0x250>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01f      	beq.n	80023f6 <HAL_GPIO_Init+0x222>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a1b      	ldr	r2, [pc, #108]	; (8002428 <HAL_GPIO_Init+0x254>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d019      	beq.n	80023f2 <HAL_GPIO_Init+0x21e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a1a      	ldr	r2, [pc, #104]	; (800242c <HAL_GPIO_Init+0x258>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d013      	beq.n	80023ee <HAL_GPIO_Init+0x21a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a19      	ldr	r2, [pc, #100]	; (8002430 <HAL_GPIO_Init+0x25c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00d      	beq.n	80023ea <HAL_GPIO_Init+0x216>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_GPIO_Init+0x260>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d007      	beq.n	80023e6 <HAL_GPIO_Init+0x212>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a17      	ldr	r2, [pc, #92]	; (8002438 <HAL_GPIO_Init+0x264>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_GPIO_Init+0x20e>
 80023de:	2309      	movs	r3, #9
 80023e0:	e02d      	b.n	800243e <HAL_GPIO_Init+0x26a>
 80023e2:	230a      	movs	r3, #10
 80023e4:	e02b      	b.n	800243e <HAL_GPIO_Init+0x26a>
 80023e6:	2308      	movs	r3, #8
 80023e8:	e029      	b.n	800243e <HAL_GPIO_Init+0x26a>
 80023ea:	2307      	movs	r3, #7
 80023ec:	e027      	b.n	800243e <HAL_GPIO_Init+0x26a>
 80023ee:	2306      	movs	r3, #6
 80023f0:	e025      	b.n	800243e <HAL_GPIO_Init+0x26a>
 80023f2:	2305      	movs	r3, #5
 80023f4:	e023      	b.n	800243e <HAL_GPIO_Init+0x26a>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e021      	b.n	800243e <HAL_GPIO_Init+0x26a>
 80023fa:	2303      	movs	r3, #3
 80023fc:	e01f      	b.n	800243e <HAL_GPIO_Init+0x26a>
 80023fe:	2302      	movs	r3, #2
 8002400:	e01d      	b.n	800243e <HAL_GPIO_Init+0x26a>
 8002402:	2301      	movs	r3, #1
 8002404:	e01b      	b.n	800243e <HAL_GPIO_Init+0x26a>
 8002406:	bf00      	nop
 8002408:	58000080 	.word	0x58000080
 800240c:	58024400 	.word	0x58024400
 8002410:	58000400 	.word	0x58000400
 8002414:	58020000 	.word	0x58020000
 8002418:	58020400 	.word	0x58020400
 800241c:	58020800 	.word	0x58020800
 8002420:	58020c00 	.word	0x58020c00
 8002424:	58021000 	.word	0x58021000
 8002428:	58021400 	.word	0x58021400
 800242c:	58021800 	.word	0x58021800
 8002430:	58021c00 	.word	0x58021c00
 8002434:	58022000 	.word	0x58022000
 8002438:	58022400 	.word	0x58022400
 800243c:	2300      	movs	r3, #0
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	f002 0203 	and.w	r2, r2, #3
 8002444:	0092      	lsls	r2, r2, #2
 8002446:	4093      	lsls	r3, r2
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800244e:	4938      	ldr	r1, [pc, #224]	; (8002530 <HAL_GPIO_Init+0x35c>)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3302      	adds	r3, #2
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800245c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	3301      	adds	r3, #1
 8002510:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	f47f ae63 	bne.w	80021e8 <HAL_GPIO_Init+0x14>
  }
}
 8002522:	bf00      	nop
 8002524:	bf00      	nop
 8002526:	3724      	adds	r7, #36	; 0x24
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	58000400 	.word	0x58000400

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002550:	e003      	b.n	800255a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002566:	b480      	push	{r7}
 8002568:	b085      	sub	sp, #20
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002578:	887a      	ldrh	r2, [r7, #2]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4013      	ands	r3, r2
 800257e:	041a      	lsls	r2, r3, #16
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43d9      	mvns	r1, r3
 8002584:	887b      	ldrh	r3, [r7, #2]
 8002586:	400b      	ands	r3, r1
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80025a4:	4a08      	ldr	r2, [pc, #32]	; (80025c8 <HAL_HSEM_FastTake+0x2c>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3320      	adds	r3, #32
 80025aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ae:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_HSEM_FastTake+0x30>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d101      	bne.n	80025b8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	58026400 	.word	0x58026400
 80025cc:	80000300 	.word	0x80000300

080025d0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80025da:	4906      	ldr	r1, [pc, #24]	; (80025f4 <HAL_HSEM_Release+0x24>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	58026400 	.word	0x58026400

080025f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fa:	b08f      	sub	sp, #60	; 0x3c
 80025fc:	af0a      	add	r7, sp, #40	; 0x28
 80025fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e116      	b.n	8002838 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d106      	bne.n	800262a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7fe fe2f 	bl	8001288 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2203      	movs	r2, #3
 800262e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d102      	bne.n	8002644 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f004 f8dd 	bl	8006808 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	687e      	ldr	r6, [r7, #4]
 8002656:	466d      	mov	r5, sp
 8002658:	f106 0410 	add.w	r4, r6, #16
 800265c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800265e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002664:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002668:	e885 0003 	stmia.w	r5, {r0, r1}
 800266c:	1d33      	adds	r3, r6, #4
 800266e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002670:	6838      	ldr	r0, [r7, #0]
 8002672:	f004 f85b 	bl	800672c <USB_CoreInit>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0d7      	b.n	8002838 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2100      	movs	r1, #0
 800268e:	4618      	mov	r0, r3
 8002690:	f004 f8cb 	bl	800682a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e04a      	b.n	8002730 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800269a:	7bfa      	ldrb	r2, [r7, #15]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	333d      	adds	r3, #61	; 0x3d
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	333c      	adds	r3, #60	; 0x3c
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	b298      	uxth	r0, r3
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	3356      	adds	r3, #86	; 0x56
 80026d6:	4602      	mov	r2, r0
 80026d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	3340      	adds	r3, #64	; 0x40
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	3344      	adds	r3, #68	; 0x44
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	3348      	adds	r3, #72	; 0x48
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	334c      	adds	r3, #76	; 0x4c
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	3301      	adds	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	7bfa      	ldrb	r2, [r7, #15]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	429a      	cmp	r2, r3
 8002738:	d3af      	bcc.n	800269a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273a:	2300      	movs	r3, #0
 800273c:	73fb      	strb	r3, [r7, #15]
 800273e:	e044      	b.n	80027ca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002798:	7bfa      	ldrb	r2, [r7, #15]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	3301      	adds	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d3b5      	bcc.n	8002740 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	687e      	ldr	r6, [r7, #4]
 80027dc:	466d      	mov	r5, sp
 80027de:	f106 0410 	add.w	r4, r6, #16
 80027e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80027f2:	1d33      	adds	r3, r6, #4
 80027f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f6:	6838      	ldr	r0, [r7, #0]
 80027f8:	f004 f864 	bl	80068c4 <USB_DevInit>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2202      	movs	r2, #2
 8002806:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e014      	b.n	8002838 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	2b01      	cmp	r3, #1
 8002824:	d102      	bne.n	800282c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f80a 	bl	8002840 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f004 fa22 	bl	8006c7a <USB_DevDisconnect>

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002840 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_PCDEx_ActivateLPM+0x44>)
 8002870:	4313      	orrs	r3, r2
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	10000003 	.word	0x10000003

08002888 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002890:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_PWREx_ConfigSupply+0xb0>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	2b06      	cmp	r3, #6
 800289a:	d00a      	beq.n	80028b2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800289c:	4b26      	ldr	r3, [pc, #152]	; (8002938 <HAL_PWREx_ConfigSupply+0xb0>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e040      	b.n	8002930 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e03e      	b.n	8002930 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028b2:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_PWREx_ConfigSupply+0xb0>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80028ba:	491f      	ldr	r1, [pc, #124]	; (8002938 <HAL_PWREx_ConfigSupply+0xb0>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028c2:	f7fe ff2f 	bl	8001724 <HAL_GetTick>
 80028c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028c8:	e009      	b.n	80028de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028ca:	f7fe ff2b 	bl	8001724 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028d8:	d901      	bls.n	80028de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e028      	b.n	8002930 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <HAL_PWREx_ConfigSupply+0xb0>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ea:	d1ee      	bne.n	80028ca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b1e      	cmp	r3, #30
 80028f0:	d008      	beq.n	8002904 <HAL_PWREx_ConfigSupply+0x7c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b2e      	cmp	r3, #46	; 0x2e
 80028f6:	d005      	beq.n	8002904 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b1d      	cmp	r3, #29
 80028fc:	d002      	beq.n	8002904 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b2d      	cmp	r3, #45	; 0x2d
 8002902:	d114      	bne.n	800292e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002904:	f7fe ff0e 	bl	8001724 <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800290a:	e009      	b.n	8002920 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800290c:	f7fe ff0a 	bl	8001724 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800291a:	d901      	bls.n	8002920 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e007      	b.n	8002930 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_PWREx_ConfigSupply+0xb0>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292c:	d1ee      	bne.n	800290c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	58024800 	.word	0x58024800

0800293c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4a04      	ldr	r2, [pc, #16]	; (8002958 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294a:	60d3      	str	r3, [r2, #12]
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	58024800 	.word	0x58024800

0800295c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08c      	sub	sp, #48	; 0x30
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	f000 bc48 	b.w	8003200 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 8088 	beq.w	8002a8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297e:	4b99      	ldr	r3, [pc, #612]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002988:	4b96      	ldr	r3, [pc, #600]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	2b10      	cmp	r3, #16
 8002992:	d007      	beq.n	80029a4 <HAL_RCC_OscConfig+0x48>
 8002994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002996:	2b18      	cmp	r3, #24
 8002998:	d111      	bne.n	80029be <HAL_RCC_OscConfig+0x62>
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d10c      	bne.n	80029be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a4:	4b8f      	ldr	r3, [pc, #572]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d06d      	beq.n	8002a8c <HAL_RCC_OscConfig+0x130>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d169      	bne.n	8002a8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f000 bc21 	b.w	8003200 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c6:	d106      	bne.n	80029d6 <HAL_RCC_OscConfig+0x7a>
 80029c8:	4b86      	ldr	r3, [pc, #536]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a85      	ldr	r2, [pc, #532]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 80029ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	e02e      	b.n	8002a34 <HAL_RCC_OscConfig+0xd8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x9c>
 80029de:	4b81      	ldr	r3, [pc, #516]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a80      	ldr	r2, [pc, #512]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 80029e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b7e      	ldr	r3, [pc, #504]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a7d      	ldr	r2, [pc, #500]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 80029f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e01d      	b.n	8002a34 <HAL_RCC_OscConfig+0xd8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0xc0>
 8002a02:	4b78      	ldr	r3, [pc, #480]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a77      	ldr	r2, [pc, #476]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a74      	ldr	r2, [pc, #464]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCC_OscConfig+0xd8>
 8002a1c:	4b71      	ldr	r3, [pc, #452]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a70      	ldr	r2, [pc, #448]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b6e      	ldr	r3, [pc, #440]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a6d      	ldr	r2, [pc, #436]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fe72 	bl	8001724 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe fe6e 	bl	8001724 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e3d4      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a56:	4b63      	ldr	r3, [pc, #396]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0xe8>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe fe5e 	bl	8001724 <HAL_GetTick>
 8002a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fe fe5a 	bl	8001724 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e3c0      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a7e:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x110>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80ca 	beq.w	8002c30 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a9c:	4b51      	ldr	r3, [pc, #324]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aa4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002aa6:	4b4f      	ldr	r3, [pc, #316]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x166>
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	2b18      	cmp	r3, #24
 8002ab6:	d156      	bne.n	8002b66 <HAL_RCC_OscConfig+0x20a>
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d151      	bne.n	8002b66 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac2:	4b48      	ldr	r3, [pc, #288]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_RCC_OscConfig+0x17e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e392      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ada:	4b42      	ldr	r3, [pc, #264]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 0219 	bic.w	r2, r3, #25
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	493f      	ldr	r1, [pc, #252]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe fe1a 	bl	8001724 <HAL_GetTick>
 8002af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af4:	f7fe fe16 	bl	8001724 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e37c      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b12:	f7fe fe37 	bl	8001784 <HAL_GetREVID>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d817      	bhi.n	8002b50 <HAL_RCC_OscConfig+0x1f4>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	d108      	bne.n	8002b3a <HAL_RCC_OscConfig+0x1de>
 8002b28:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b30:	4a2c      	ldr	r2, [pc, #176]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b36:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b38:	e07a      	b.n	8002c30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	4b2a      	ldr	r3, [pc, #168]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	031b      	lsls	r3, r3, #12
 8002b48:	4926      	ldr	r1, [pc, #152]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b4e:	e06f      	b.n	8002c30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	4921      	ldr	r1, [pc, #132]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b64:	e064      	b.n	8002c30 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d047      	beq.n	8002bfe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b6e:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 0219 	bic.w	r2, r3, #25
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	491a      	ldr	r1, [pc, #104]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe fdd0 	bl	8001724 <HAL_GetTick>
 8002b84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b88:	f7fe fdcc 	bl	8001724 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e332      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba6:	f7fe fded 	bl	8001784 <HAL_GetREVID>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d819      	bhi.n	8002be8 <HAL_RCC_OscConfig+0x28c>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d108      	bne.n	8002bce <HAL_RCC_OscConfig+0x272>
 8002bbc:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002bc4:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bca:	6053      	str	r3, [r2, #4]
 8002bcc:	e030      	b.n	8002c30 <HAL_RCC_OscConfig+0x2d4>
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	031b      	lsls	r3, r3, #12
 8002bdc:	4901      	ldr	r1, [pc, #4]	; (8002be4 <HAL_RCC_OscConfig+0x288>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
 8002be2:	e025      	b.n	8002c30 <HAL_RCC_OscConfig+0x2d4>
 8002be4:	58024400 	.word	0x58024400
 8002be8:	4b9a      	ldr	r3, [pc, #616]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	4997      	ldr	r1, [pc, #604]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]
 8002bfc:	e018      	b.n	8002c30 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfe:	4b95      	ldr	r3, [pc, #596]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a94      	ldr	r2, [pc, #592]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fe fd8b 	bl	8001724 <HAL_GetTick>
 8002c0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c12:	f7fe fd87 	bl	8001724 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e2ed      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c24:	4b8b      	ldr	r3, [pc, #556]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80a9 	beq.w	8002d90 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3e:	4b85      	ldr	r3, [pc, #532]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c46:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c48:	4b82      	ldr	r3, [pc, #520]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d007      	beq.n	8002c64 <HAL_RCC_OscConfig+0x308>
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b18      	cmp	r3, #24
 8002c58:	d13a      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x374>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d135      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c64:	4b7b      	ldr	r3, [pc, #492]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_OscConfig+0x320>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	2b80      	cmp	r3, #128	; 0x80
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e2c1      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c7c:	f7fe fd82 	bl	8001784 <HAL_GetREVID>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d817      	bhi.n	8002cba <HAL_RCC_OscConfig+0x35e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d108      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x348>
 8002c92:	4b70      	ldr	r3, [pc, #448]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c9a:	4a6e      	ldr	r2, [pc, #440]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002c9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ca0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ca2:	e075      	b.n	8002d90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ca4:	4b6b      	ldr	r3, [pc, #428]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	069b      	lsls	r3, r3, #26
 8002cb2:	4968      	ldr	r1, [pc, #416]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cb8:	e06a      	b.n	8002d90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cba:	4b66      	ldr	r3, [pc, #408]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	061b      	lsls	r3, r3, #24
 8002cc8:	4962      	ldr	r1, [pc, #392]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cce:	e05f      	b.n	8002d90 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d042      	beq.n	8002d5e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002cd8:	4b5e      	ldr	r3, [pc, #376]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a5d      	ldr	r2, [pc, #372]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fd1e 	bl	8001724 <HAL_GetTick>
 8002ce8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002cec:	f7fe fd1a 	bl	8001724 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e280      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cfe:	4b55      	ldr	r3, [pc, #340]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d0a:	f7fe fd3b 	bl	8001784 <HAL_GetREVID>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d817      	bhi.n	8002d48 <HAL_RCC_OscConfig+0x3ec>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d108      	bne.n	8002d32 <HAL_RCC_OscConfig+0x3d6>
 8002d20:	4b4c      	ldr	r3, [pc, #304]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d28:	4a4a      	ldr	r2, [pc, #296]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002d2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d2e:	6053      	str	r3, [r2, #4]
 8002d30:	e02e      	b.n	8002d90 <HAL_RCC_OscConfig+0x434>
 8002d32:	4b48      	ldr	r3, [pc, #288]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	069b      	lsls	r3, r3, #26
 8002d40:	4944      	ldr	r1, [pc, #272]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
 8002d46:	e023      	b.n	8002d90 <HAL_RCC_OscConfig+0x434>
 8002d48:	4b42      	ldr	r3, [pc, #264]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	493f      	ldr	r1, [pc, #252]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60cb      	str	r3, [r1, #12]
 8002d5c:	e018      	b.n	8002d90 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a3c      	ldr	r2, [pc, #240]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7fe fcdb 	bl	8001724 <HAL_GetTick>
 8002d6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d72:	f7fe fcd7 	bl	8001724 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e23d      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d84:	4b33      	ldr	r3, [pc, #204]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d036      	beq.n	8002e0a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d019      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da8:	4a2a      	ldr	r2, [pc, #168]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fe fcb8 	bl	8001724 <HAL_GetTick>
 8002db4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db8:	f7fe fcb4 	bl	8001724 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e21a      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dca:	4b22      	ldr	r3, [pc, #136]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0x45c>
 8002dd6:	e018      	b.n	8002e0a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd8:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ddc:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002dde:	f023 0301 	bic.w	r3, r3, #1
 8002de2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fe fc9e 	bl	8001724 <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dec:	f7fe fc9a 	bl	8001724 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e200      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d039      	beq.n	8002e8a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d01c      	beq.n	8002e58 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a0c      	ldr	r2, [pc, #48]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fc7b 	bl	8001724 <HAL_GetTick>
 8002e2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e32:	f7fe fc77 	bl	8001724 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e1dd      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <HAL_RCC_OscConfig+0x4f8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x4d6>
 8002e50:	e01b      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
 8002e52:	bf00      	nop
 8002e54:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e58:	4b9b      	ldr	r3, [pc, #620]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a9a      	ldr	r2, [pc, #616]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002e5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e64:	f7fe fc5e 	bl	8001724 <HAL_GetTick>
 8002e68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e6c:	f7fe fc5a 	bl	8001724 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e1c0      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e7e:	4b92      	ldr	r3, [pc, #584]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8081 	beq.w	8002f9a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e98:	4b8c      	ldr	r3, [pc, #560]	; (80030cc <HAL_RCC_OscConfig+0x770>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a8b      	ldr	r2, [pc, #556]	; (80030cc <HAL_RCC_OscConfig+0x770>)
 8002e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ea4:	f7fe fc3e 	bl	8001724 <HAL_GetTick>
 8002ea8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eac:	f7fe fc3a 	bl	8001724 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e1a0      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ebe:	4b83      	ldr	r3, [pc, #524]	; (80030cc <HAL_RCC_OscConfig+0x770>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d106      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x584>
 8002ed2:	4b7d      	ldr	r3, [pc, #500]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a7c      	ldr	r2, [pc, #496]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ede:	e02d      	b.n	8002f3c <HAL_RCC_OscConfig+0x5e0>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10c      	bne.n	8002f02 <HAL_RCC_OscConfig+0x5a6>
 8002ee8:	4b77      	ldr	r3, [pc, #476]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	4a76      	ldr	r2, [pc, #472]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef4:	4b74      	ldr	r3, [pc, #464]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	4a73      	ldr	r2, [pc, #460]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002efa:	f023 0304 	bic.w	r3, r3, #4
 8002efe:	6713      	str	r3, [r2, #112]	; 0x70
 8002f00:	e01c      	b.n	8002f3c <HAL_RCC_OscConfig+0x5e0>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x5c8>
 8002f0a:	4b6f      	ldr	r3, [pc, #444]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	4a6e      	ldr	r2, [pc, #440]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	6713      	str	r3, [r2, #112]	; 0x70
 8002f16:	4b6c      	ldr	r3, [pc, #432]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	4a6b      	ldr	r2, [pc, #428]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6713      	str	r3, [r2, #112]	; 0x70
 8002f22:	e00b      	b.n	8002f3c <HAL_RCC_OscConfig+0x5e0>
 8002f24:	4b68      	ldr	r3, [pc, #416]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	4a67      	ldr	r2, [pc, #412]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f30:	4b65      	ldr	r3, [pc, #404]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	4a64      	ldr	r2, [pc, #400]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002f36:	f023 0304 	bic.w	r3, r3, #4
 8002f3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d015      	beq.n	8002f70 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7fe fbee 	bl	8001724 <HAL_GetTick>
 8002f48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fe fbea 	bl	8001724 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e14e      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f62:	4b59      	ldr	r3, [pc, #356]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0ee      	beq.n	8002f4c <HAL_RCC_OscConfig+0x5f0>
 8002f6e:	e014      	b.n	8002f9a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe fbd8 	bl	8001724 <HAL_GetTick>
 8002f74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f78:	f7fe fbd4 	bl	8001724 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e138      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f8e:	4b4e      	ldr	r3, [pc, #312]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1ee      	bne.n	8002f78 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 812d 	beq.w	80031fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002fa4:	4b48      	ldr	r3, [pc, #288]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fac:	2b18      	cmp	r3, #24
 8002fae:	f000 80bd 	beq.w	800312c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	f040 809e 	bne.w	80030f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbc:	4b42      	ldr	r3, [pc, #264]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a41      	ldr	r2, [pc, #260]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fbac 	bl	8001724 <HAL_GetTick>
 8002fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe fba8 	bl	8001724 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e10e      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fe2:	4b39      	ldr	r3, [pc, #228]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fee:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ff2:	4b37      	ldr	r3, [pc, #220]	; (80030d0 <HAL_RCC_OscConfig+0x774>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ffe:	0112      	lsls	r2, r2, #4
 8003000:	430a      	orrs	r2, r1
 8003002:	4931      	ldr	r1, [pc, #196]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8003004:	4313      	orrs	r3, r2
 8003006:	628b      	str	r3, [r1, #40]	; 0x28
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	3b01      	subs	r3, #1
 800300e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003016:	3b01      	subs	r3, #1
 8003018:	025b      	lsls	r3, r3, #9
 800301a:	b29b      	uxth	r3, r3
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	3b01      	subs	r3, #1
 8003024:	041b      	lsls	r3, r3, #16
 8003026:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	3b01      	subs	r3, #1
 8003032:	061b      	lsls	r3, r3, #24
 8003034:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003038:	4923      	ldr	r1, [pc, #140]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 800303a:	4313      	orrs	r3, r2
 800303c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800303e:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	4a21      	ldr	r2, [pc, #132]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800304a:	4b1f      	ldr	r3, [pc, #124]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 800304c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800304e:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <HAL_RCC_OscConfig+0x778>)
 8003050:	4013      	ands	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003056:	00d2      	lsls	r2, r2, #3
 8003058:	491b      	ldr	r1, [pc, #108]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 800305a:	4313      	orrs	r3, r2
 800305c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	f023 020c 	bic.w	r2, r3, #12
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4917      	ldr	r1, [pc, #92]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 800306c:	4313      	orrs	r3, r2
 800306e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003070:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	f023 0202 	bic.w	r2, r3, #2
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307c:	4912      	ldr	r1, [pc, #72]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 800307e:	4313      	orrs	r3, r2
 8003080:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	4a10      	ldr	r2, [pc, #64]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800308e:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	4a0d      	ldr	r2, [pc, #52]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8003094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003098:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 80030a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	4a07      	ldr	r2, [pc, #28]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 80030b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7fe fb31 	bl	8001724 <HAL_GetTick>
 80030c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030c4:	e011      	b.n	80030ea <HAL_RCC_OscConfig+0x78e>
 80030c6:	bf00      	nop
 80030c8:	58024400 	.word	0x58024400
 80030cc:	58024800 	.word	0x58024800
 80030d0:	fffffc0c 	.word	0xfffffc0c
 80030d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe fb24 	bl	8001724 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e08a      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030ea:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_RCC_OscConfig+0x8ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x77c>
 80030f6:	e082      	b.n	80031fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f8:	4b43      	ldr	r3, [pc, #268]	; (8003208 <HAL_RCC_OscConfig+0x8ac>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a42      	ldr	r2, [pc, #264]	; (8003208 <HAL_RCC_OscConfig+0x8ac>)
 80030fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe fb0e 	bl	8001724 <HAL_GetTick>
 8003108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310c:	f7fe fb0a 	bl	8001724 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e070      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800311e:	4b3a      	ldr	r3, [pc, #232]	; (8003208 <HAL_RCC_OscConfig+0x8ac>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x7b0>
 800312a:	e068      	b.n	80031fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <HAL_RCC_OscConfig+0x8ac>)
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003132:	4b35      	ldr	r3, [pc, #212]	; (8003208 <HAL_RCC_OscConfig+0x8ac>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	2b01      	cmp	r3, #1
 800313e:	d031      	beq.n	80031a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f003 0203 	and.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d12a      	bne.n	80031a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d122      	bne.n	80031a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d11a      	bne.n	80031a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	0a5b      	lsrs	r3, r3, #9
 8003172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d111      	bne.n	80031a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	0c1b      	lsrs	r3, r3, #16
 8003184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d108      	bne.n	80031a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	0e1b      	lsrs	r3, r3, #24
 8003196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e02b      	b.n	8003200 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80031a8:	4b17      	ldr	r3, [pc, #92]	; (8003208 <HAL_RCC_OscConfig+0x8ac>)
 80031aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ac:	08db      	lsrs	r3, r3, #3
 80031ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d01f      	beq.n	80031fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <HAL_RCC_OscConfig+0x8ac>)
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	4a11      	ldr	r2, [pc, #68]	; (8003208 <HAL_RCC_OscConfig+0x8ac>)
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031ca:	f7fe faab 	bl	8001724 <HAL_GetTick>
 80031ce:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80031d0:	bf00      	nop
 80031d2:	f7fe faa7 	bl	8001724 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	4293      	cmp	r3, r2
 80031dc:	d0f9      	beq.n	80031d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <HAL_RCC_OscConfig+0x8ac>)
 80031e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e2:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_RCC_OscConfig+0x8b0>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031ea:	00d2      	lsls	r2, r2, #3
 80031ec:	4906      	ldr	r1, [pc, #24]	; (8003208 <HAL_RCC_OscConfig+0x8ac>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_RCC_OscConfig+0x8ac>)
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	4a04      	ldr	r2, [pc, #16]	; (8003208 <HAL_RCC_OscConfig+0x8ac>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3730      	adds	r7, #48	; 0x30
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	58024400 	.word	0x58024400
 800320c:	ffff0007 	.word	0xffff0007

08003210 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e19c      	b.n	800355e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003224:	4b8a      	ldr	r3, [pc, #552]	; (8003450 <HAL_RCC_ClockConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d910      	bls.n	8003254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b87      	ldr	r3, [pc, #540]	; (8003450 <HAL_RCC_ClockConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 020f 	bic.w	r2, r3, #15
 800323a:	4985      	ldr	r1, [pc, #532]	; (8003450 <HAL_RCC_ClockConfig+0x240>)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b83      	ldr	r3, [pc, #524]	; (8003450 <HAL_RCC_ClockConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e184      	b.n	800355e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	4b7b      	ldr	r3, [pc, #492]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800326c:	429a      	cmp	r2, r3
 800326e:	d908      	bls.n	8003282 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003270:	4b78      	ldr	r3, [pc, #480]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	4975      	ldr	r1, [pc, #468]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 800327e:	4313      	orrs	r3, r2
 8003280:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d010      	beq.n	80032b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	4b70      	ldr	r3, [pc, #448]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800329a:	429a      	cmp	r2, r3
 800329c:	d908      	bls.n	80032b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800329e:	4b6d      	ldr	r3, [pc, #436]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	496a      	ldr	r1, [pc, #424]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d010      	beq.n	80032de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	4b64      	ldr	r3, [pc, #400]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d908      	bls.n	80032de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032cc:	4b61      	ldr	r3, [pc, #388]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	495e      	ldr	r1, [pc, #376]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d010      	beq.n	800330c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69da      	ldr	r2, [r3, #28]
 80032ee:	4b59      	ldr	r3, [pc, #356]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d908      	bls.n	800330c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032fa:	4b56      	ldr	r3, [pc, #344]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	4953      	ldr	r1, [pc, #332]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 8003308:	4313      	orrs	r3, r2
 800330a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d010      	beq.n	800333a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	4b4d      	ldr	r3, [pc, #308]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	429a      	cmp	r2, r3
 8003326:	d908      	bls.n	800333a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003328:	4b4a      	ldr	r3, [pc, #296]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f023 020f 	bic.w	r2, r3, #15
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4947      	ldr	r1, [pc, #284]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 8003336:	4313      	orrs	r3, r2
 8003338:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d055      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003346:	4b43      	ldr	r3, [pc, #268]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	4940      	ldr	r1, [pc, #256]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 8003354:	4313      	orrs	r3, r2
 8003356:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d107      	bne.n	8003370 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003360:	4b3c      	ldr	r3, [pc, #240]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d121      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0f6      	b.n	800355e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d107      	bne.n	8003388 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003378:	4b36      	ldr	r3, [pc, #216]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d115      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0ea      	b.n	800355e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003390:	4b30      	ldr	r3, [pc, #192]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d109      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0de      	b.n	800355e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033a0:	4b2c      	ldr	r3, [pc, #176]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0d6      	b.n	800355e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033b0:	4b28      	ldr	r3, [pc, #160]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f023 0207 	bic.w	r2, r3, #7
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4925      	ldr	r1, [pc, #148]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c2:	f7fe f9af 	bl	8001724 <HAL_GetTick>
 80033c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c8:	e00a      	b.n	80033e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ca:	f7fe f9ab 	bl	8001724 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d8:	4293      	cmp	r3, r2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e0be      	b.n	800355e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e0:	4b1c      	ldr	r3, [pc, #112]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d1eb      	bne.n	80033ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d010      	beq.n	8003420 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	429a      	cmp	r2, r3
 800340c:	d208      	bcs.n	8003420 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800340e:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f023 020f 	bic.w	r2, r3, #15
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	490e      	ldr	r1, [pc, #56]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 800341c:	4313      	orrs	r3, r2
 800341e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_ClockConfig+0x240>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d214      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <HAL_RCC_ClockConfig+0x240>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 020f 	bic.w	r2, r3, #15
 8003436:	4906      	ldr	r1, [pc, #24]	; (8003450 <HAL_RCC_ClockConfig+0x240>)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b04      	ldr	r3, [pc, #16]	; (8003450 <HAL_RCC_ClockConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e086      	b.n	800355e <HAL_RCC_ClockConfig+0x34e>
 8003450:	52002000 	.word	0x52002000
 8003454:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d010      	beq.n	8003486 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <HAL_RCC_ClockConfig+0x358>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003470:	429a      	cmp	r2, r3
 8003472:	d208      	bcs.n	8003486 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003474:	4b3c      	ldr	r3, [pc, #240]	; (8003568 <HAL_RCC_ClockConfig+0x358>)
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	4939      	ldr	r1, [pc, #228]	; (8003568 <HAL_RCC_ClockConfig+0x358>)
 8003482:	4313      	orrs	r3, r2
 8003484:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d010      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	4b34      	ldr	r3, [pc, #208]	; (8003568 <HAL_RCC_ClockConfig+0x358>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800349e:	429a      	cmp	r2, r3
 80034a0:	d208      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034a2:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_RCC_ClockConfig+0x358>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	492e      	ldr	r1, [pc, #184]	; (8003568 <HAL_RCC_ClockConfig+0x358>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d010      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	4b28      	ldr	r3, [pc, #160]	; (8003568 <HAL_RCC_ClockConfig+0x358>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d208      	bcs.n	80034e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034d0:	4b25      	ldr	r3, [pc, #148]	; (8003568 <HAL_RCC_ClockConfig+0x358>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	4922      	ldr	r1, [pc, #136]	; (8003568 <HAL_RCC_ClockConfig+0x358>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d010      	beq.n	8003510 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69da      	ldr	r2, [r3, #28]
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <HAL_RCC_ClockConfig+0x358>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d208      	bcs.n	8003510 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <HAL_RCC_ClockConfig+0x358>)
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	4917      	ldr	r1, [pc, #92]	; (8003568 <HAL_RCC_ClockConfig+0x358>)
 800350c:	4313      	orrs	r3, r2
 800350e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003510:	f000 f834 	bl	800357c <HAL_RCC_GetSysClockFreq>
 8003514:	4602      	mov	r2, r0
 8003516:	4b14      	ldr	r3, [pc, #80]	; (8003568 <HAL_RCC_ClockConfig+0x358>)
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	0a1b      	lsrs	r3, r3, #8
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	4912      	ldr	r1, [pc, #72]	; (800356c <HAL_RCC_ClockConfig+0x35c>)
 8003522:	5ccb      	ldrb	r3, [r1, r3]
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
 800352c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_RCC_ClockConfig+0x358>)
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	4a0d      	ldr	r2, [pc, #52]	; (800356c <HAL_RCC_ClockConfig+0x35c>)
 8003538:	5cd3      	ldrb	r3, [r2, r3]
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
 8003544:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <HAL_RCC_ClockConfig+0x360>)
 8003546:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003548:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <HAL_RCC_ClockConfig+0x364>)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <HAL_RCC_ClockConfig+0x368>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7fe f89c 	bl	8001690 <HAL_InitTick>
 8003558:	4603      	mov	r3, r0
 800355a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800355c:	7bfb      	ldrb	r3, [r7, #15]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	58024400 	.word	0x58024400
 800356c:	08007014 	.word	0x08007014
 8003570:	24000004 	.word	0x24000004
 8003574:	24000000 	.word	0x24000000
 8003578:	24000008 	.word	0x24000008

0800357c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	b089      	sub	sp, #36	; 0x24
 8003580:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003582:	4bb3      	ldr	r3, [pc, #716]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800358a:	2b18      	cmp	r3, #24
 800358c:	f200 8155 	bhi.w	800383a <HAL_RCC_GetSysClockFreq+0x2be>
 8003590:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003596:	bf00      	nop
 8003598:	080035fd 	.word	0x080035fd
 800359c:	0800383b 	.word	0x0800383b
 80035a0:	0800383b 	.word	0x0800383b
 80035a4:	0800383b 	.word	0x0800383b
 80035a8:	0800383b 	.word	0x0800383b
 80035ac:	0800383b 	.word	0x0800383b
 80035b0:	0800383b 	.word	0x0800383b
 80035b4:	0800383b 	.word	0x0800383b
 80035b8:	08003623 	.word	0x08003623
 80035bc:	0800383b 	.word	0x0800383b
 80035c0:	0800383b 	.word	0x0800383b
 80035c4:	0800383b 	.word	0x0800383b
 80035c8:	0800383b 	.word	0x0800383b
 80035cc:	0800383b 	.word	0x0800383b
 80035d0:	0800383b 	.word	0x0800383b
 80035d4:	0800383b 	.word	0x0800383b
 80035d8:	08003629 	.word	0x08003629
 80035dc:	0800383b 	.word	0x0800383b
 80035e0:	0800383b 	.word	0x0800383b
 80035e4:	0800383b 	.word	0x0800383b
 80035e8:	0800383b 	.word	0x0800383b
 80035ec:	0800383b 	.word	0x0800383b
 80035f0:	0800383b 	.word	0x0800383b
 80035f4:	0800383b 	.word	0x0800383b
 80035f8:	0800362f 	.word	0x0800362f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035fc:	4b94      	ldr	r3, [pc, #592]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d009      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003608:	4b91      	ldr	r3, [pc, #580]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	08db      	lsrs	r3, r3, #3
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	4a90      	ldr	r2, [pc, #576]	; (8003854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003614:	fa22 f303 	lsr.w	r3, r2, r3
 8003618:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800361a:	e111      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800361c:	4b8d      	ldr	r3, [pc, #564]	; (8003854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800361e:	61bb      	str	r3, [r7, #24]
      break;
 8003620:	e10e      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003622:	4b8d      	ldr	r3, [pc, #564]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003624:	61bb      	str	r3, [r7, #24]
      break;
 8003626:	e10b      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003628:	4b8c      	ldr	r3, [pc, #560]	; (800385c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800362a:	61bb      	str	r3, [r7, #24]
      break;
 800362c:	e108      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800362e:	4b88      	ldr	r3, [pc, #544]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003638:	4b85      	ldr	r3, [pc, #532]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003642:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003644:	4b82      	ldr	r3, [pc, #520]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800364e:	4b80      	ldr	r3, [pc, #512]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003652:	08db      	lsrs	r3, r3, #3
 8003654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003666:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80e1 	beq.w	8003834 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b02      	cmp	r3, #2
 8003676:	f000 8083 	beq.w	8003780 <HAL_RCC_GetSysClockFreq+0x204>
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b02      	cmp	r3, #2
 800367e:	f200 80a1 	bhi.w	80037c4 <HAL_RCC_GetSysClockFreq+0x248>
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_RCC_GetSysClockFreq+0x114>
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d056      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x1c0>
 800368e:	e099      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003690:	4b6f      	ldr	r3, [pc, #444]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d02d      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800369c:	4b6c      	ldr	r3, [pc, #432]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	08db      	lsrs	r3, r3, #3
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	4a6b      	ldr	r2, [pc, #428]	; (8003854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
 80036ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	ee07 3a90 	vmov	s15, r3
 80036b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036c6:	4b62      	ldr	r3, [pc, #392]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80036f6:	e087      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003702:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003864 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370a:	4b51      	ldr	r3, [pc, #324]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800371a:	ed97 6a02 	vldr	s12, [r7, #8]
 800371e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800372a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800372e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003736:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800373a:	e065      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003746:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003868 <HAL_RCC_GetSysClockFreq+0x2ec>
 800374a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374e:	4b40      	ldr	r3, [pc, #256]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800375e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003762:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800376a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800376e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800377e:	e043      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800386c <HAL_RCC_GetSysClockFreq+0x2f0>
 800378e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003792:	4b2f      	ldr	r3, [pc, #188]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379a:	ee07 3a90 	vmov	s15, r3
 800379e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037c2:	e021      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003868 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d6:	4b1e      	ldr	r3, [pc, #120]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003802:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003806:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	0a5b      	lsrs	r3, r3, #9
 800380e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003812:	3301      	adds	r3, #1
 8003814:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	ee07 3a90 	vmov	s15, r3
 800381c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003820:	edd7 6a07 	vldr	s13, [r7, #28]
 8003824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800382c:	ee17 3a90 	vmov	r3, s15
 8003830:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003832:	e005      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	61bb      	str	r3, [r7, #24]
      break;
 8003838:	e002      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800383c:	61bb      	str	r3, [r7, #24]
      break;
 800383e:	bf00      	nop
  }

  return sysclockfreq;
 8003840:	69bb      	ldr	r3, [r7, #24]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3724      	adds	r7, #36	; 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	58024400 	.word	0x58024400
 8003854:	03d09000 	.word	0x03d09000
 8003858:	003d0900 	.word	0x003d0900
 800385c:	007a1200 	.word	0x007a1200
 8003860:	46000000 	.word	0x46000000
 8003864:	4c742400 	.word	0x4c742400
 8003868:	4a742400 	.word	0x4a742400
 800386c:	4af42400 	.word	0x4af42400

08003870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003876:	f7ff fe81 	bl	800357c <HAL_RCC_GetSysClockFreq>
 800387a:	4602      	mov	r2, r0
 800387c:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	0a1b      	lsrs	r3, r3, #8
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	490f      	ldr	r1, [pc, #60]	; (80038c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003888:	5ccb      	ldrb	r3, [r1, r3]
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	fa22 f303 	lsr.w	r3, r2, r3
 8003892:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003894:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800389e:	5cd3      	ldrb	r3, [r2, r3]
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	fa22 f303 	lsr.w	r3, r2, r3
 80038aa:	4a07      	ldr	r2, [pc, #28]	; (80038c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80038ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038ae:	4a07      	ldr	r2, [pc, #28]	; (80038cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	58024400 	.word	0x58024400
 80038c4:	08007014 	.word	0x08007014
 80038c8:	24000004 	.word	0x24000004
 80038cc:	24000000 	.word	0x24000000

080038d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80038d4:	f7ff ffcc 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	091b      	lsrs	r3, r3, #4
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4904      	ldr	r1, [pc, #16]	; (80038f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	58024400 	.word	0x58024400
 80038f8:	08007014 	.word	0x08007014

080038fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003900:	f7ff ffb6 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4904      	ldr	r1, [pc, #16]	; (8003924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	58024400 	.word	0x58024400
 8003924:	08007014 	.word	0x08007014

08003928 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800392c:	b0ca      	sub	sp, #296	; 0x128
 800392e:	af00      	add	r7, sp, #0
 8003930:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003934:	2300      	movs	r3, #0
 8003936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800393a:	2300      	movs	r3, #0
 800393c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800394c:	2500      	movs	r5, #0
 800394e:	ea54 0305 	orrs.w	r3, r4, r5
 8003952:	d049      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800395a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800395e:	d02f      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003960:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003964:	d828      	bhi.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800396a:	d01a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800396c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003970:	d822      	bhi.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800397a:	d007      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800397c:	e01c      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800397e:	4bb8      	ldr	r3, [pc, #736]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	4ab7      	ldr	r2, [pc, #732]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003988:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800398a:	e01a      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003990:	3308      	adds	r3, #8
 8003992:	2102      	movs	r1, #2
 8003994:	4618      	mov	r0, r3
 8003996:	f001 fc8f 	bl	80052b8 <RCCEx_PLL2_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039a0:	e00f      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a6:	3328      	adds	r3, #40	; 0x28
 80039a8:	2102      	movs	r1, #2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f001 fd36 	bl	800541c <RCCEx_PLL3_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039b6:	e004      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039be:	e000      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80039c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039ca:	4ba5      	ldr	r3, [pc, #660]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80039d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039d8:	4aa1      	ldr	r2, [pc, #644]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039da:	430b      	orrs	r3, r1
 80039dc:	6513      	str	r3, [r2, #80]	; 0x50
 80039de:	e003      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80039f4:	f04f 0900 	mov.w	r9, #0
 80039f8:	ea58 0309 	orrs.w	r3, r8, r9
 80039fc:	d047      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d82a      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a25 	.word	0x08003a25
 8003a14:	08003a33 	.word	0x08003a33
 8003a18:	08003a49 	.word	0x08003a49
 8003a1c:	08003a67 	.word	0x08003a67
 8003a20:	08003a67 	.word	0x08003a67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a24:	4b8e      	ldr	r3, [pc, #568]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	4a8d      	ldr	r2, [pc, #564]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a30:	e01a      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a36:	3308      	adds	r3, #8
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 fc3c 	bl	80052b8 <RCCEx_PLL2_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a46:	e00f      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4c:	3328      	adds	r3, #40	; 0x28
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f001 fce3 	bl	800541c <RCCEx_PLL3_Config>
 8003a56:	4603      	mov	r3, r0
 8003a58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a5c:	e004      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a64:	e000      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a70:	4b7b      	ldr	r3, [pc, #492]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a74:	f023 0107 	bic.w	r1, r3, #7
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	4a78      	ldr	r2, [pc, #480]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6513      	str	r3, [r2, #80]	; 0x50
 8003a84:	e003      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a96:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003a9a:	f04f 0b00 	mov.w	fp, #0
 8003a9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003aa2:	d04c      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aae:	d030      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab4:	d829      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ab6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ab8:	d02d      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003aba:	2bc0      	cmp	r3, #192	; 0xc0
 8003abc:	d825      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003abe:	2b80      	cmp	r3, #128	; 0x80
 8003ac0:	d018      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ac2:	2b80      	cmp	r3, #128	; 0x80
 8003ac4:	d821      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d007      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003ace:	e01c      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad0:	4b63      	ldr	r3, [pc, #396]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	4a62      	ldr	r2, [pc, #392]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003adc:	e01c      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 fbe6 	bl	80052b8 <RCCEx_PLL2_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003af2:	e011      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af8:	3328      	adds	r3, #40	; 0x28
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 fc8d 	bl	800541c <RCCEx_PLL3_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b08:	e006      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b10:	e002      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b20:	4b4f      	ldr	r3, [pc, #316]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b24:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2e:	4a4c      	ldr	r2, [pc, #304]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6513      	str	r3, [r2, #80]	; 0x50
 8003b34:	e003      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003b4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003b54:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	d053      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b6a:	d035      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003b6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b70:	d82e      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b76:	d031      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003b78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b7c:	d828      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b82:	d01a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b88:	d822      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003b8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b92:	d007      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003b94:	e01c      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b96:	4b32      	ldr	r3, [pc, #200]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	4a31      	ldr	r2, [pc, #196]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ba2:	e01c      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba8:	3308      	adds	r3, #8
 8003baa:	2100      	movs	r1, #0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 fb83 	bl	80052b8 <RCCEx_PLL2_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003bb8:	e011      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bbe:	3328      	adds	r3, #40	; 0x28
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 fc2a 	bl	800541c <RCCEx_PLL3_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bce:	e006      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bd6:	e002      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003bd8:	bf00      	nop
 8003bda:	e000      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10b      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003be6:	4b1e      	ldr	r3, [pc, #120]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bea:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bf6:	4a1a      	ldr	r2, [pc, #104]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003bfc:	e003      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003c12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c16:	2300      	movs	r3, #0
 8003c18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c1c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003c20:	460b      	mov	r3, r1
 8003c22:	4313      	orrs	r3, r2
 8003c24:	d056      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c32:	d038      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c38:	d831      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c3e:	d034      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003c40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c44:	d82b      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c4a:	d01d      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003c4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c50:	d825      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d006      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003c56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c5c:	e01f      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c5e:	bf00      	nop
 8003c60:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c64:	4ba2      	ldr	r3, [pc, #648]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	4aa1      	ldr	r2, [pc, #644]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c70:	e01c      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c76:	3308      	adds	r3, #8
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 fb1c 	bl	80052b8 <RCCEx_PLL2_Config>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c86:	e011      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c8c:	3328      	adds	r3, #40	; 0x28
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f001 fbc3 	bl	800541c <RCCEx_PLL3_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c9c:	e006      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ca4:	e002      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003ca6:	bf00      	nop
 8003ca8:	e000      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003cb4:	4b8e      	ldr	r3, [pc, #568]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cc4:	4a8a      	ldr	r2, [pc, #552]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	6593      	str	r3, [r2, #88]	; 0x58
 8003cca:	e003      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003cea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	d03a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfa:	2b30      	cmp	r3, #48	; 0x30
 8003cfc:	d01f      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003cfe:	2b30      	cmp	r3, #48	; 0x30
 8003d00:	d819      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d00c      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d815      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d019      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d111      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d12:	4b77      	ldr	r3, [pc, #476]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	4a76      	ldr	r2, [pc, #472]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d1e:	e011      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d24:	3308      	adds	r3, #8
 8003d26:	2102      	movs	r1, #2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 fac5 	bl	80052b8 <RCCEx_PLL2_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d34:	e006      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d3c:	e002      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d3e:	bf00      	nop
 8003d40:	e000      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d4c:	4b68      	ldr	r3, [pc, #416]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d50:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5a:	4a65      	ldr	r2, [pc, #404]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d60:	e003      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003d76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d80:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4313      	orrs	r3, r2
 8003d88:	d051      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d94:	d035      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d9a:	d82e      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003da0:	d031      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003da2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003da6:	d828      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dac:	d01a      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db2:	d822      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbc:	d007      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003dbe:	e01c      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc0:	4b4b      	ldr	r3, [pc, #300]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	4a4a      	ldr	r2, [pc, #296]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dcc:	e01c      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 fa6e 	bl	80052b8 <RCCEx_PLL2_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003de2:	e011      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de8:	3328      	adds	r3, #40	; 0x28
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 fb15 	bl	800541c <RCCEx_PLL3_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003df8:	e006      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e00:	e002      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e02:	bf00      	nop
 8003e04:	e000      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e10:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e14:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1e:	4a34      	ldr	r2, [pc, #208]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6513      	str	r3, [r2, #80]	; 0x50
 8003e24:	e003      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003e3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	d056      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e58:	d033      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003e5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e5e:	d82c      	bhi.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e64:	d02f      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003e66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e6a:	d826      	bhi.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e70:	d02b      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003e72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e76:	d820      	bhi.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e7c:	d012      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003e7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e82:	d81a      	bhi.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d022      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8c:	d115      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e92:	3308      	adds	r3, #8
 8003e94:	2101      	movs	r1, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 fa0e 	bl	80052b8 <RCCEx_PLL2_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ea2:	e015      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea8:	3328      	adds	r3, #40	; 0x28
 8003eaa:	2101      	movs	r1, #1
 8003eac:	4618      	mov	r0, r3
 8003eae:	f001 fab5 	bl	800541c <RCCEx_PLL3_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003eb8:	e00a      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ec0:	e006      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ec2:	bf00      	nop
 8003ec4:	e004      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ec6:	bf00      	nop
 8003ec8:	e002      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003eca:	bf00      	nop
 8003ecc:	e000      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10d      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003edc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee6:	4a02      	ldr	r2, [pc, #8]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	6513      	str	r3, [r2, #80]	; 0x50
 8003eec:	e006      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003eee:	bf00      	nop
 8003ef0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ef8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f04:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f12:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	d055      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f28:	d033      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f2e:	d82c      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f34:	d02f      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3a:	d826      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f40:	d02b      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003f42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f46:	d820      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f4c:	d012      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f52:	d81a      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d022      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f5c:	d115      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f62:	3308      	adds	r3, #8
 8003f64:	2101      	movs	r1, #1
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 f9a6 	bl	80052b8 <RCCEx_PLL2_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f72:	e015      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f78:	3328      	adds	r3, #40	; 0x28
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 fa4d 	bl	800541c <RCCEx_PLL3_Config>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f88:	e00a      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f90:	e006      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f92:	bf00      	nop
 8003f94:	e004      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f96:	bf00      	nop
 8003f98:	e002      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f9a:	bf00      	nop
 8003f9c:	e000      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003fa8:	4ba3      	ldr	r3, [pc, #652]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fac:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fb8:	4a9f      	ldr	r2, [pc, #636]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8003fbe:	e003      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003fde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	d037      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff2:	d00e      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff8:	d816      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d018      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003ffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004002:	d111      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004004:	4b8c      	ldr	r3, [pc, #560]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	4a8b      	ldr	r2, [pc, #556]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800400a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004010:	e00f      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004016:	3308      	adds	r3, #8
 8004018:	2101      	movs	r1, #1
 800401a:	4618      	mov	r0, r3
 800401c:	f001 f94c 	bl	80052b8 <RCCEx_PLL2_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004026:	e004      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800402e:	e000      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004032:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800403a:	4b7f      	ldr	r3, [pc, #508]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800403c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	4a7b      	ldr	r2, [pc, #492]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800404a:	430b      	orrs	r3, r1
 800404c:	6513      	str	r3, [r2, #80]	; 0x50
 800404e:	e003      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004050:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004054:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800406e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004072:	460b      	mov	r3, r1
 8004074:	4313      	orrs	r3, r2
 8004076:	d039      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800407c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407e:	2b03      	cmp	r3, #3
 8004080:	d81c      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004082:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	080040c5 	.word	0x080040c5
 800408c:	08004099 	.word	0x08004099
 8004090:	080040a7 	.word	0x080040a7
 8004094:	080040c5 	.word	0x080040c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004098:	4b67      	ldr	r3, [pc, #412]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	4a66      	ldr	r2, [pc, #408]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800409e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040a4:	e00f      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040aa:	3308      	adds	r3, #8
 80040ac:	2102      	movs	r1, #2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 f902 	bl	80052b8 <RCCEx_PLL2_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040ba:	e004      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040c2:	e000      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80040c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80040ce:	4b5a      	ldr	r3, [pc, #360]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d2:	f023 0103 	bic.w	r1, r3, #3
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040dc:	4a56      	ldr	r2, [pc, #344]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040de:	430b      	orrs	r3, r1
 80040e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040e2:	e003      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80040f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004102:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004106:	460b      	mov	r3, r1
 8004108:	4313      	orrs	r3, r2
 800410a:	f000 809f 	beq.w	800424c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800410e:	4b4b      	ldr	r3, [pc, #300]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a4a      	ldr	r2, [pc, #296]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004118:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800411a:	f7fd fb03 	bl	8001724 <HAL_GetTick>
 800411e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004122:	e00b      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004124:	f7fd fafe 	bl	8001724 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b64      	cmp	r3, #100	; 0x64
 8004132:	d903      	bls.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800413a:	e005      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800413c:	4b3f      	ldr	r3, [pc, #252]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0ed      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800414c:	2b00      	cmp	r3, #0
 800414e:	d179      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004150:	4b39      	ldr	r3, [pc, #228]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004152:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004158:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800415c:	4053      	eors	r3, r2
 800415e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004162:	2b00      	cmp	r3, #0
 8004164:	d015      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004166:	4b34      	ldr	r3, [pc, #208]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004172:	4b31      	ldr	r3, [pc, #196]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004176:	4a30      	ldr	r2, [pc, #192]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800417e:	4b2e      	ldr	r3, [pc, #184]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	4a2d      	ldr	r2, [pc, #180]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004188:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800418a:	4a2b      	ldr	r2, [pc, #172]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800418c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004190:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004196:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800419a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800419e:	d118      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7fd fac0 	bl	8001724 <HAL_GetTick>
 80041a4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041a8:	e00d      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041aa:	f7fd fabb 	bl	8001724 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041b4:	1ad2      	subs	r2, r2, r3
 80041b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d903      	bls.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80041c4:	e005      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041c6:	4b1c      	ldr	r3, [pc, #112]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0eb      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80041d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d129      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ea:	d10e      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80041ec:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80041f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041fc:	091a      	lsrs	r2, r3, #4
 80041fe:	4b10      	ldr	r3, [pc, #64]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004200:	4013      	ands	r3, r2
 8004202:	4a0d      	ldr	r2, [pc, #52]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004204:	430b      	orrs	r3, r1
 8004206:	6113      	str	r3, [r2, #16]
 8004208:	e005      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800420a:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004210:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004214:	6113      	str	r3, [r2, #16]
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004218:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004226:	4a04      	ldr	r2, [pc, #16]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004228:	430b      	orrs	r3, r1
 800422a:	6713      	str	r3, [r2, #112]	; 0x70
 800422c:	e00e      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800422e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004232:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004236:	e009      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004238:	58024400 	.word	0x58024400
 800423c:	58024800 	.word	0x58024800
 8004240:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004244:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004248:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800424c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	f002 0301 	and.w	r3, r2, #1
 8004258:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800425c:	2300      	movs	r3, #0
 800425e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004262:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004266:	460b      	mov	r3, r1
 8004268:	4313      	orrs	r3, r2
 800426a:	f000 8089 	beq.w	8004380 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800426e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004274:	2b28      	cmp	r3, #40	; 0x28
 8004276:	d86b      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004278:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	08004359 	.word	0x08004359
 8004284:	08004351 	.word	0x08004351
 8004288:	08004351 	.word	0x08004351
 800428c:	08004351 	.word	0x08004351
 8004290:	08004351 	.word	0x08004351
 8004294:	08004351 	.word	0x08004351
 8004298:	08004351 	.word	0x08004351
 800429c:	08004351 	.word	0x08004351
 80042a0:	08004325 	.word	0x08004325
 80042a4:	08004351 	.word	0x08004351
 80042a8:	08004351 	.word	0x08004351
 80042ac:	08004351 	.word	0x08004351
 80042b0:	08004351 	.word	0x08004351
 80042b4:	08004351 	.word	0x08004351
 80042b8:	08004351 	.word	0x08004351
 80042bc:	08004351 	.word	0x08004351
 80042c0:	0800433b 	.word	0x0800433b
 80042c4:	08004351 	.word	0x08004351
 80042c8:	08004351 	.word	0x08004351
 80042cc:	08004351 	.word	0x08004351
 80042d0:	08004351 	.word	0x08004351
 80042d4:	08004351 	.word	0x08004351
 80042d8:	08004351 	.word	0x08004351
 80042dc:	08004351 	.word	0x08004351
 80042e0:	08004359 	.word	0x08004359
 80042e4:	08004351 	.word	0x08004351
 80042e8:	08004351 	.word	0x08004351
 80042ec:	08004351 	.word	0x08004351
 80042f0:	08004351 	.word	0x08004351
 80042f4:	08004351 	.word	0x08004351
 80042f8:	08004351 	.word	0x08004351
 80042fc:	08004351 	.word	0x08004351
 8004300:	08004359 	.word	0x08004359
 8004304:	08004351 	.word	0x08004351
 8004308:	08004351 	.word	0x08004351
 800430c:	08004351 	.word	0x08004351
 8004310:	08004351 	.word	0x08004351
 8004314:	08004351 	.word	0x08004351
 8004318:	08004351 	.word	0x08004351
 800431c:	08004351 	.word	0x08004351
 8004320:	08004359 	.word	0x08004359
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004328:	3308      	adds	r3, #8
 800432a:	2101      	movs	r1, #1
 800432c:	4618      	mov	r0, r3
 800432e:	f000 ffc3 	bl	80052b8 <RCCEx_PLL2_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004338:	e00f      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800433a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800433e:	3328      	adds	r3, #40	; 0x28
 8004340:	2101      	movs	r1, #1
 8004342:	4618      	mov	r0, r3
 8004344:	f001 f86a 	bl	800541c <RCCEx_PLL3_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800434e:	e004      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004356:	e000      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800435a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004362:	4bbf      	ldr	r3, [pc, #764]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800436a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004370:	4abb      	ldr	r2, [pc, #748]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004372:	430b      	orrs	r3, r1
 8004374:	6553      	str	r3, [r2, #84]	; 0x54
 8004376:	e003      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800437c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f002 0302 	and.w	r3, r2, #2
 800438c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004390:	2300      	movs	r3, #0
 8004392:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004396:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800439a:	460b      	mov	r3, r1
 800439c:	4313      	orrs	r3, r2
 800439e:	d041      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a6:	2b05      	cmp	r3, #5
 80043a8:	d824      	bhi.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80043aa:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	080043fd 	.word	0x080043fd
 80043b4:	080043c9 	.word	0x080043c9
 80043b8:	080043df 	.word	0x080043df
 80043bc:	080043fd 	.word	0x080043fd
 80043c0:	080043fd 	.word	0x080043fd
 80043c4:	080043fd 	.word	0x080043fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043cc:	3308      	adds	r3, #8
 80043ce:	2101      	movs	r1, #1
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 ff71 	bl	80052b8 <RCCEx_PLL2_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80043dc:	e00f      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e2:	3328      	adds	r3, #40	; 0x28
 80043e4:	2101      	movs	r1, #1
 80043e6:	4618      	mov	r0, r3
 80043e8:	f001 f818 	bl	800541c <RCCEx_PLL3_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80043f2:	e004      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043fa:	e000      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80043fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004406:	4b96      	ldr	r3, [pc, #600]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	f023 0107 	bic.w	r1, r3, #7
 800440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004414:	4a92      	ldr	r2, [pc, #584]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004416:	430b      	orrs	r3, r1
 8004418:	6553      	str	r3, [r2, #84]	; 0x54
 800441a:	e003      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004420:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f002 0304 	and.w	r3, r2, #4
 8004430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004434:	2300      	movs	r3, #0
 8004436:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800443a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800443e:	460b      	mov	r3, r1
 8004440:	4313      	orrs	r3, r2
 8004442:	d044      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800444c:	2b05      	cmp	r3, #5
 800444e:	d825      	bhi.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004450:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	080044a5 	.word	0x080044a5
 800445c:	08004471 	.word	0x08004471
 8004460:	08004487 	.word	0x08004487
 8004464:	080044a5 	.word	0x080044a5
 8004468:	080044a5 	.word	0x080044a5
 800446c:	080044a5 	.word	0x080044a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004474:	3308      	adds	r3, #8
 8004476:	2101      	movs	r1, #1
 8004478:	4618      	mov	r0, r3
 800447a:	f000 ff1d 	bl	80052b8 <RCCEx_PLL2_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004484:	e00f      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800448a:	3328      	adds	r3, #40	; 0x28
 800448c:	2101      	movs	r1, #1
 800448e:	4618      	mov	r0, r3
 8004490:	f000 ffc4 	bl	800541c <RCCEx_PLL3_Config>
 8004494:	4603      	mov	r3, r0
 8004496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800449a:	e004      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044a2:	e000      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80044a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10b      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044ae:	4b6c      	ldr	r3, [pc, #432]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b2:	f023 0107 	bic.w	r1, r3, #7
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044be:	4a68      	ldr	r2, [pc, #416]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6593      	str	r3, [r2, #88]	; 0x58
 80044c4:	e003      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f002 0320 	and.w	r3, r2, #32
 80044da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044de:	2300      	movs	r3, #0
 80044e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044e8:	460b      	mov	r3, r1
 80044ea:	4313      	orrs	r3, r2
 80044ec:	d055      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80044ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044fa:	d033      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80044fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004500:	d82c      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004506:	d02f      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450c:	d826      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800450e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004512:	d02b      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004514:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004518:	d820      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800451a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800451e:	d012      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004524:	d81a      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d022      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800452a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800452e:	d115      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004534:	3308      	adds	r3, #8
 8004536:	2100      	movs	r1, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f000 febd 	bl	80052b8 <RCCEx_PLL2_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004544:	e015      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800454a:	3328      	adds	r3, #40	; 0x28
 800454c:	2102      	movs	r1, #2
 800454e:	4618      	mov	r0, r3
 8004550:	f000 ff64 	bl	800541c <RCCEx_PLL3_Config>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800455a:	e00a      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004562:	e006      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004564:	bf00      	nop
 8004566:	e004      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004568:	bf00      	nop
 800456a:	e002      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800456c:	bf00      	nop
 800456e:	e000      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10b      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800457a:	4b39      	ldr	r3, [pc, #228]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800457c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	4a35      	ldr	r2, [pc, #212]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800458c:	430b      	orrs	r3, r1
 800458e:	6553      	str	r3, [r2, #84]	; 0x54
 8004590:	e003      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004596:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80045a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045aa:	2300      	movs	r3, #0
 80045ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80045b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4313      	orrs	r3, r2
 80045b8:	d058      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045c6:	d033      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80045c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045cc:	d82c      	bhi.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d2:	d02f      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80045d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d8:	d826      	bhi.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045de:	d02b      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80045e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045e4:	d820      	bhi.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ea:	d012      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80045ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f0:	d81a      	bhi.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d022      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80045f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fa:	d115      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004600:	3308      	adds	r3, #8
 8004602:	2100      	movs	r1, #0
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fe57 	bl	80052b8 <RCCEx_PLL2_Config>
 800460a:	4603      	mov	r3, r0
 800460c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004610:	e015      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004616:	3328      	adds	r3, #40	; 0x28
 8004618:	2102      	movs	r1, #2
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fefe 	bl	800541c <RCCEx_PLL3_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004626:	e00a      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800462e:	e006      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004630:	bf00      	nop
 8004632:	e004      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004634:	bf00      	nop
 8004636:	e002      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004638:	bf00      	nop
 800463a:	e000      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800463c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800463e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10e      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004656:	4a02      	ldr	r2, [pc, #8]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004658:	430b      	orrs	r3, r1
 800465a:	6593      	str	r3, [r2, #88]	; 0x58
 800465c:	e006      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800465e:	bf00      	nop
 8004660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004668:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800467c:	2300      	movs	r3, #0
 800467e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004682:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004686:	460b      	mov	r3, r1
 8004688:	4313      	orrs	r3, r2
 800468a:	d055      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800468c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004690:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004694:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004698:	d033      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800469a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800469e:	d82c      	bhi.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a4:	d02f      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80046a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046aa:	d826      	bhi.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046b0:	d02b      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80046b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046b6:	d820      	bhi.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046bc:	d012      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80046be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c2:	d81a      	bhi.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d022      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80046c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046cc:	d115      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d2:	3308      	adds	r3, #8
 80046d4:	2100      	movs	r1, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fdee 	bl	80052b8 <RCCEx_PLL2_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80046e2:	e015      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e8:	3328      	adds	r3, #40	; 0x28
 80046ea:	2102      	movs	r1, #2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fe95 	bl	800541c <RCCEx_PLL3_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80046f8:	e00a      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004700:	e006      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004702:	bf00      	nop
 8004704:	e004      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004706:	bf00      	nop
 8004708:	e002      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800470a:	bf00      	nop
 800470c:	e000      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800470e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004710:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004718:	4ba1      	ldr	r3, [pc, #644]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800471a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004724:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004728:	4a9d      	ldr	r2, [pc, #628]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800472a:	430b      	orrs	r3, r1
 800472c:	6593      	str	r3, [r2, #88]	; 0x58
 800472e:	e003      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004734:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004740:	f002 0308 	and.w	r3, r2, #8
 8004744:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004748:	2300      	movs	r3, #0
 800474a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800474e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004752:	460b      	mov	r3, r1
 8004754:	4313      	orrs	r3, r2
 8004756:	d01e      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004764:	d10c      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476a:	3328      	adds	r3, #40	; 0x28
 800476c:	2102      	movs	r1, #2
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fe54 	bl	800541c <RCCEx_PLL3_Config>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004780:	4b87      	ldr	r3, [pc, #540]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004790:	4a83      	ldr	r2, [pc, #524]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004792:	430b      	orrs	r3, r1
 8004794:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f002 0310 	and.w	r3, r2, #16
 80047a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047a6:	2300      	movs	r3, #0
 80047a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80047b0:	460b      	mov	r3, r1
 80047b2:	4313      	orrs	r3, r2
 80047b4:	d01e      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c2:	d10c      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c8:	3328      	adds	r3, #40	; 0x28
 80047ca:	2102      	movs	r1, #2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fe25 	bl	800541c <RCCEx_PLL3_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047de:	4b70      	ldr	r3, [pc, #448]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ee:	4a6c      	ldr	r2, [pc, #432]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047f0:	430b      	orrs	r3, r1
 80047f2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004800:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004804:	2300      	movs	r3, #0
 8004806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800480a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800480e:	460b      	mov	r3, r1
 8004810:	4313      	orrs	r3, r2
 8004812:	d03e      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004818:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800481c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004820:	d022      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004826:	d81b      	bhi.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800482c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004830:	d00b      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004832:	e015      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004838:	3308      	adds	r3, #8
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fd3b 	bl	80052b8 <RCCEx_PLL2_Config>
 8004842:	4603      	mov	r3, r0
 8004844:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004848:	e00f      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800484e:	3328      	adds	r3, #40	; 0x28
 8004850:	2102      	movs	r1, #2
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fde2 	bl	800541c <RCCEx_PLL3_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800485e:	e004      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004866:	e000      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800486a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10b      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004872:	4b4b      	ldr	r3, [pc, #300]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004876:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004882:	4a47      	ldr	r2, [pc, #284]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004884:	430b      	orrs	r3, r1
 8004886:	6593      	str	r3, [r2, #88]	; 0x58
 8004888:	e003      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800488e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800489e:	67bb      	str	r3, [r7, #120]	; 0x78
 80048a0:	2300      	movs	r3, #0
 80048a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80048a8:	460b      	mov	r3, r1
 80048aa:	4313      	orrs	r3, r2
 80048ac:	d03b      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80048ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048ba:	d01f      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80048bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048c0:	d818      	bhi.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80048c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c6:	d003      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80048c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048cc:	d007      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80048ce:	e011      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d0:	4b33      	ldr	r3, [pc, #204]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	4a32      	ldr	r2, [pc, #200]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80048dc:	e00f      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e2:	3328      	adds	r3, #40	; 0x28
 80048e4:	2101      	movs	r1, #1
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fd98 	bl	800541c <RCCEx_PLL3_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80048f2:	e004      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048fa:	e000      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80048fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10b      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004906:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	4a22      	ldr	r2, [pc, #136]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004918:	430b      	orrs	r3, r1
 800491a:	6553      	str	r3, [r2, #84]	; 0x54
 800491c:	e003      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004922:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800492a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004932:	673b      	str	r3, [r7, #112]	; 0x70
 8004934:	2300      	movs	r3, #0
 8004936:	677b      	str	r3, [r7, #116]	; 0x74
 8004938:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800493c:	460b      	mov	r3, r1
 800493e:	4313      	orrs	r3, r2
 8004940:	d034      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800494c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004950:	d007      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004952:	e011      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004954:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	4a11      	ldr	r2, [pc, #68]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800495a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800495e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004960:	e00e      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004966:	3308      	adds	r3, #8
 8004968:	2102      	movs	r1, #2
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fca4 	bl	80052b8 <RCCEx_PLL2_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004976:	e003      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800497e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004980:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10d      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800498a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004996:	4a02      	ldr	r2, [pc, #8]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004998:	430b      	orrs	r3, r1
 800499a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800499c:	e006      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800499e:	bf00      	nop
 80049a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80049b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80049ba:	2300      	movs	r3, #0
 80049bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80049c2:	460b      	mov	r3, r1
 80049c4:	4313      	orrs	r3, r2
 80049c6:	d00c      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049cc:	3328      	adds	r3, #40	; 0x28
 80049ce:	2102      	movs	r1, #2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fd23 	bl	800541c <RCCEx_PLL3_Config>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80049ee:	663b      	str	r3, [r7, #96]	; 0x60
 80049f0:	2300      	movs	r3, #0
 80049f2:	667b      	str	r3, [r7, #100]	; 0x64
 80049f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80049f8:	460b      	mov	r3, r1
 80049fa:	4313      	orrs	r3, r2
 80049fc:	d038      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80049fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a0a:	d018      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a10:	d811      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a16:	d014      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a1c:	d80b      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d011      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a26:	d106      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a28:	4bc3      	ldr	r3, [pc, #780]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	4ac2      	ldr	r2, [pc, #776]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a34:	e008      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a3c:	e004      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a3e:	bf00      	nop
 8004a40:	e002      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a42:	bf00      	nop
 8004a44:	e000      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10b      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a50:	4bb9      	ldr	r3, [pc, #740]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a54:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a60:	4ab5      	ldr	r2, [pc, #724]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a62:	430b      	orrs	r3, r1
 8004a64:	6553      	str	r3, [r2, #84]	; 0x54
 8004a66:	e003      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004a7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a7e:	2300      	movs	r3, #0
 8004a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a82:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004a86:	460b      	mov	r3, r1
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a8c:	4baa      	ldr	r3, [pc, #680]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9a:	4aa7      	ldr	r2, [pc, #668]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004aac:	653b      	str	r3, [r7, #80]	; 0x50
 8004aae:	2300      	movs	r3, #0
 8004ab0:	657b      	str	r3, [r7, #84]	; 0x54
 8004ab2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004abc:	4b9e      	ldr	r3, [pc, #632]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004acc:	4a9a      	ldr	r2, [pc, #616]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4313      	orrs	r3, r2
 8004aec:	d009      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004aee:	4b92      	ldr	r3, [pc, #584]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004afc:	4a8e      	ldr	r2, [pc, #568]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004afe:	430b      	orrs	r3, r1
 8004b00:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004b0e:	643b      	str	r3, [r7, #64]	; 0x40
 8004b10:	2300      	movs	r3, #0
 8004b12:	647b      	str	r3, [r7, #68]	; 0x44
 8004b14:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	d00e      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b1e:	4b86      	ldr	r3, [pc, #536]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	4a85      	ldr	r2, [pc, #532]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b28:	6113      	str	r3, [r2, #16]
 8004b2a:	4b83      	ldr	r3, [pc, #524]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b2c:	6919      	ldr	r1, [r3, #16]
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004b36:	4a80      	ldr	r2, [pc, #512]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004b48:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b4e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004b52:	460b      	mov	r3, r1
 8004b54:	4313      	orrs	r3, r2
 8004b56:	d009      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b58:	4b77      	ldr	r3, [pc, #476]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b66:	4a74      	ldr	r2, [pc, #464]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004b78:	633b      	str	r3, [r7, #48]	; 0x30
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b7e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004b82:	460b      	mov	r3, r1
 8004b84:	4313      	orrs	r3, r2
 8004b86:	d00a      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b88:	4b6b      	ldr	r3, [pc, #428]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b98:	4a67      	ldr	r2, [pc, #412]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bb0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	d011      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fb78 	bl	80052b8 <RCCEx_PLL2_Config>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004bce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	2100      	movs	r1, #0
 8004be8:	6239      	str	r1, [r7, #32]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	d011      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bfe:	3308      	adds	r3, #8
 8004c00:	2101      	movs	r1, #1
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fb58 	bl	80052b8 <RCCEx_PLL2_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c26:	2100      	movs	r1, #0
 8004c28:	61b9      	str	r1, [r7, #24]
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c34:	460b      	mov	r3, r1
 8004c36:	4313      	orrs	r3, r2
 8004c38:	d011      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c3e:	3308      	adds	r3, #8
 8004c40:	2102      	movs	r1, #2
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fb38 	bl	80052b8 <RCCEx_PLL2_Config>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c66:	2100      	movs	r1, #0
 8004c68:	6139      	str	r1, [r7, #16]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c74:	460b      	mov	r3, r1
 8004c76:	4313      	orrs	r3, r2
 8004c78:	d011      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c7e:	3328      	adds	r3, #40	; 0x28
 8004c80:	2100      	movs	r1, #0
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fbca 	bl	800541c <RCCEx_PLL3_Config>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	d011      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cbe:	3328      	adds	r3, #40	; 0x28
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fbaa 	bl	800541c <RCCEx_PLL3_Config>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	6039      	str	r1, [r7, #0]
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	607b      	str	r3, [r7, #4]
 8004cf0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	d011      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cfe:	3328      	adds	r3, #40	; 0x28
 8004d00:	2102      	movs	r1, #2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fb8a 	bl	800541c <RCCEx_PLL3_Config>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004d1e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	e000      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004d32:	46bd      	mov	sp, r7
 8004d34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d38:	58024400 	.word	0x58024400

08004d3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d40:	f7fe fd96 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 8004d44:	4602      	mov	r2, r0
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	091b      	lsrs	r3, r3, #4
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	4904      	ldr	r1, [pc, #16]	; (8004d64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d52:	5ccb      	ldrb	r3, [r1, r3]
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	58024400 	.word	0x58024400
 8004d64:	08007014 	.word	0x08007014

08004d68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b089      	sub	sp, #36	; 0x24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d70:	4ba1      	ldr	r3, [pc, #644]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d74:	f003 0303 	and.w	r3, r3, #3
 8004d78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004d7a:	4b9f      	ldr	r3, [pc, #636]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	0b1b      	lsrs	r3, r3, #12
 8004d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d86:	4b9c      	ldr	r3, [pc, #624]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	091b      	lsrs	r3, r3, #4
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004d92:	4b99      	ldr	r3, [pc, #612]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	08db      	lsrs	r3, r3, #3
 8004d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	fb02 f303 	mul.w	r3, r2, r3
 8004da2:	ee07 3a90 	vmov	s15, r3
 8004da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004daa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 8111 	beq.w	8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	f000 8083 	beq.w	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	f200 80a1 	bhi.w	8004f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d056      	beq.n	8004e80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004dd2:	e099      	b.n	8004f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dd4:	4b88      	ldr	r3, [pc, #544]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d02d      	beq.n	8004e3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004de0:	4b85      	ldr	r3, [pc, #532]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	08db      	lsrs	r3, r3, #3
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	4a84      	ldr	r2, [pc, #528]	; (8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004dec:	fa22 f303 	lsr.w	r3, r2, r3
 8004df0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	ee07 3a90 	vmov	s15, r3
 8004df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0a:	4b7b      	ldr	r3, [pc, #492]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e3a:	e087      	b.n	8004f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005004 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e4e:	4b6a      	ldr	r3, [pc, #424]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e7e:	e065      	b.n	8004f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e92:	4b59      	ldr	r3, [pc, #356]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ea6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ec2:	e043      	b.n	8004f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ece:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800500c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ed6:	4b48      	ldr	r3, [pc, #288]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f06:	e021      	b.n	8004f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f1a:	4b37      	ldr	r3, [pc, #220]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004f4c:	4b2a      	ldr	r3, [pc, #168]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	0a5b      	lsrs	r3, r3, #9
 8004f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f72:	ee17 2a90 	vmov	r2, s15
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004f7a:	4b1f      	ldr	r3, [pc, #124]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	0c1b      	lsrs	r3, r3, #16
 8004f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f84:	ee07 3a90 	vmov	s15, r3
 8004f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fa0:	ee17 2a90 	vmov	r2, s15
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004fa8:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	0e1b      	lsrs	r3, r3, #24
 8004fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fce:	ee17 2a90 	vmov	r2, s15
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fd6:	e008      	b.n	8004fea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	609a      	str	r2, [r3, #8]
}
 8004fea:	bf00      	nop
 8004fec:	3724      	adds	r7, #36	; 0x24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	58024400 	.word	0x58024400
 8004ffc:	03d09000 	.word	0x03d09000
 8005000:	46000000 	.word	0x46000000
 8005004:	4c742400 	.word	0x4c742400
 8005008:	4a742400 	.word	0x4a742400
 800500c:	4af42400 	.word	0x4af42400

08005010 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005010:	b480      	push	{r7}
 8005012:	b089      	sub	sp, #36	; 0x24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005018:	4ba1      	ldr	r3, [pc, #644]	; (80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005022:	4b9f      	ldr	r3, [pc, #636]	; (80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	0d1b      	lsrs	r3, r3, #20
 8005028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800502c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800502e:	4b9c      	ldr	r3, [pc, #624]	; (80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800503a:	4b99      	ldr	r3, [pc, #612]	; (80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	08db      	lsrs	r3, r3, #3
 8005040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	fb02 f303 	mul.w	r3, r2, r3
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005052:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8111 	beq.w	8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b02      	cmp	r3, #2
 8005062:	f000 8083 	beq.w	800516c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b02      	cmp	r3, #2
 800506a:	f200 80a1 	bhi.w	80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d056      	beq.n	8005128 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800507a:	e099      	b.n	80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800507c:	4b88      	ldr	r3, [pc, #544]	; (80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b00      	cmp	r3, #0
 8005086:	d02d      	beq.n	80050e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005088:	4b85      	ldr	r3, [pc, #532]	; (80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	08db      	lsrs	r3, r3, #3
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	4a84      	ldr	r2, [pc, #528]	; (80052a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
 8005098:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	ee07 3a90 	vmov	s15, r3
 80050a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050b2:	4b7b      	ldr	r3, [pc, #492]	; (80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050e2:	e087      	b.n	80051f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80050f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050f6:	4b6a      	ldr	r3, [pc, #424]	; (80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005106:	ed97 6a03 	vldr	s12, [r7, #12]
 800510a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800510e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800511a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800511e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005126:	e065      	b.n	80051f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005132:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800513a:	4b59      	ldr	r3, [pc, #356]	; (80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800514a:	ed97 6a03 	vldr	s12, [r7, #12]
 800514e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800515a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800515e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800516a:	e043      	b.n	80051f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005176:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800517a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800517e:	4b48      	ldr	r3, [pc, #288]	; (80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005192:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800519a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800519e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ae:	e021      	b.n	80051f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051c2:	4b37      	ldr	r3, [pc, #220]	; (80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80051f4:	4b2a      	ldr	r3, [pc, #168]	; (80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	0a5b      	lsrs	r3, r3, #9
 80051fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800520a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800520e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800521a:	ee17 2a90 	vmov	r2, s15
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005222:	4b1f      	ldr	r3, [pc, #124]	; (80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	0c1b      	lsrs	r3, r3, #16
 8005228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522c:	ee07 3a90 	vmov	s15, r3
 8005230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005234:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005238:	ee37 7a87 	vadd.f32	s14, s15, s14
 800523c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005248:	ee17 2a90 	vmov	r2, s15
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005250:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	0e1b      	lsrs	r3, r3, #24
 8005256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005262:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005266:	ee37 7a87 	vadd.f32	s14, s15, s14
 800526a:	edd7 6a07 	vldr	s13, [r7, #28]
 800526e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005276:	ee17 2a90 	vmov	r2, s15
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800527e:	e008      	b.n	8005292 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	609a      	str	r2, [r3, #8]
}
 8005292:	bf00      	nop
 8005294:	3724      	adds	r7, #36	; 0x24
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	58024400 	.word	0x58024400
 80052a4:	03d09000 	.word	0x03d09000
 80052a8:	46000000 	.word	0x46000000
 80052ac:	4c742400 	.word	0x4c742400
 80052b0:	4a742400 	.word	0x4a742400
 80052b4:	4af42400 	.word	0x4af42400

080052b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052c6:	4b53      	ldr	r3, [pc, #332]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d101      	bne.n	80052d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e099      	b.n	800540a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80052d6:	4b4f      	ldr	r3, [pc, #316]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a4e      	ldr	r2, [pc, #312]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 80052dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e2:	f7fc fa1f 	bl	8001724 <HAL_GetTick>
 80052e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052e8:	e008      	b.n	80052fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052ea:	f7fc fa1b 	bl	8001724 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e086      	b.n	800540a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052fc:	4b45      	ldr	r3, [pc, #276]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f0      	bne.n	80052ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005308:	4b42      	ldr	r3, [pc, #264]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 800530a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	031b      	lsls	r3, r3, #12
 8005316:	493f      	ldr	r1, [pc, #252]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 8005318:	4313      	orrs	r3, r2
 800531a:	628b      	str	r3, [r1, #40]	; 0x28
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	3b01      	subs	r3, #1
 8005322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	3b01      	subs	r3, #1
 800532c:	025b      	lsls	r3, r3, #9
 800532e:	b29b      	uxth	r3, r3
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	3b01      	subs	r3, #1
 8005338:	041b      	lsls	r3, r3, #16
 800533a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	3b01      	subs	r3, #1
 8005346:	061b      	lsls	r3, r3, #24
 8005348:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800534c:	4931      	ldr	r1, [pc, #196]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 800534e:	4313      	orrs	r3, r2
 8005350:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005352:	4b30      	ldr	r3, [pc, #192]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	492d      	ldr	r1, [pc, #180]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 8005360:	4313      	orrs	r3, r2
 8005362:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005364:	4b2b      	ldr	r3, [pc, #172]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	f023 0220 	bic.w	r2, r3, #32
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	4928      	ldr	r1, [pc, #160]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 8005372:	4313      	orrs	r3, r2
 8005374:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005376:	4b27      	ldr	r3, [pc, #156]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	4a26      	ldr	r2, [pc, #152]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 800537c:	f023 0310 	bic.w	r3, r3, #16
 8005380:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005382:	4b24      	ldr	r3, [pc, #144]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 8005384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005386:	4b24      	ldr	r3, [pc, #144]	; (8005418 <RCCEx_PLL2_Config+0x160>)
 8005388:	4013      	ands	r3, r2
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	69d2      	ldr	r2, [r2, #28]
 800538e:	00d2      	lsls	r2, r2, #3
 8005390:	4920      	ldr	r1, [pc, #128]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 8005392:	4313      	orrs	r3, r2
 8005394:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005396:	4b1f      	ldr	r3, [pc, #124]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	4a1e      	ldr	r2, [pc, #120]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 800539c:	f043 0310 	orr.w	r3, r3, #16
 80053a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053a8:	4b1a      	ldr	r3, [pc, #104]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	4a19      	ldr	r2, [pc, #100]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 80053ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053b4:	e00f      	b.n	80053d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d106      	bne.n	80053ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80053bc:	4b15      	ldr	r3, [pc, #84]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	4a14      	ldr	r2, [pc, #80]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 80053c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053c8:	e005      	b.n	80053d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80053ca:	4b12      	ldr	r3, [pc, #72]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 80053cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ce:	4a11      	ldr	r2, [pc, #68]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 80053d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80053d6:	4b0f      	ldr	r3, [pc, #60]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a0e      	ldr	r2, [pc, #56]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 80053dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e2:	f7fc f99f 	bl	8001724 <HAL_GetTick>
 80053e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053e8:	e008      	b.n	80053fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053ea:	f7fc f99b 	bl	8001724 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e006      	b.n	800540a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <RCCEx_PLL2_Config+0x15c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005408:	7bfb      	ldrb	r3, [r7, #15]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	58024400 	.word	0x58024400
 8005418:	ffff0007 	.word	0xffff0007

0800541c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800542a:	4b53      	ldr	r3, [pc, #332]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 800542c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	2b03      	cmp	r3, #3
 8005434:	d101      	bne.n	800543a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e099      	b.n	800556e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800543a:	4b4f      	ldr	r3, [pc, #316]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a4e      	ldr	r2, [pc, #312]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 8005440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005446:	f7fc f96d 	bl	8001724 <HAL_GetTick>
 800544a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800544c:	e008      	b.n	8005460 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800544e:	f7fc f969 	bl	8001724 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e086      	b.n	800556e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005460:	4b45      	ldr	r3, [pc, #276]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f0      	bne.n	800544e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800546c:	4b42      	ldr	r3, [pc, #264]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	051b      	lsls	r3, r3, #20
 800547a:	493f      	ldr	r1, [pc, #252]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 800547c:	4313      	orrs	r3, r2
 800547e:	628b      	str	r3, [r1, #40]	; 0x28
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	3b01      	subs	r3, #1
 8005486:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	3b01      	subs	r3, #1
 8005490:	025b      	lsls	r3, r3, #9
 8005492:	b29b      	uxth	r3, r3
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	3b01      	subs	r3, #1
 800549c:	041b      	lsls	r3, r3, #16
 800549e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	061b      	lsls	r3, r3, #24
 80054ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054b0:	4931      	ldr	r1, [pc, #196]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054b6:	4b30      	ldr	r3, [pc, #192]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	492d      	ldr	r1, [pc, #180]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054c8:	4b2b      	ldr	r3, [pc, #172]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	4928      	ldr	r1, [pc, #160]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054da:	4b27      	ldr	r3, [pc, #156]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 80054dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054de:	4a26      	ldr	r2, [pc, #152]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 80054e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054e6:	4b24      	ldr	r3, [pc, #144]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 80054e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ea:	4b24      	ldr	r3, [pc, #144]	; (800557c <RCCEx_PLL3_Config+0x160>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	69d2      	ldr	r2, [r2, #28]
 80054f2:	00d2      	lsls	r2, r2, #3
 80054f4:	4920      	ldr	r1, [pc, #128]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80054fa:	4b1f      	ldr	r3, [pc, #124]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	4a1e      	ldr	r2, [pc, #120]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 8005500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005504:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d106      	bne.n	800551a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800550c:	4b1a      	ldr	r3, [pc, #104]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	4a19      	ldr	r2, [pc, #100]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 8005512:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005516:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005518:	e00f      	b.n	800553a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d106      	bne.n	800552e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005520:	4b15      	ldr	r3, [pc, #84]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	4a14      	ldr	r2, [pc, #80]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 8005526:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800552a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800552c:	e005      	b.n	800553a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800552e:	4b12      	ldr	r3, [pc, #72]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	4a11      	ldr	r2, [pc, #68]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 8005534:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005538:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800553a:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a0e      	ldr	r2, [pc, #56]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 8005540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005546:	f7fc f8ed 	bl	8001724 <HAL_GetTick>
 800554a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800554c:	e008      	b.n	8005560 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800554e:	f7fc f8e9 	bl	8001724 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e006      	b.n	800556e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005560:	4b05      	ldr	r3, [pc, #20]	; (8005578 <RCCEx_PLL3_Config+0x15c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f0      	beq.n	800554e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800556c:	7bfb      	ldrb	r3, [r7, #15]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	58024400 	.word	0x58024400
 800557c:	ffff0007 	.word	0xffff0007

08005580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e042      	b.n	8005618 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005598:	2b00      	cmp	r3, #0
 800559a:	d106      	bne.n	80055aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7fb fe05 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2224      	movs	r2, #36	; 0x24
 80055ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0201 	bic.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f82c 	bl	8005620 <UART_SetConfig>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e022      	b.n	8005618 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fd88 	bl	80060f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fe0f 	bl	8006234 <UART_CheckIdleState>
 8005616:	4603      	mov	r3, r0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005624:	b092      	sub	sp, #72	; 0x48
 8005626:	af00      	add	r7, sp, #0
 8005628:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	431a      	orrs	r2, r3
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	431a      	orrs	r2, r3
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	4313      	orrs	r3, r2
 8005646:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4bbe      	ldr	r3, [pc, #760]	; (8005948 <UART_SetConfig+0x328>)
 8005650:	4013      	ands	r3, r2
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005658:	430b      	orrs	r3, r1
 800565a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4ab3      	ldr	r2, [pc, #716]	; (800594c <UART_SetConfig+0x32c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d004      	beq.n	800568c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005688:	4313      	orrs	r3, r2
 800568a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	4baf      	ldr	r3, [pc, #700]	; (8005950 <UART_SetConfig+0x330>)
 8005694:	4013      	ands	r3, r2
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800569c:	430b      	orrs	r3, r1
 800569e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	f023 010f 	bic.w	r1, r3, #15
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4aa6      	ldr	r2, [pc, #664]	; (8005954 <UART_SetConfig+0x334>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d177      	bne.n	80057b0 <UART_SetConfig+0x190>
 80056c0:	4ba5      	ldr	r3, [pc, #660]	; (8005958 <UART_SetConfig+0x338>)
 80056c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056c8:	2b28      	cmp	r3, #40	; 0x28
 80056ca:	d86d      	bhi.n	80057a8 <UART_SetConfig+0x188>
 80056cc:	a201      	add	r2, pc, #4	; (adr r2, 80056d4 <UART_SetConfig+0xb4>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	08005779 	.word	0x08005779
 80056d8:	080057a9 	.word	0x080057a9
 80056dc:	080057a9 	.word	0x080057a9
 80056e0:	080057a9 	.word	0x080057a9
 80056e4:	080057a9 	.word	0x080057a9
 80056e8:	080057a9 	.word	0x080057a9
 80056ec:	080057a9 	.word	0x080057a9
 80056f0:	080057a9 	.word	0x080057a9
 80056f4:	08005781 	.word	0x08005781
 80056f8:	080057a9 	.word	0x080057a9
 80056fc:	080057a9 	.word	0x080057a9
 8005700:	080057a9 	.word	0x080057a9
 8005704:	080057a9 	.word	0x080057a9
 8005708:	080057a9 	.word	0x080057a9
 800570c:	080057a9 	.word	0x080057a9
 8005710:	080057a9 	.word	0x080057a9
 8005714:	08005789 	.word	0x08005789
 8005718:	080057a9 	.word	0x080057a9
 800571c:	080057a9 	.word	0x080057a9
 8005720:	080057a9 	.word	0x080057a9
 8005724:	080057a9 	.word	0x080057a9
 8005728:	080057a9 	.word	0x080057a9
 800572c:	080057a9 	.word	0x080057a9
 8005730:	080057a9 	.word	0x080057a9
 8005734:	08005791 	.word	0x08005791
 8005738:	080057a9 	.word	0x080057a9
 800573c:	080057a9 	.word	0x080057a9
 8005740:	080057a9 	.word	0x080057a9
 8005744:	080057a9 	.word	0x080057a9
 8005748:	080057a9 	.word	0x080057a9
 800574c:	080057a9 	.word	0x080057a9
 8005750:	080057a9 	.word	0x080057a9
 8005754:	08005799 	.word	0x08005799
 8005758:	080057a9 	.word	0x080057a9
 800575c:	080057a9 	.word	0x080057a9
 8005760:	080057a9 	.word	0x080057a9
 8005764:	080057a9 	.word	0x080057a9
 8005768:	080057a9 	.word	0x080057a9
 800576c:	080057a9 	.word	0x080057a9
 8005770:	080057a9 	.word	0x080057a9
 8005774:	080057a1 	.word	0x080057a1
 8005778:	2301      	movs	r3, #1
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800577e:	e222      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005780:	2304      	movs	r3, #4
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005786:	e21e      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005788:	2308      	movs	r3, #8
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578e:	e21a      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005790:	2310      	movs	r3, #16
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005796:	e216      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005798:	2320      	movs	r3, #32
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579e:	e212      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 80057a0:	2340      	movs	r3, #64	; 0x40
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a6:	e20e      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ae:	e20a      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a69      	ldr	r2, [pc, #420]	; (800595c <UART_SetConfig+0x33c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d130      	bne.n	800581c <UART_SetConfig+0x1fc>
 80057ba:	4b67      	ldr	r3, [pc, #412]	; (8005958 <UART_SetConfig+0x338>)
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	2b05      	cmp	r3, #5
 80057c4:	d826      	bhi.n	8005814 <UART_SetConfig+0x1f4>
 80057c6:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <UART_SetConfig+0x1ac>)
 80057c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057cc:	080057e5 	.word	0x080057e5
 80057d0:	080057ed 	.word	0x080057ed
 80057d4:	080057f5 	.word	0x080057f5
 80057d8:	080057fd 	.word	0x080057fd
 80057dc:	08005805 	.word	0x08005805
 80057e0:	0800580d 	.word	0x0800580d
 80057e4:	2300      	movs	r3, #0
 80057e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ea:	e1ec      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 80057ec:	2304      	movs	r3, #4
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f2:	e1e8      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 80057f4:	2308      	movs	r3, #8
 80057f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fa:	e1e4      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 80057fc:	2310      	movs	r3, #16
 80057fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005802:	e1e0      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005804:	2320      	movs	r3, #32
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580a:	e1dc      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 800580c:	2340      	movs	r3, #64	; 0x40
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005812:	e1d8      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005814:	2380      	movs	r3, #128	; 0x80
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800581a:	e1d4      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a4f      	ldr	r2, [pc, #316]	; (8005960 <UART_SetConfig+0x340>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d130      	bne.n	8005888 <UART_SetConfig+0x268>
 8005826:	4b4c      	ldr	r3, [pc, #304]	; (8005958 <UART_SetConfig+0x338>)
 8005828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	2b05      	cmp	r3, #5
 8005830:	d826      	bhi.n	8005880 <UART_SetConfig+0x260>
 8005832:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <UART_SetConfig+0x218>)
 8005834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005838:	08005851 	.word	0x08005851
 800583c:	08005859 	.word	0x08005859
 8005840:	08005861 	.word	0x08005861
 8005844:	08005869 	.word	0x08005869
 8005848:	08005871 	.word	0x08005871
 800584c:	08005879 	.word	0x08005879
 8005850:	2300      	movs	r3, #0
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005856:	e1b6      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005858:	2304      	movs	r3, #4
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585e:	e1b2      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005860:	2308      	movs	r3, #8
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005866:	e1ae      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005868:	2310      	movs	r3, #16
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586e:	e1aa      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005870:	2320      	movs	r3, #32
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005876:	e1a6      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005878:	2340      	movs	r3, #64	; 0x40
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587e:	e1a2      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005886:	e19e      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a35      	ldr	r2, [pc, #212]	; (8005964 <UART_SetConfig+0x344>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d130      	bne.n	80058f4 <UART_SetConfig+0x2d4>
 8005892:	4b31      	ldr	r3, [pc, #196]	; (8005958 <UART_SetConfig+0x338>)
 8005894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	2b05      	cmp	r3, #5
 800589c:	d826      	bhi.n	80058ec <UART_SetConfig+0x2cc>
 800589e:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <UART_SetConfig+0x284>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	080058bd 	.word	0x080058bd
 80058a8:	080058c5 	.word	0x080058c5
 80058ac:	080058cd 	.word	0x080058cd
 80058b0:	080058d5 	.word	0x080058d5
 80058b4:	080058dd 	.word	0x080058dd
 80058b8:	080058e5 	.word	0x080058e5
 80058bc:	2300      	movs	r3, #0
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c2:	e180      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 80058c4:	2304      	movs	r3, #4
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ca:	e17c      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 80058cc:	2308      	movs	r3, #8
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d2:	e178      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 80058d4:	2310      	movs	r3, #16
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058da:	e174      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 80058dc:	2320      	movs	r3, #32
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e2:	e170      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 80058e4:	2340      	movs	r3, #64	; 0x40
 80058e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ea:	e16c      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 80058ec:	2380      	movs	r3, #128	; 0x80
 80058ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058f2:	e168      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1b      	ldr	r2, [pc, #108]	; (8005968 <UART_SetConfig+0x348>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d142      	bne.n	8005984 <UART_SetConfig+0x364>
 80058fe:	4b16      	ldr	r3, [pc, #88]	; (8005958 <UART_SetConfig+0x338>)
 8005900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	2b05      	cmp	r3, #5
 8005908:	d838      	bhi.n	800597c <UART_SetConfig+0x35c>
 800590a:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <UART_SetConfig+0x2f0>)
 800590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005910:	08005929 	.word	0x08005929
 8005914:	08005931 	.word	0x08005931
 8005918:	08005939 	.word	0x08005939
 800591c:	08005941 	.word	0x08005941
 8005920:	0800596d 	.word	0x0800596d
 8005924:	08005975 	.word	0x08005975
 8005928:	2300      	movs	r3, #0
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592e:	e14a      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005930:	2304      	movs	r3, #4
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005936:	e146      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005938:	2308      	movs	r3, #8
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593e:	e142      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005940:	2310      	movs	r3, #16
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005946:	e13e      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005948:	cfff69f3 	.word	0xcfff69f3
 800594c:	58000c00 	.word	0x58000c00
 8005950:	11fff4ff 	.word	0x11fff4ff
 8005954:	40011000 	.word	0x40011000
 8005958:	58024400 	.word	0x58024400
 800595c:	40004400 	.word	0x40004400
 8005960:	40004800 	.word	0x40004800
 8005964:	40004c00 	.word	0x40004c00
 8005968:	40005000 	.word	0x40005000
 800596c:	2320      	movs	r3, #32
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005972:	e128      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005974:	2340      	movs	r3, #64	; 0x40
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800597a:	e124      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 800597c:	2380      	movs	r3, #128	; 0x80
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005982:	e120      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4acb      	ldr	r2, [pc, #812]	; (8005cb8 <UART_SetConfig+0x698>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d176      	bne.n	8005a7c <UART_SetConfig+0x45c>
 800598e:	4bcb      	ldr	r3, [pc, #812]	; (8005cbc <UART_SetConfig+0x69c>)
 8005990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005992:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005996:	2b28      	cmp	r3, #40	; 0x28
 8005998:	d86c      	bhi.n	8005a74 <UART_SetConfig+0x454>
 800599a:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <UART_SetConfig+0x380>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	08005a45 	.word	0x08005a45
 80059a4:	08005a75 	.word	0x08005a75
 80059a8:	08005a75 	.word	0x08005a75
 80059ac:	08005a75 	.word	0x08005a75
 80059b0:	08005a75 	.word	0x08005a75
 80059b4:	08005a75 	.word	0x08005a75
 80059b8:	08005a75 	.word	0x08005a75
 80059bc:	08005a75 	.word	0x08005a75
 80059c0:	08005a4d 	.word	0x08005a4d
 80059c4:	08005a75 	.word	0x08005a75
 80059c8:	08005a75 	.word	0x08005a75
 80059cc:	08005a75 	.word	0x08005a75
 80059d0:	08005a75 	.word	0x08005a75
 80059d4:	08005a75 	.word	0x08005a75
 80059d8:	08005a75 	.word	0x08005a75
 80059dc:	08005a75 	.word	0x08005a75
 80059e0:	08005a55 	.word	0x08005a55
 80059e4:	08005a75 	.word	0x08005a75
 80059e8:	08005a75 	.word	0x08005a75
 80059ec:	08005a75 	.word	0x08005a75
 80059f0:	08005a75 	.word	0x08005a75
 80059f4:	08005a75 	.word	0x08005a75
 80059f8:	08005a75 	.word	0x08005a75
 80059fc:	08005a75 	.word	0x08005a75
 8005a00:	08005a5d 	.word	0x08005a5d
 8005a04:	08005a75 	.word	0x08005a75
 8005a08:	08005a75 	.word	0x08005a75
 8005a0c:	08005a75 	.word	0x08005a75
 8005a10:	08005a75 	.word	0x08005a75
 8005a14:	08005a75 	.word	0x08005a75
 8005a18:	08005a75 	.word	0x08005a75
 8005a1c:	08005a75 	.word	0x08005a75
 8005a20:	08005a65 	.word	0x08005a65
 8005a24:	08005a75 	.word	0x08005a75
 8005a28:	08005a75 	.word	0x08005a75
 8005a2c:	08005a75 	.word	0x08005a75
 8005a30:	08005a75 	.word	0x08005a75
 8005a34:	08005a75 	.word	0x08005a75
 8005a38:	08005a75 	.word	0x08005a75
 8005a3c:	08005a75 	.word	0x08005a75
 8005a40:	08005a6d 	.word	0x08005a6d
 8005a44:	2301      	movs	r3, #1
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4a:	e0bc      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a52:	e0b8      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005a54:	2308      	movs	r3, #8
 8005a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a5a:	e0b4      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a62:	e0b0      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005a64:	2320      	movs	r3, #32
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6a:	e0ac      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005a6c:	2340      	movs	r3, #64	; 0x40
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a72:	e0a8      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005a74:	2380      	movs	r3, #128	; 0x80
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a7a:	e0a4      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a8f      	ldr	r2, [pc, #572]	; (8005cc0 <UART_SetConfig+0x6a0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d130      	bne.n	8005ae8 <UART_SetConfig+0x4c8>
 8005a86:	4b8d      	ldr	r3, [pc, #564]	; (8005cbc <UART_SetConfig+0x69c>)
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	2b05      	cmp	r3, #5
 8005a90:	d826      	bhi.n	8005ae0 <UART_SetConfig+0x4c0>
 8005a92:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <UART_SetConfig+0x478>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005ab1 	.word	0x08005ab1
 8005a9c:	08005ab9 	.word	0x08005ab9
 8005aa0:	08005ac1 	.word	0x08005ac1
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005ad1 	.word	0x08005ad1
 8005aac:	08005ad9 	.word	0x08005ad9
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ab6:	e086      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005abe:	e082      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005ac0:	2308      	movs	r3, #8
 8005ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ac6:	e07e      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005ac8:	2310      	movs	r3, #16
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ace:	e07a      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005ad0:	2320      	movs	r3, #32
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ad6:	e076      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005ad8:	2340      	movs	r3, #64	; 0x40
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ade:	e072      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005ae0:	2380      	movs	r3, #128	; 0x80
 8005ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ae6:	e06e      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a75      	ldr	r2, [pc, #468]	; (8005cc4 <UART_SetConfig+0x6a4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d130      	bne.n	8005b54 <UART_SetConfig+0x534>
 8005af2:	4b72      	ldr	r3, [pc, #456]	; (8005cbc <UART_SetConfig+0x69c>)
 8005af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	2b05      	cmp	r3, #5
 8005afc:	d826      	bhi.n	8005b4c <UART_SetConfig+0x52c>
 8005afe:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <UART_SetConfig+0x4e4>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b1d 	.word	0x08005b1d
 8005b08:	08005b25 	.word	0x08005b25
 8005b0c:	08005b2d 	.word	0x08005b2d
 8005b10:	08005b35 	.word	0x08005b35
 8005b14:	08005b3d 	.word	0x08005b3d
 8005b18:	08005b45 	.word	0x08005b45
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b22:	e050      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005b24:	2304      	movs	r3, #4
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2a:	e04c      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005b2c:	2308      	movs	r3, #8
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b32:	e048      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005b34:	2310      	movs	r3, #16
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3a:	e044      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005b3c:	2320      	movs	r3, #32
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b42:	e040      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005b44:	2340      	movs	r3, #64	; 0x40
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4a:	e03c      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005b4c:	2380      	movs	r3, #128	; 0x80
 8005b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b52:	e038      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a5b      	ldr	r2, [pc, #364]	; (8005cc8 <UART_SetConfig+0x6a8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d130      	bne.n	8005bc0 <UART_SetConfig+0x5a0>
 8005b5e:	4b57      	ldr	r3, [pc, #348]	; (8005cbc <UART_SetConfig+0x69c>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	2b05      	cmp	r3, #5
 8005b68:	d826      	bhi.n	8005bb8 <UART_SetConfig+0x598>
 8005b6a:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <UART_SetConfig+0x550>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005b89 	.word	0x08005b89
 8005b74:	08005b91 	.word	0x08005b91
 8005b78:	08005b99 	.word	0x08005b99
 8005b7c:	08005ba1 	.word	0x08005ba1
 8005b80:	08005ba9 	.word	0x08005ba9
 8005b84:	08005bb1 	.word	0x08005bb1
 8005b88:	2302      	movs	r3, #2
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8e:	e01a      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005b90:	2304      	movs	r3, #4
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b96:	e016      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005b98:	2308      	movs	r3, #8
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9e:	e012      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba6:	e00e      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005ba8:	2320      	movs	r3, #32
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bae:	e00a      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005bb0:	2340      	movs	r3, #64	; 0x40
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb6:	e006      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005bb8:	2380      	movs	r3, #128	; 0x80
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bbe:	e002      	b.n	8005bc6 <UART_SetConfig+0x5a6>
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a3f      	ldr	r2, [pc, #252]	; (8005cc8 <UART_SetConfig+0x6a8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	f040 80f8 	bne.w	8005dc2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bd2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	dc46      	bgt.n	8005c68 <UART_SetConfig+0x648>
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	f2c0 8082 	blt.w	8005ce4 <UART_SetConfig+0x6c4>
 8005be0:	3b02      	subs	r3, #2
 8005be2:	2b1e      	cmp	r3, #30
 8005be4:	d87e      	bhi.n	8005ce4 <UART_SetConfig+0x6c4>
 8005be6:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <UART_SetConfig+0x5cc>)
 8005be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bec:	08005c6f 	.word	0x08005c6f
 8005bf0:	08005ce5 	.word	0x08005ce5
 8005bf4:	08005c77 	.word	0x08005c77
 8005bf8:	08005ce5 	.word	0x08005ce5
 8005bfc:	08005ce5 	.word	0x08005ce5
 8005c00:	08005ce5 	.word	0x08005ce5
 8005c04:	08005c87 	.word	0x08005c87
 8005c08:	08005ce5 	.word	0x08005ce5
 8005c0c:	08005ce5 	.word	0x08005ce5
 8005c10:	08005ce5 	.word	0x08005ce5
 8005c14:	08005ce5 	.word	0x08005ce5
 8005c18:	08005ce5 	.word	0x08005ce5
 8005c1c:	08005ce5 	.word	0x08005ce5
 8005c20:	08005ce5 	.word	0x08005ce5
 8005c24:	08005c97 	.word	0x08005c97
 8005c28:	08005ce5 	.word	0x08005ce5
 8005c2c:	08005ce5 	.word	0x08005ce5
 8005c30:	08005ce5 	.word	0x08005ce5
 8005c34:	08005ce5 	.word	0x08005ce5
 8005c38:	08005ce5 	.word	0x08005ce5
 8005c3c:	08005ce5 	.word	0x08005ce5
 8005c40:	08005ce5 	.word	0x08005ce5
 8005c44:	08005ce5 	.word	0x08005ce5
 8005c48:	08005ce5 	.word	0x08005ce5
 8005c4c:	08005ce5 	.word	0x08005ce5
 8005c50:	08005ce5 	.word	0x08005ce5
 8005c54:	08005ce5 	.word	0x08005ce5
 8005c58:	08005ce5 	.word	0x08005ce5
 8005c5c:	08005ce5 	.word	0x08005ce5
 8005c60:	08005ce5 	.word	0x08005ce5
 8005c64:	08005cd7 	.word	0x08005cd7
 8005c68:	2b40      	cmp	r3, #64	; 0x40
 8005c6a:	d037      	beq.n	8005cdc <UART_SetConfig+0x6bc>
 8005c6c:	e03a      	b.n	8005ce4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c6e:	f7ff f865 	bl	8004d3c <HAL_RCCEx_GetD3PCLK1Freq>
 8005c72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c74:	e03c      	b.n	8005cf0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff f874 	bl	8004d68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c84:	e034      	b.n	8005cf0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c86:	f107 0318 	add.w	r3, r7, #24
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff f9c0 	bl	8005010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c94:	e02c      	b.n	8005cf0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c96:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <UART_SetConfig+0x69c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d016      	beq.n	8005cd0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ca2:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <UART_SetConfig+0x69c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	08db      	lsrs	r3, r3, #3
 8005ca8:	f003 0303 	and.w	r3, r3, #3
 8005cac:	4a07      	ldr	r2, [pc, #28]	; (8005ccc <UART_SetConfig+0x6ac>)
 8005cae:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cb4:	e01c      	b.n	8005cf0 <UART_SetConfig+0x6d0>
 8005cb6:	bf00      	nop
 8005cb8:	40011400 	.word	0x40011400
 8005cbc:	58024400 	.word	0x58024400
 8005cc0:	40007800 	.word	0x40007800
 8005cc4:	40007c00 	.word	0x40007c00
 8005cc8:	58000c00 	.word	0x58000c00
 8005ccc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005cd0:	4b9d      	ldr	r3, [pc, #628]	; (8005f48 <UART_SetConfig+0x928>)
 8005cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cd4:	e00c      	b.n	8005cf0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cd6:	4b9d      	ldr	r3, [pc, #628]	; (8005f4c <UART_SetConfig+0x92c>)
 8005cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cda:	e009      	b.n	8005cf0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce2:	e005      	b.n	8005cf0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005cee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 81de 	beq.w	80060b4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	4a94      	ldr	r2, [pc, #592]	; (8005f50 <UART_SetConfig+0x930>)
 8005cfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d02:	461a      	mov	r2, r3
 8005d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d06:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d0a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	4613      	mov	r3, r2
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	4413      	add	r3, r2
 8005d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d305      	bcc.n	8005d28 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d903      	bls.n	8005d30 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d2e:	e1c1      	b.n	80060b4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d32:	2200      	movs	r2, #0
 8005d34:	60bb      	str	r3, [r7, #8]
 8005d36:	60fa      	str	r2, [r7, #12]
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	4a84      	ldr	r2, [pc, #528]	; (8005f50 <UART_SetConfig+0x930>)
 8005d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2200      	movs	r2, #0
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	607a      	str	r2, [r7, #4]
 8005d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d52:	f7fa fac1 	bl	80002d8 <__aeabi_uldivmod>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	f04f 0300 	mov.w	r3, #0
 8005d66:	020b      	lsls	r3, r1, #8
 8005d68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d6c:	0202      	lsls	r2, r0, #8
 8005d6e:	6979      	ldr	r1, [r7, #20]
 8005d70:	6849      	ldr	r1, [r1, #4]
 8005d72:	0849      	lsrs	r1, r1, #1
 8005d74:	2000      	movs	r0, #0
 8005d76:	460c      	mov	r4, r1
 8005d78:	4605      	mov	r5, r0
 8005d7a:	eb12 0804 	adds.w	r8, r2, r4
 8005d7e:	eb43 0905 	adc.w	r9, r3, r5
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	469a      	mov	sl, r3
 8005d8a:	4693      	mov	fp, r2
 8005d8c:	4652      	mov	r2, sl
 8005d8e:	465b      	mov	r3, fp
 8005d90:	4640      	mov	r0, r8
 8005d92:	4649      	mov	r1, r9
 8005d94:	f7fa faa0 	bl	80002d8 <__aeabi_uldivmod>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005da6:	d308      	bcc.n	8005dba <UART_SetConfig+0x79a>
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dae:	d204      	bcs.n	8005dba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005db6:	60da      	str	r2, [r3, #12]
 8005db8:	e17c      	b.n	80060b4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005dc0:	e178      	b.n	80060b4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dca:	f040 80c5 	bne.w	8005f58 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005dce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005dd2:	2b20      	cmp	r3, #32
 8005dd4:	dc48      	bgt.n	8005e68 <UART_SetConfig+0x848>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	db7b      	blt.n	8005ed2 <UART_SetConfig+0x8b2>
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d879      	bhi.n	8005ed2 <UART_SetConfig+0x8b2>
 8005dde:	a201      	add	r2, pc, #4	; (adr r2, 8005de4 <UART_SetConfig+0x7c4>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005e6f 	.word	0x08005e6f
 8005de8:	08005e77 	.word	0x08005e77
 8005dec:	08005ed3 	.word	0x08005ed3
 8005df0:	08005ed3 	.word	0x08005ed3
 8005df4:	08005e7f 	.word	0x08005e7f
 8005df8:	08005ed3 	.word	0x08005ed3
 8005dfc:	08005ed3 	.word	0x08005ed3
 8005e00:	08005ed3 	.word	0x08005ed3
 8005e04:	08005e8f 	.word	0x08005e8f
 8005e08:	08005ed3 	.word	0x08005ed3
 8005e0c:	08005ed3 	.word	0x08005ed3
 8005e10:	08005ed3 	.word	0x08005ed3
 8005e14:	08005ed3 	.word	0x08005ed3
 8005e18:	08005ed3 	.word	0x08005ed3
 8005e1c:	08005ed3 	.word	0x08005ed3
 8005e20:	08005ed3 	.word	0x08005ed3
 8005e24:	08005e9f 	.word	0x08005e9f
 8005e28:	08005ed3 	.word	0x08005ed3
 8005e2c:	08005ed3 	.word	0x08005ed3
 8005e30:	08005ed3 	.word	0x08005ed3
 8005e34:	08005ed3 	.word	0x08005ed3
 8005e38:	08005ed3 	.word	0x08005ed3
 8005e3c:	08005ed3 	.word	0x08005ed3
 8005e40:	08005ed3 	.word	0x08005ed3
 8005e44:	08005ed3 	.word	0x08005ed3
 8005e48:	08005ed3 	.word	0x08005ed3
 8005e4c:	08005ed3 	.word	0x08005ed3
 8005e50:	08005ed3 	.word	0x08005ed3
 8005e54:	08005ed3 	.word	0x08005ed3
 8005e58:	08005ed3 	.word	0x08005ed3
 8005e5c:	08005ed3 	.word	0x08005ed3
 8005e60:	08005ed3 	.word	0x08005ed3
 8005e64:	08005ec5 	.word	0x08005ec5
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	d02e      	beq.n	8005eca <UART_SetConfig+0x8aa>
 8005e6c:	e031      	b.n	8005ed2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e6e:	f7fd fd2f 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 8005e72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e74:	e033      	b.n	8005ede <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e76:	f7fd fd41 	bl	80038fc <HAL_RCC_GetPCLK2Freq>
 8005e7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e7c:	e02f      	b.n	8005ede <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe ff70 	bl	8004d68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e8c:	e027      	b.n	8005ede <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e8e:	f107 0318 	add.w	r3, r7, #24
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff f8bc 	bl	8005010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e9c:	e01f      	b.n	8005ede <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e9e:	4b2d      	ldr	r3, [pc, #180]	; (8005f54 <UART_SetConfig+0x934>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005eaa:	4b2a      	ldr	r3, [pc, #168]	; (8005f54 <UART_SetConfig+0x934>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	08db      	lsrs	r3, r3, #3
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	4a24      	ldr	r2, [pc, #144]	; (8005f48 <UART_SetConfig+0x928>)
 8005eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ebc:	e00f      	b.n	8005ede <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005ebe:	4b22      	ldr	r3, [pc, #136]	; (8005f48 <UART_SetConfig+0x928>)
 8005ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ec2:	e00c      	b.n	8005ede <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ec4:	4b21      	ldr	r3, [pc, #132]	; (8005f4c <UART_SetConfig+0x92c>)
 8005ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ec8:	e009      	b.n	8005ede <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ed0:	e005      	b.n	8005ede <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005edc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 80e7 	beq.w	80060b4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	4a19      	ldr	r2, [pc, #100]	; (8005f50 <UART_SetConfig+0x930>)
 8005eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef8:	005a      	lsls	r2, r3, #1
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	085b      	lsrs	r3, r3, #1
 8005f00:	441a      	add	r2, r3
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0e:	2b0f      	cmp	r3, #15
 8005f10:	d916      	bls.n	8005f40 <UART_SetConfig+0x920>
 8005f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f18:	d212      	bcs.n	8005f40 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f023 030f 	bic.w	r3, r3, #15
 8005f22:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f26:	085b      	lsrs	r3, r3, #1
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f32:	4313      	orrs	r3, r2
 8005f34:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005f3c:	60da      	str	r2, [r3, #12]
 8005f3e:	e0b9      	b.n	80060b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005f46:	e0b5      	b.n	80060b4 <UART_SetConfig+0xa94>
 8005f48:	03d09000 	.word	0x03d09000
 8005f4c:	003d0900 	.word	0x003d0900
 8005f50:	08007024 	.word	0x08007024
 8005f54:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	dc49      	bgt.n	8005ff4 <UART_SetConfig+0x9d4>
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	db7c      	blt.n	800605e <UART_SetConfig+0xa3e>
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d87a      	bhi.n	800605e <UART_SetConfig+0xa3e>
 8005f68:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <UART_SetConfig+0x950>)
 8005f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6e:	bf00      	nop
 8005f70:	08005ffb 	.word	0x08005ffb
 8005f74:	08006003 	.word	0x08006003
 8005f78:	0800605f 	.word	0x0800605f
 8005f7c:	0800605f 	.word	0x0800605f
 8005f80:	0800600b 	.word	0x0800600b
 8005f84:	0800605f 	.word	0x0800605f
 8005f88:	0800605f 	.word	0x0800605f
 8005f8c:	0800605f 	.word	0x0800605f
 8005f90:	0800601b 	.word	0x0800601b
 8005f94:	0800605f 	.word	0x0800605f
 8005f98:	0800605f 	.word	0x0800605f
 8005f9c:	0800605f 	.word	0x0800605f
 8005fa0:	0800605f 	.word	0x0800605f
 8005fa4:	0800605f 	.word	0x0800605f
 8005fa8:	0800605f 	.word	0x0800605f
 8005fac:	0800605f 	.word	0x0800605f
 8005fb0:	0800602b 	.word	0x0800602b
 8005fb4:	0800605f 	.word	0x0800605f
 8005fb8:	0800605f 	.word	0x0800605f
 8005fbc:	0800605f 	.word	0x0800605f
 8005fc0:	0800605f 	.word	0x0800605f
 8005fc4:	0800605f 	.word	0x0800605f
 8005fc8:	0800605f 	.word	0x0800605f
 8005fcc:	0800605f 	.word	0x0800605f
 8005fd0:	0800605f 	.word	0x0800605f
 8005fd4:	0800605f 	.word	0x0800605f
 8005fd8:	0800605f 	.word	0x0800605f
 8005fdc:	0800605f 	.word	0x0800605f
 8005fe0:	0800605f 	.word	0x0800605f
 8005fe4:	0800605f 	.word	0x0800605f
 8005fe8:	0800605f 	.word	0x0800605f
 8005fec:	0800605f 	.word	0x0800605f
 8005ff0:	08006051 	.word	0x08006051
 8005ff4:	2b40      	cmp	r3, #64	; 0x40
 8005ff6:	d02e      	beq.n	8006056 <UART_SetConfig+0xa36>
 8005ff8:	e031      	b.n	800605e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ffa:	f7fd fc69 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 8005ffe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006000:	e033      	b.n	800606a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006002:	f7fd fc7b 	bl	80038fc <HAL_RCC_GetPCLK2Freq>
 8006006:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006008:	e02f      	b.n	800606a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800600a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800600e:	4618      	mov	r0, r3
 8006010:	f7fe feaa 	bl	8004d68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006018:	e027      	b.n	800606a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800601a:	f107 0318 	add.w	r3, r7, #24
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe fff6 	bl	8005010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006028:	e01f      	b.n	800606a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800602a:	4b2d      	ldr	r3, [pc, #180]	; (80060e0 <UART_SetConfig+0xac0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0320 	and.w	r3, r3, #32
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006036:	4b2a      	ldr	r3, [pc, #168]	; (80060e0 <UART_SetConfig+0xac0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	08db      	lsrs	r3, r3, #3
 800603c:	f003 0303 	and.w	r3, r3, #3
 8006040:	4a28      	ldr	r2, [pc, #160]	; (80060e4 <UART_SetConfig+0xac4>)
 8006042:	fa22 f303 	lsr.w	r3, r2, r3
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006048:	e00f      	b.n	800606a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800604a:	4b26      	ldr	r3, [pc, #152]	; (80060e4 <UART_SetConfig+0xac4>)
 800604c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800604e:	e00c      	b.n	800606a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006050:	4b25      	ldr	r3, [pc, #148]	; (80060e8 <UART_SetConfig+0xac8>)
 8006052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006054:	e009      	b.n	800606a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800605a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800605c:	e005      	b.n	800606a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006068:	bf00      	nop
    }

    if (pclk != 0U)
 800606a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d021      	beq.n	80060b4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	4a1d      	ldr	r2, [pc, #116]	; (80060ec <UART_SetConfig+0xacc>)
 8006076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800607a:	461a      	mov	r2, r3
 800607c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	085b      	lsrs	r3, r3, #1
 8006088:	441a      	add	r2, r3
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006092:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	2b0f      	cmp	r3, #15
 8006098:	d909      	bls.n	80060ae <UART_SetConfig+0xa8e>
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a0:	d205      	bcs.n	80060ae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60da      	str	r2, [r3, #12]
 80060ac:	e002      	b.n	80060b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2201      	movs	r2, #1
 80060c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2200      	movs	r2, #0
 80060c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2200      	movs	r2, #0
 80060ce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80060d0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3748      	adds	r7, #72	; 0x48
 80060d8:	46bd      	mov	sp, r7
 80060da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060de:	bf00      	nop
 80060e0:	58024400 	.word	0x58024400
 80060e4:	03d09000 	.word	0x03d09000
 80060e8:	003d0900 	.word	0x003d0900
 80060ec:	08007024 	.word	0x08007024

080060f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01a      	beq.n	8006206 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ee:	d10a      	bne.n	8006206 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	605a      	str	r2, [r3, #4]
  }
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b098      	sub	sp, #96	; 0x60
 8006238:	af02      	add	r7, sp, #8
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006244:	f7fb fa6e 	bl	8001724 <HAL_GetTick>
 8006248:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0308 	and.w	r3, r3, #8
 8006254:	2b08      	cmp	r3, #8
 8006256:	d12f      	bne.n	80062b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006260:	2200      	movs	r2, #0
 8006262:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f88e 	bl	8006388 <UART_WaitOnFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d022      	beq.n	80062b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006286:	653b      	str	r3, [r7, #80]	; 0x50
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	461a      	mov	r2, r3
 800628e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006290:	647b      	str	r3, [r7, #68]	; 0x44
 8006292:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800629e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e6      	bne.n	8006272 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e063      	b.n	8006380 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d149      	bne.n	800635a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ce:	2200      	movs	r2, #0
 80062d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f857 	bl	8006388 <UART_WaitOnFlagUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d03c      	beq.n	800635a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	623b      	str	r3, [r7, #32]
   return(result);
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006300:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006306:	e841 2300 	strex	r3, r2, [r1]
 800630a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e6      	bne.n	80062e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3308      	adds	r3, #8
 8006318:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	60fb      	str	r3, [r7, #12]
   return(result);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f023 0301 	bic.w	r3, r3, #1
 8006328:	64bb      	str	r3, [r7, #72]	; 0x48
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3308      	adds	r3, #8
 8006330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006332:	61fa      	str	r2, [r7, #28]
 8006334:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	69b9      	ldr	r1, [r7, #24]
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	617b      	str	r3, [r7, #20]
   return(result);
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e5      	bne.n	8006312 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e012      	b.n	8006380 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2220      	movs	r2, #32
 8006366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3758      	adds	r7, #88	; 0x58
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	603b      	str	r3, [r7, #0]
 8006394:	4613      	mov	r3, r2
 8006396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006398:	e049      	b.n	800642e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d045      	beq.n	800642e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a2:	f7fb f9bf 	bl	8001724 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d302      	bcc.n	80063b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e048      	b.n	800644e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d031      	beq.n	800642e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69db      	ldr	r3, [r3, #28]
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d110      	bne.n	80063fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2208      	movs	r2, #8
 80063de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f839 	bl	8006458 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2208      	movs	r2, #8
 80063ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e029      	b.n	800644e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006408:	d111      	bne.n	800642e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 f81f 	bl	8006458 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e00f      	b.n	800644e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4013      	ands	r3, r2
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	429a      	cmp	r2, r3
 800643c:	bf0c      	ite	eq
 800643e:	2301      	moveq	r3, #1
 8006440:	2300      	movne	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	429a      	cmp	r2, r3
 800644a:	d0a6      	beq.n	800639a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006458:	b480      	push	{r7}
 800645a:	b095      	sub	sp, #84	; 0x54
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647e:	643b      	str	r3, [r7, #64]	; 0x40
 8006480:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006484:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e6      	bne.n	8006460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3308      	adds	r3, #8
 8006498:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80064a2:	69fa      	ldr	r2, [r7, #28]
 80064a4:	4b1e      	ldr	r3, [pc, #120]	; (8006520 <UART_EndRxTransfer+0xc8>)
 80064a6:	4013      	ands	r3, r2
 80064a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3308      	adds	r3, #8
 80064b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e5      	bne.n	8006492 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d118      	bne.n	8006500 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	60bb      	str	r3, [r7, #8]
   return(result);
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f023 0310 	bic.w	r3, r3, #16
 80064e2:	647b      	str	r3, [r7, #68]	; 0x44
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	6979      	ldr	r1, [r7, #20]
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	e841 2300 	strex	r3, r2, [r1]
 80064f8:	613b      	str	r3, [r7, #16]
   return(result);
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e6      	bne.n	80064ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2220      	movs	r2, #32
 8006504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006514:	bf00      	nop
 8006516:	3754      	adds	r7, #84	; 0x54
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	effffffe 	.word	0xeffffffe

08006524 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006532:	2b01      	cmp	r3, #1
 8006534:	d101      	bne.n	800653a <HAL_UARTEx_DisableFifoMode+0x16>
 8006536:	2302      	movs	r3, #2
 8006538:	e027      	b.n	800658a <HAL_UARTEx_DisableFifoMode+0x66>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2224      	movs	r2, #36	; 0x24
 8006546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 0201 	bic.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006568:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2220      	movs	r2, #32
 800657c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065aa:	2302      	movs	r3, #2
 80065ac:	e02d      	b.n	800660a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2224      	movs	r2, #36	; 0x24
 80065ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0201 	bic.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f850 	bl	8006690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006626:	2302      	movs	r3, #2
 8006628:	e02d      	b.n	8006686 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2224      	movs	r2, #36	; 0x24
 8006636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0201 	bic.w	r2, r2, #1
 8006650:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f812 	bl	8006690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800669c:	2b00      	cmp	r3, #0
 800669e:	d108      	bne.n	80066b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066b0:	e031      	b.n	8006716 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066b2:	2310      	movs	r3, #16
 80066b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066b6:	2310      	movs	r3, #16
 80066b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	0e5b      	lsrs	r3, r3, #25
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	0f5b      	lsrs	r3, r3, #29
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	7b3a      	ldrb	r2, [r7, #12]
 80066de:	4911      	ldr	r1, [pc, #68]	; (8006724 <UARTEx_SetNbDataToProcess+0x94>)
 80066e0:	5c8a      	ldrb	r2, [r1, r2]
 80066e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066e6:	7b3a      	ldrb	r2, [r7, #12]
 80066e8:	490f      	ldr	r1, [pc, #60]	; (8006728 <UARTEx_SetNbDataToProcess+0x98>)
 80066ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
 80066fa:	7b7a      	ldrb	r2, [r7, #13]
 80066fc:	4909      	ldr	r1, [pc, #36]	; (8006724 <UARTEx_SetNbDataToProcess+0x94>)
 80066fe:	5c8a      	ldrb	r2, [r1, r2]
 8006700:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006704:	7b7a      	ldrb	r2, [r7, #13]
 8006706:	4908      	ldr	r1, [pc, #32]	; (8006728 <UARTEx_SetNbDataToProcess+0x98>)
 8006708:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800670a:	fb93 f3f2 	sdiv	r3, r3, r2
 800670e:	b29a      	uxth	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	0800703c 	.word	0x0800703c
 8006728:	08007044 	.word	0x08007044

0800672c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800672c:	b084      	sub	sp, #16
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	f107 001c 	add.w	r0, r7, #28
 800673a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	2b01      	cmp	r3, #1
 8006742:	d120      	bne.n	8006786 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	4b2a      	ldr	r3, [pc, #168]	; (8006800 <USB_CoreInit+0xd4>)
 8006756:	4013      	ands	r3, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800676a:	2b01      	cmp	r3, #1
 800676c:	d105      	bne.n	800677a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 faac 	bl	8006cd8 <USB_CoreReset>
 8006780:	4603      	mov	r3, r0
 8006782:	73fb      	strb	r3, [r7, #15]
 8006784:	e01a      	b.n	80067bc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 faa0 	bl	8006cd8 <USB_CoreReset>
 8006798:	4603      	mov	r3, r0
 800679a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800679c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	639a      	str	r2, [r3, #56]	; 0x38
 80067ae:	e005      	b.n	80067bc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d116      	bne.n	80067f0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067d0:	4b0c      	ldr	r3, [pc, #48]	; (8006804 <USB_CoreInit+0xd8>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f043 0206 	orr.w	r2, r3, #6
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f043 0220 	orr.w	r2, r3, #32
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067fc:	b004      	add	sp, #16
 80067fe:	4770      	bx	lr
 8006800:	ffbdffbf 	.word	0xffbdffbf
 8006804:	03ee0000 	.word	0x03ee0000

08006808 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f023 0201 	bic.w	r2, r3, #1
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	460b      	mov	r3, r1
 8006834:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d115      	bne.n	8006878 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006858:	2001      	movs	r0, #1
 800685a:	f7fa ff6f 	bl	800173c <HAL_Delay>
      ms++;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3301      	adds	r3, #1
 8006862:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fa29 	bl	8006cbc <USB_GetMode>
 800686a:	4603      	mov	r3, r0
 800686c:	2b01      	cmp	r3, #1
 800686e:	d01e      	beq.n	80068ae <USB_SetCurrentMode+0x84>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b31      	cmp	r3, #49	; 0x31
 8006874:	d9f0      	bls.n	8006858 <USB_SetCurrentMode+0x2e>
 8006876:	e01a      	b.n	80068ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d115      	bne.n	80068aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800688a:	2001      	movs	r0, #1
 800688c:	f7fa ff56 	bl	800173c <HAL_Delay>
      ms++;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3301      	adds	r3, #1
 8006894:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fa10 	bl	8006cbc <USB_GetMode>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <USB_SetCurrentMode+0x84>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b31      	cmp	r3, #49	; 0x31
 80068a6:	d9f0      	bls.n	800688a <USB_SetCurrentMode+0x60>
 80068a8:	e001      	b.n	80068ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e005      	b.n	80068ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b32      	cmp	r3, #50	; 0x32
 80068b2:	d101      	bne.n	80068b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e000      	b.n	80068ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068c4:	b084      	sub	sp, #16
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b086      	sub	sp, #24
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068de:	2300      	movs	r3, #0
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	e009      	b.n	80068f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	3340      	adds	r3, #64	; 0x40
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	2200      	movs	r2, #0
 80068f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	3301      	adds	r3, #1
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	2b0e      	cmp	r3, #14
 80068fc:	d9f2      	bls.n	80068e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006900:	2b00      	cmp	r3, #0
 8006902:	d11c      	bne.n	800693e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006912:	f043 0302 	orr.w	r3, r3, #2
 8006916:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	e005      	b.n	800694a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006950:	461a      	mov	r2, r3
 8006952:	2300      	movs	r3, #0
 8006954:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695c:	4619      	mov	r1, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006964:	461a      	mov	r2, r3
 8006966:	680b      	ldr	r3, [r1, #0]
 8006968:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	2b01      	cmp	r3, #1
 800696e:	d10c      	bne.n	800698a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	2b00      	cmp	r3, #0
 8006974:	d104      	bne.n	8006980 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006976:	2100      	movs	r1, #0
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f965 	bl	8006c48 <USB_SetDevSpeed>
 800697e:	e008      	b.n	8006992 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006980:	2101      	movs	r1, #1
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f960 	bl	8006c48 <USB_SetDevSpeed>
 8006988:	e003      	b.n	8006992 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800698a:	2103      	movs	r1, #3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f95b 	bl	8006c48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006992:	2110      	movs	r1, #16
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f8f3 	bl	8006b80 <USB_FlushTxFifo>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f91f 	bl	8006be8 <USB_FlushRxFifo>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ba:	461a      	mov	r2, r3
 80069bc:	2300      	movs	r3, #0
 80069be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c6:	461a      	mov	r2, r3
 80069c8:	2300      	movs	r3, #0
 80069ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d2:	461a      	mov	r2, r3
 80069d4:	2300      	movs	r3, #0
 80069d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069d8:	2300      	movs	r3, #0
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	e043      	b.n	8006a66 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069f4:	d118      	bne.n	8006a28 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10a      	bne.n	8006a12 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a08:	461a      	mov	r2, r3
 8006a0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	e013      	b.n	8006a3a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	e008      	b.n	8006a3a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a34:	461a      	mov	r2, r3
 8006a36:	2300      	movs	r3, #0
 8006a38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a46:	461a      	mov	r2, r3
 8006a48:	2300      	movs	r3, #0
 8006a4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	3301      	adds	r3, #1
 8006a64:	613b      	str	r3, [r7, #16]
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d3b7      	bcc.n	80069de <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a6e:	2300      	movs	r3, #0
 8006a70:	613b      	str	r3, [r7, #16]
 8006a72:	e043      	b.n	8006afc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a8a:	d118      	bne.n	8006abe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	e013      	b.n	8006ad0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	e008      	b.n	8006ad0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aca:	461a      	mov	r2, r3
 8006acc:	2300      	movs	r3, #0
 8006ace:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006adc:	461a      	mov	r2, r3
 8006ade:	2300      	movs	r3, #0
 8006ae0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aee:	461a      	mov	r2, r3
 8006af0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006af4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	3301      	adds	r3, #1
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d3b7      	bcc.n	8006a74 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d105      	bne.n	8006b38 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	f043 0210 	orr.w	r2, r3, #16
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699a      	ldr	r2, [r3, #24]
 8006b3c:	4b0e      	ldr	r3, [pc, #56]	; (8006b78 <USB_DevInit+0x2b4>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f043 0208 	orr.w	r2, r3, #8
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d105      	bne.n	8006b68 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699a      	ldr	r2, [r3, #24]
 8006b60:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <USB_DevInit+0x2b8>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b74:	b004      	add	sp, #16
 8006b76:	4770      	bx	lr
 8006b78:	803c3800 	.word	0x803c3800
 8006b7c:	40000004 	.word	0x40000004

08006b80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3301      	adds	r3, #1
 8006b92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4a13      	ldr	r2, [pc, #76]	; (8006be4 <USB_FlushTxFifo+0x64>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d901      	bls.n	8006ba0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e01b      	b.n	8006bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	daf2      	bge.n	8006b8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	019b      	lsls	r3, r3, #6
 8006bb0:	f043 0220 	orr.w	r2, r3, #32
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4a08      	ldr	r2, [pc, #32]	; (8006be4 <USB_FlushTxFifo+0x64>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d901      	bls.n	8006bca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e006      	b.n	8006bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d0f0      	beq.n	8006bb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	00030d40 	.word	0x00030d40

08006be8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4a11      	ldr	r2, [pc, #68]	; (8006c44 <USB_FlushRxFifo+0x5c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d901      	bls.n	8006c06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e018      	b.n	8006c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	daf2      	bge.n	8006bf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2210      	movs	r2, #16
 8006c16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4a08      	ldr	r2, [pc, #32]	; (8006c44 <USB_FlushRxFifo+0x5c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d901      	bls.n	8006c2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e006      	b.n	8006c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f003 0310 	and.w	r3, r3, #16
 8006c32:	2b10      	cmp	r3, #16
 8006c34:	d0f0      	beq.n	8006c18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	00030d40 	.word	0x00030d40

08006c48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	68f9      	ldr	r1, [r7, #12]
 8006c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b085      	sub	sp, #20
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c94:	f023 0303 	bic.w	r3, r3, #3
 8006c98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ca8:	f043 0302 	orr.w	r3, r3, #2
 8006cac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4a13      	ldr	r2, [pc, #76]	; (8006d3c <USB_CoreReset+0x64>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d901      	bls.n	8006cf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e01b      	b.n	8006d2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	daf2      	bge.n	8006ce4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f043 0201 	orr.w	r2, r3, #1
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3301      	adds	r3, #1
 8006d12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4a09      	ldr	r2, [pc, #36]	; (8006d3c <USB_CoreReset+0x64>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d901      	bls.n	8006d20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e006      	b.n	8006d2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d0f0      	beq.n	8006d0e <USB_CoreReset+0x36>

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	00030d40 	.word	0x00030d40

08006d40 <_Znwj>:
 8006d40:	2801      	cmp	r0, #1
 8006d42:	bf38      	it	cc
 8006d44:	2001      	movcc	r0, #1
 8006d46:	b510      	push	{r4, lr}
 8006d48:	4604      	mov	r4, r0
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f000 f81a 	bl	8006d84 <malloc>
 8006d50:	b100      	cbz	r0, 8006d54 <_Znwj+0x14>
 8006d52:	bd10      	pop	{r4, pc}
 8006d54:	f000 f806 	bl	8006d64 <_ZSt15get_new_handlerv>
 8006d58:	b908      	cbnz	r0, 8006d5e <_Znwj+0x1e>
 8006d5a:	f000 f80b 	bl	8006d74 <abort>
 8006d5e:	4780      	blx	r0
 8006d60:	e7f3      	b.n	8006d4a <_Znwj+0xa>
	...

08006d64 <_ZSt15get_new_handlerv>:
 8006d64:	4b02      	ldr	r3, [pc, #8]	; (8006d70 <_ZSt15get_new_handlerv+0xc>)
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	f3bf 8f5b 	dmb	ish
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	240007d4 	.word	0x240007d4

08006d74 <abort>:
 8006d74:	b508      	push	{r3, lr}
 8006d76:	2006      	movs	r0, #6
 8006d78:	f000 f8e8 	bl	8006f4c <raise>
 8006d7c:	2001      	movs	r0, #1
 8006d7e:	f7fa fb51 	bl	8001424 <_exit>
	...

08006d84 <malloc>:
 8006d84:	4b02      	ldr	r3, [pc, #8]	; (8006d90 <malloc+0xc>)
 8006d86:	4601      	mov	r1, r0
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	f000 b823 	b.w	8006dd4 <_malloc_r>
 8006d8e:	bf00      	nop
 8006d90:	2400005c 	.word	0x2400005c

08006d94 <sbrk_aligned>:
 8006d94:	b570      	push	{r4, r5, r6, lr}
 8006d96:	4e0e      	ldr	r6, [pc, #56]	; (8006dd0 <sbrk_aligned+0x3c>)
 8006d98:	460c      	mov	r4, r1
 8006d9a:	6831      	ldr	r1, [r6, #0]
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	b911      	cbnz	r1, 8006da6 <sbrk_aligned+0x12>
 8006da0:	f000 f8f0 	bl	8006f84 <_sbrk_r>
 8006da4:	6030      	str	r0, [r6, #0]
 8006da6:	4621      	mov	r1, r4
 8006da8:	4628      	mov	r0, r5
 8006daa:	f000 f8eb 	bl	8006f84 <_sbrk_r>
 8006dae:	1c43      	adds	r3, r0, #1
 8006db0:	d00a      	beq.n	8006dc8 <sbrk_aligned+0x34>
 8006db2:	1cc4      	adds	r4, r0, #3
 8006db4:	f024 0403 	bic.w	r4, r4, #3
 8006db8:	42a0      	cmp	r0, r4
 8006dba:	d007      	beq.n	8006dcc <sbrk_aligned+0x38>
 8006dbc:	1a21      	subs	r1, r4, r0
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f000 f8e0 	bl	8006f84 <_sbrk_r>
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d101      	bne.n	8006dcc <sbrk_aligned+0x38>
 8006dc8:	f04f 34ff 	mov.w	r4, #4294967295
 8006dcc:	4620      	mov	r0, r4
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
 8006dd0:	240007dc 	.word	0x240007dc

08006dd4 <_malloc_r>:
 8006dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd8:	1ccd      	adds	r5, r1, #3
 8006dda:	f025 0503 	bic.w	r5, r5, #3
 8006dde:	3508      	adds	r5, #8
 8006de0:	2d0c      	cmp	r5, #12
 8006de2:	bf38      	it	cc
 8006de4:	250c      	movcc	r5, #12
 8006de6:	2d00      	cmp	r5, #0
 8006de8:	4607      	mov	r7, r0
 8006dea:	db01      	blt.n	8006df0 <_malloc_r+0x1c>
 8006dec:	42a9      	cmp	r1, r5
 8006dee:	d905      	bls.n	8006dfc <_malloc_r+0x28>
 8006df0:	230c      	movs	r3, #12
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	2600      	movs	r6, #0
 8006df6:	4630      	mov	r0, r6
 8006df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dfc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ed0 <_malloc_r+0xfc>
 8006e00:	f000 f868 	bl	8006ed4 <__malloc_lock>
 8006e04:	f8d8 3000 	ldr.w	r3, [r8]
 8006e08:	461c      	mov	r4, r3
 8006e0a:	bb5c      	cbnz	r4, 8006e64 <_malloc_r+0x90>
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	4638      	mov	r0, r7
 8006e10:	f7ff ffc0 	bl	8006d94 <sbrk_aligned>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	4604      	mov	r4, r0
 8006e18:	d155      	bne.n	8006ec6 <_malloc_r+0xf2>
 8006e1a:	f8d8 4000 	ldr.w	r4, [r8]
 8006e1e:	4626      	mov	r6, r4
 8006e20:	2e00      	cmp	r6, #0
 8006e22:	d145      	bne.n	8006eb0 <_malloc_r+0xdc>
 8006e24:	2c00      	cmp	r4, #0
 8006e26:	d048      	beq.n	8006eba <_malloc_r+0xe6>
 8006e28:	6823      	ldr	r3, [r4, #0]
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	eb04 0903 	add.w	r9, r4, r3
 8006e32:	f000 f8a7 	bl	8006f84 <_sbrk_r>
 8006e36:	4581      	cmp	r9, r0
 8006e38:	d13f      	bne.n	8006eba <_malloc_r+0xe6>
 8006e3a:	6821      	ldr	r1, [r4, #0]
 8006e3c:	1a6d      	subs	r5, r5, r1
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4638      	mov	r0, r7
 8006e42:	f7ff ffa7 	bl	8006d94 <sbrk_aligned>
 8006e46:	3001      	adds	r0, #1
 8006e48:	d037      	beq.n	8006eba <_malloc_r+0xe6>
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	442b      	add	r3, r5
 8006e4e:	6023      	str	r3, [r4, #0]
 8006e50:	f8d8 3000 	ldr.w	r3, [r8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d038      	beq.n	8006eca <_malloc_r+0xf6>
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	42a2      	cmp	r2, r4
 8006e5c:	d12b      	bne.n	8006eb6 <_malloc_r+0xe2>
 8006e5e:	2200      	movs	r2, #0
 8006e60:	605a      	str	r2, [r3, #4]
 8006e62:	e00f      	b.n	8006e84 <_malloc_r+0xb0>
 8006e64:	6822      	ldr	r2, [r4, #0]
 8006e66:	1b52      	subs	r2, r2, r5
 8006e68:	d41f      	bmi.n	8006eaa <_malloc_r+0xd6>
 8006e6a:	2a0b      	cmp	r2, #11
 8006e6c:	d917      	bls.n	8006e9e <_malloc_r+0xca>
 8006e6e:	1961      	adds	r1, r4, r5
 8006e70:	42a3      	cmp	r3, r4
 8006e72:	6025      	str	r5, [r4, #0]
 8006e74:	bf18      	it	ne
 8006e76:	6059      	strne	r1, [r3, #4]
 8006e78:	6863      	ldr	r3, [r4, #4]
 8006e7a:	bf08      	it	eq
 8006e7c:	f8c8 1000 	streq.w	r1, [r8]
 8006e80:	5162      	str	r2, [r4, r5]
 8006e82:	604b      	str	r3, [r1, #4]
 8006e84:	4638      	mov	r0, r7
 8006e86:	f104 060b 	add.w	r6, r4, #11
 8006e8a:	f000 f829 	bl	8006ee0 <__malloc_unlock>
 8006e8e:	f026 0607 	bic.w	r6, r6, #7
 8006e92:	1d23      	adds	r3, r4, #4
 8006e94:	1af2      	subs	r2, r6, r3
 8006e96:	d0ae      	beq.n	8006df6 <_malloc_r+0x22>
 8006e98:	1b9b      	subs	r3, r3, r6
 8006e9a:	50a3      	str	r3, [r4, r2]
 8006e9c:	e7ab      	b.n	8006df6 <_malloc_r+0x22>
 8006e9e:	42a3      	cmp	r3, r4
 8006ea0:	6862      	ldr	r2, [r4, #4]
 8006ea2:	d1dd      	bne.n	8006e60 <_malloc_r+0x8c>
 8006ea4:	f8c8 2000 	str.w	r2, [r8]
 8006ea8:	e7ec      	b.n	8006e84 <_malloc_r+0xb0>
 8006eaa:	4623      	mov	r3, r4
 8006eac:	6864      	ldr	r4, [r4, #4]
 8006eae:	e7ac      	b.n	8006e0a <_malloc_r+0x36>
 8006eb0:	4634      	mov	r4, r6
 8006eb2:	6876      	ldr	r6, [r6, #4]
 8006eb4:	e7b4      	b.n	8006e20 <_malloc_r+0x4c>
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	e7cc      	b.n	8006e54 <_malloc_r+0x80>
 8006eba:	230c      	movs	r3, #12
 8006ebc:	603b      	str	r3, [r7, #0]
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	f000 f80e 	bl	8006ee0 <__malloc_unlock>
 8006ec4:	e797      	b.n	8006df6 <_malloc_r+0x22>
 8006ec6:	6025      	str	r5, [r4, #0]
 8006ec8:	e7dc      	b.n	8006e84 <_malloc_r+0xb0>
 8006eca:	605b      	str	r3, [r3, #4]
 8006ecc:	deff      	udf	#255	; 0xff
 8006ece:	bf00      	nop
 8006ed0:	240007d8 	.word	0x240007d8

08006ed4 <__malloc_lock>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <__malloc_lock+0x8>)
 8006ed6:	f000 b88f 	b.w	8006ff8 <__retarget_lock_acquire_recursive>
 8006eda:	bf00      	nop
 8006edc:	2400091c 	.word	0x2400091c

08006ee0 <__malloc_unlock>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	; (8006ee8 <__malloc_unlock+0x8>)
 8006ee2:	f000 b88a 	b.w	8006ffa <__retarget_lock_release_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	2400091c 	.word	0x2400091c

08006eec <memset>:
 8006eec:	4402      	add	r2, r0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d100      	bne.n	8006ef6 <memset+0xa>
 8006ef4:	4770      	bx	lr
 8006ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8006efa:	e7f9      	b.n	8006ef0 <memset+0x4>

08006efc <_raise_r>:
 8006efc:	291f      	cmp	r1, #31
 8006efe:	b538      	push	{r3, r4, r5, lr}
 8006f00:	4604      	mov	r4, r0
 8006f02:	460d      	mov	r5, r1
 8006f04:	d904      	bls.n	8006f10 <_raise_r+0x14>
 8006f06:	2316      	movs	r3, #22
 8006f08:	6003      	str	r3, [r0, #0]
 8006f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
 8006f10:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006f12:	b112      	cbz	r2, 8006f1a <_raise_r+0x1e>
 8006f14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f18:	b94b      	cbnz	r3, 8006f2e <_raise_r+0x32>
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 f830 	bl	8006f80 <_getpid_r>
 8006f20:	462a      	mov	r2, r5
 8006f22:	4601      	mov	r1, r0
 8006f24:	4620      	mov	r0, r4
 8006f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f2a:	f000 b817 	b.w	8006f5c <_kill_r>
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d00a      	beq.n	8006f48 <_raise_r+0x4c>
 8006f32:	1c59      	adds	r1, r3, #1
 8006f34:	d103      	bne.n	8006f3e <_raise_r+0x42>
 8006f36:	2316      	movs	r3, #22
 8006f38:	6003      	str	r3, [r0, #0]
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	e7e7      	b.n	8006f0e <_raise_r+0x12>
 8006f3e:	2400      	movs	r4, #0
 8006f40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f44:	4628      	mov	r0, r5
 8006f46:	4798      	blx	r3
 8006f48:	2000      	movs	r0, #0
 8006f4a:	e7e0      	b.n	8006f0e <_raise_r+0x12>

08006f4c <raise>:
 8006f4c:	4b02      	ldr	r3, [pc, #8]	; (8006f58 <raise+0xc>)
 8006f4e:	4601      	mov	r1, r0
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	f7ff bfd3 	b.w	8006efc <_raise_r>
 8006f56:	bf00      	nop
 8006f58:	2400005c 	.word	0x2400005c

08006f5c <_kill_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4d07      	ldr	r5, [pc, #28]	; (8006f7c <_kill_r+0x20>)
 8006f60:	2300      	movs	r3, #0
 8006f62:	4604      	mov	r4, r0
 8006f64:	4608      	mov	r0, r1
 8006f66:	4611      	mov	r1, r2
 8006f68:	602b      	str	r3, [r5, #0]
 8006f6a:	f7fa fa4b 	bl	8001404 <_kill>
 8006f6e:	1c43      	adds	r3, r0, #1
 8006f70:	d102      	bne.n	8006f78 <_kill_r+0x1c>
 8006f72:	682b      	ldr	r3, [r5, #0]
 8006f74:	b103      	cbz	r3, 8006f78 <_kill_r+0x1c>
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	bd38      	pop	{r3, r4, r5, pc}
 8006f7a:	bf00      	nop
 8006f7c:	24000918 	.word	0x24000918

08006f80 <_getpid_r>:
 8006f80:	f7fa ba38 	b.w	80013f4 <_getpid>

08006f84 <_sbrk_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4d06      	ldr	r5, [pc, #24]	; (8006fa0 <_sbrk_r+0x1c>)
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	4608      	mov	r0, r1
 8006f8e:	602b      	str	r3, [r5, #0]
 8006f90:	f7fa fa52 	bl	8001438 <_sbrk>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d102      	bne.n	8006f9e <_sbrk_r+0x1a>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	b103      	cbz	r3, 8006f9e <_sbrk_r+0x1a>
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	24000918 	.word	0x24000918

08006fa4 <__errno>:
 8006fa4:	4b01      	ldr	r3, [pc, #4]	; (8006fac <__errno+0x8>)
 8006fa6:	6818      	ldr	r0, [r3, #0]
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	2400005c 	.word	0x2400005c

08006fb0 <__libc_init_array>:
 8006fb0:	b570      	push	{r4, r5, r6, lr}
 8006fb2:	4d0d      	ldr	r5, [pc, #52]	; (8006fe8 <__libc_init_array+0x38>)
 8006fb4:	4c0d      	ldr	r4, [pc, #52]	; (8006fec <__libc_init_array+0x3c>)
 8006fb6:	1b64      	subs	r4, r4, r5
 8006fb8:	10a4      	asrs	r4, r4, #2
 8006fba:	2600      	movs	r6, #0
 8006fbc:	42a6      	cmp	r6, r4
 8006fbe:	d109      	bne.n	8006fd4 <__libc_init_array+0x24>
 8006fc0:	4d0b      	ldr	r5, [pc, #44]	; (8006ff0 <__libc_init_array+0x40>)
 8006fc2:	4c0c      	ldr	r4, [pc, #48]	; (8006ff4 <__libc_init_array+0x44>)
 8006fc4:	f000 f81a 	bl	8006ffc <_init>
 8006fc8:	1b64      	subs	r4, r4, r5
 8006fca:	10a4      	asrs	r4, r4, #2
 8006fcc:	2600      	movs	r6, #0
 8006fce:	42a6      	cmp	r6, r4
 8006fd0:	d105      	bne.n	8006fde <__libc_init_array+0x2e>
 8006fd2:	bd70      	pop	{r4, r5, r6, pc}
 8006fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd8:	4798      	blx	r3
 8006fda:	3601      	adds	r6, #1
 8006fdc:	e7ee      	b.n	8006fbc <__libc_init_array+0xc>
 8006fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe2:	4798      	blx	r3
 8006fe4:	3601      	adds	r6, #1
 8006fe6:	e7f2      	b.n	8006fce <__libc_init_array+0x1e>
 8006fe8:	08007054 	.word	0x08007054
 8006fec:	08007054 	.word	0x08007054
 8006ff0:	08007054 	.word	0x08007054
 8006ff4:	08007058 	.word	0x08007058

08006ff8 <__retarget_lock_acquire_recursive>:
 8006ff8:	4770      	bx	lr

08006ffa <__retarget_lock_release_recursive>:
 8006ffa:	4770      	bx	lr

08006ffc <_init>:
 8006ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffe:	bf00      	nop
 8007000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007002:	bc08      	pop	{r3}
 8007004:	469e      	mov	lr, r3
 8007006:	4770      	bx	lr

08007008 <_fini>:
 8007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700a:	bf00      	nop
 800700c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700e:	bc08      	pop	{r3}
 8007010:	469e      	mov	lr, r3
 8007012:	4770      	bx	lr
